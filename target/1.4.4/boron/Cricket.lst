
c:/Users/ryan.trisnojoyo/Documents/Particle/projects/Cricket/target/1.4.4/boron/Cricket.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002d24  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  00016e00  2**0
                  CONTENTS
  4 .data         00000090  2003e2a4  000d6d40  0000e2a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000004bc  2003e334  2003e334  0001e334  2**2
                  ALLOC
  6 .module_info_suffix 0000002c  000d6dd0  000d6dd0  00016dd0  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000d6dfc  000d6dfc  00016dfc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000dedd2  00000000  00000000  00016e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000119a8  00000000  00000000  000f5bd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000203cc  00000000  00000000  0010757a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002978  00000000  00000000  00127946  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004cb0  00000000  00000000  0012a2be  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00035e62  00000000  00000000  0012ef6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002b4e7  00000000  00000000  00164dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001031a7  00000000  00000000  001902b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000d81c  00000000  00000000  00293460  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fb9f 	bl	d6770 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fba4 	bl	d6786 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e2a4 	.word	0x2003e2a4
   d4048:	000d6d40 	.word	0x000d6d40
   d404c:	2003e334 	.word	0x2003e334
   d4050:	2003e334 	.word	0x2003e334
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 facd 	bl	d55f8 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d6d34 	.word	0x000d6d34
   d4080:	000d6cf8 	.word	0x000d6cf8

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b87e 	b.w	d4184 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fa35 	bl	d44f8 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 ba7f 	b.w	d5594 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 be2f 	b.w	d4cf8 <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 be35 	b.w	d4d08 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 be33 	b.w	d4d08 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZN10CloudClass8syncTimeEv.isra.8>:
    void unsubscribe()
    {
        CLOUD_FN(spark_unsubscribe(NULL), (void)0);
    }

    bool syncTime(void)
   d40b2:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d40b4:	f000 fdf8 	bl	d4ca8 <spark_cloud_flag_connected>
        CLOUD_FN(spark_unsubscribe(NULL), (void)0);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d40b8:	b120      	cbz	r0, d40c4 <_ZN10CloudClass8syncTimeEv.isra.8+0x12>
            return false;
        }
        return CLOUD_FN(spark_sync_time(NULL), false);
   d40ba:	2000      	movs	r0, #0
    }
   d40bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    bool syncTime(void)
    {
        if (!connected()) {
            return false;
        }
        return CLOUD_FN(spark_sync_time(NULL), false);
   d40c0:	f000 be02 	b.w	d4cc8 <spark_sync_time>
    }
   d40c4:	bd08      	pop	{r3, pc}

000d40c6 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d40c6:	2200      	movs	r2, #0
   d40c8:	4611      	mov	r1, r2
   d40ca:	6840      	ldr	r0, [r0, #4]
   d40cc:	f000 bd9c 	b.w	d4c08 <network_ready>

000d40d0 <_Z14initConnectionv>:
{
  initConnection();
  Particle.syncTime();
}
bool initConnection()
{
   d40d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d40d4:	4c25      	ldr	r4, [pc, #148]	; (d416c <_Z14initConnectionv+0x9c>)

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d40d6:	2300      	movs	r3, #0
   d40d8:	461a      	mov	r2, r3
   d40da:	4619      	mov	r1, r3
   d40dc:	6860      	ldr	r0, [r4, #4]
   d40de:	f000 fd9b 	bl	d4c18 <network_on>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d40e2:	2300      	movs	r3, #0
   d40e4:	6860      	ldr	r0, [r4, #4]
  bool retVal = false;
  Cellular.on();
  Cellular.connect();
  waitFor(Cellular.ready,timeout);
   d40e6:	4c22      	ldr	r4, [pc, #136]	; (d4170 <_Z14initConnectionv+0xa0>)
   d40e8:	461a      	mov	r2, r3
   d40ea:	4619      	mov	r1, r3
   d40ec:	f000 fd74 	bl	d4bd8 <network_connect>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d40f0:	2000      	movs	r0, #0
   d40f2:	6826      	ldr	r6, [r4, #0]
   d40f4:	f000 fc2a 	bl	d494c <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d40f8:	f04f 0900 	mov.w	r9, #0
   d40fc:	4680      	mov	r8, r0
   d40fe:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4100:	2000      	movs	r0, #0
   d4102:	f000 fc23 	bl	d494c <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4106:	ebb0 0008 	subs.w	r0, r0, r8
   d410a:	eb61 0109 	sbc.w	r1, r1, r9
   d410e:	42b9      	cmp	r1, r7
   d4110:	bf08      	it	eq
   d4112:	42b0      	cmpeq	r0, r6
   d4114:	d206      	bcs.n	d4124 <_Z14initConnectionv+0x54>
   d4116:	4815      	ldr	r0, [pc, #84]	; (d416c <_Z14initConnectionv+0x9c>)
   d4118:	f7ff ffd5 	bl	d40c6 <_ZN5spark13CellularClass5readyEv>
   d411c:	b910      	cbnz	r0, d4124 <_Z14initConnectionv+0x54>
            spark_process();
   d411e:	f000 fdab 	bl	d4c78 <spark_process>
   d4122:	e7ed      	b.n	d4100 <_Z14initConnectionv+0x30>
   d4124:	4811      	ldr	r0, [pc, #68]	; (d416c <_Z14initConnectionv+0x9c>)
   d4126:	f7ff ffce 	bl	d40c6 <_ZN5spark13CellularClass5readyEv>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d412a:	f000 fdad 	bl	d4c88 <spark_cloud_flag_connect>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d412e:	2000      	movs	r0, #0
  Particle.connect();
  waitFor(Particle.connected,timeout);
   d4130:	6824      	ldr	r4, [r4, #0]
   d4132:	f000 fc0b 	bl	d494c <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4136:	2700      	movs	r7, #0
   d4138:	4606      	mov	r6, r0
   d413a:	2500      	movs	r5, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d413c:	2000      	movs	r0, #0
   d413e:	f000 fc05 	bl	d494c <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4142:	1b80      	subs	r0, r0, r6
   d4144:	eb61 0107 	sbc.w	r1, r1, r7
   d4148:	42a9      	cmp	r1, r5
   d414a:	bf08      	it	eq
   d414c:	42a0      	cmpeq	r0, r4
   d414e:	d202      	bcs.n	d4156 <_Z14initConnectionv+0x86>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4150:	f000 fdaa 	bl	d4ca8 <spark_cloud_flag_connected>
   d4154:	b130      	cbz	r0, d4164 <_Z14initConnectionv+0x94>
   d4156:	f000 fda7 	bl	d4ca8 <spark_cloud_flag_connected>
  if (Cellular.ready())
   d415a:	4804      	ldr	r0, [pc, #16]	; (d416c <_Z14initConnectionv+0x9c>)
   d415c:	f7ff ffb3 	bl	d40c6 <_ZN5spark13CellularClass5readyEv>
    retVal = true;
  return retVal;
   d4160:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            spark_process();
   d4164:	f000 fd88 	bl	d4c78 <spark_process>
   d4168:	e7e8      	b.n	d413c <_Z14initConnectionv+0x6c>
   d416a:	bf00      	nop
   d416c:	2003e3e8 	.word	0x2003e3e8
   d4170:	2003e2a8 	.word	0x2003e2a8

000d4174 <_Z12initSyncTimev>:
      System.sleep(wakeUpPins,1,FALLING,logInterval * 60);
    }
    
}
void initSyncTime()
{
   d4174:	b508      	push	{r3, lr}
  initConnection();
   d4176:	f7ff ffab 	bl	d40d0 <_Z14initConnectionv>
  Particle.syncTime();
}
   d417a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    
}
void initSyncTime()
{
  initConnection();
  Particle.syncTime();
   d417e:	f7ff bf98 	b.w	d40b2 <_ZN10CloudClass8syncTimeEv.isra.8>
	...

000d4184 <setup>:


SYSTEM_MODE (MANUAL);

void setup()
{ 
   d4184:	b570      	push	{r4, r5, r6, lr}
  Serial.begin(9600);
  pinMode(pinRelay,OUTPUT);
   d4186:	4c1c      	ldr	r4, [pc, #112]	; (d41f8 <setup+0x74>)
  pinMode(pinMassaSensor, INPUT);
  pinMode(pinFloatSensor, INPUT_PULLUP);
  pinMode(led1, OUTPUT);
   d4188:	4e1c      	ldr	r6, [pc, #112]	; (d41fc <setup+0x78>)
  pinMode(led2, OUTPUT);
   d418a:	4d1d      	ldr	r5, [pc, #116]	; (d4200 <setup+0x7c>)

SYSTEM_MODE (MANUAL);

void setup()
{ 
  Serial.begin(9600);
   d418c:	f001 fde6 	bl	d5d5c <_Z16_fetch_usbserialv>
   d4190:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4194:	f001 fdd6 	bl	d5d44 <_ZN9USBSerial5beginEl>
  pinMode(pinRelay,OUTPUT);
   d4198:	8820      	ldrh	r0, [r4, #0]
   d419a:	2101      	movs	r1, #1
   d419c:	f002 f8f0 	bl	d6380 <pinMode>
  pinMode(pinMassaSensor, INPUT);
   d41a0:	4b18      	ldr	r3, [pc, #96]	; (d4204 <setup+0x80>)
   d41a2:	2100      	movs	r1, #0
   d41a4:	8818      	ldrh	r0, [r3, #0]
   d41a6:	f002 f8eb 	bl	d6380 <pinMode>
  pinMode(pinFloatSensor, INPUT_PULLUP);
   d41aa:	4b17      	ldr	r3, [pc, #92]	; (d4208 <setup+0x84>)
   d41ac:	2102      	movs	r1, #2
   d41ae:	8818      	ldrh	r0, [r3, #0]
   d41b0:	f002 f8e6 	bl	d6380 <pinMode>
  pinMode(led1, OUTPUT);
   d41b4:	8830      	ldrh	r0, [r6, #0]
   d41b6:	2101      	movs	r1, #1
   d41b8:	f002 f8e2 	bl	d6380 <pinMode>
  pinMode(led2, OUTPUT);
   d41bc:	8828      	ldrh	r0, [r5, #0]
   d41be:	2101      	movs	r1, #1
   d41c0:	f002 f8de 	bl	d6380 <pinMode>

  digitalWrite(led1, LOW);
   d41c4:	8830      	ldrh	r0, [r6, #0]
   d41c6:	2100      	movs	r1, #0
   d41c8:	f002 f8eb 	bl	d63a2 <digitalWrite>
  digitalWrite(led2, LOW);
   d41cc:	8828      	ldrh	r0, [r5, #0]
   d41ce:	2100      	movs	r1, #0
   d41d0:	f002 f8e7 	bl	d63a2 <digitalWrite>
  digitalWrite(pinRelay,LOW); 
   d41d4:	2100      	movs	r1, #0
   d41d6:	8820      	ldrh	r0, [r4, #0]
   d41d8:	f002 f8e3 	bl	d63a2 <digitalWrite>

  initSyncTime();
   d41dc:	f7ff ffca 	bl	d4174 <_Z12initSyncTimev>
  prevTime = Time.now();         
   d41e0:	f001 f8e8 	bl	d53b4 <_ZN9TimeClass3nowEv>
   d41e4:	4b09      	ldr	r3, [pc, #36]	; (d420c <setup+0x88>)
   d41e6:	6018      	str	r0, [r3, #0]
  //Particle.subscribe(System.deviceID() + "/hook-response/Status", responseHandler, MY_DEVICES);
  Serial.println("Starting");
   d41e8:	f001 fdb8 	bl	d5d5c <_Z16_fetch_usbserialv>
   d41ec:	4908      	ldr	r1, [pc, #32]	; (d4210 <setup+0x8c>)
}
   d41ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  digitalWrite(pinRelay,LOW); 

  initSyncTime();
  prevTime = Time.now();         
  //Particle.subscribe(System.deviceID() + "/hook-response/Status", responseHandler, MY_DEVICES);
  Serial.println("Starting");
   d41f2:	f001 b84c 	b.w	d528e <_ZN5Print7printlnEPKc>
   d41f6:	bf00      	nop
   d41f8:	2003e2ac 	.word	0x2003e2ac
   d41fc:	2003e398 	.word	0x2003e398
   d4200:	2003e2b0 	.word	0x2003e2b0
   d4204:	2003e2a4 	.word	0x2003e2a4
   d4208:	2003e2bc 	.word	0x2003e2bc
   d420c:	2003e37c 	.word	0x2003e37c
   d4210:	000d6928 	.word	0x000d6928

000d4214 <_Z20disconnectConnectionv>:
  if (Cellular.ready())
    retVal = true;
  return retVal;
}
void disconnectConnection()
{
   d4214:	b510      	push	{r4, lr}
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
   d4216:	f000 fd3f 	bl	d4c98 <spark_cloud_flag_disconnect>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d421a:	f000 fd45 	bl	d4ca8 <spark_cloud_flag_connected>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d421e:	4604      	mov	r4, r0
   d4220:	b950      	cbnz	r0, d4238 <_Z20disconnectConnectionv+0x24>
   d4222:	f000 fd41 	bl	d4ca8 <spark_cloud_flag_connected>
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d4226:	4806      	ldr	r0, [pc, #24]	; (d4240 <_Z20disconnectConnectionv+0x2c>)
   d4228:	4623      	mov	r3, r4
   d422a:	4622      	mov	r2, r4
   d422c:	4621      	mov	r1, r4
   d422e:	6840      	ldr	r0, [r0, #4]
  Particle.disconnect();
  waitUntil(Particle.disconnected);
  Cellular.off();
}
   d4230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4234:	f000 bcf8 	b.w	d4c28 <network_off>
            spark_process();
   d4238:	f000 fd1e 	bl	d4c78 <spark_process>
   d423c:	e7ed      	b.n	d421a <_Z20disconnectConnectionv+0x6>
   d423e:	bf00      	nop
   d4240:	2003e3e8 	.word	0x2003e3e8

000d4244 <_Z23calculateUltraSonicDatav>:

void calculateUltraSonicData()
{
   d4244:	b510      	push	{r4, lr}
  digitalWrite(pinRelay,HIGH);
   d4246:	4c0c      	ldr	r4, [pc, #48]	; (d4278 <_Z23calculateUltraSonicDatav+0x34>)
   d4248:	2101      	movs	r1, #1
   d424a:	8820      	ldrh	r0, [r4, #0]
   d424c:	f002 f8a9 	bl	d63a2 <digitalWrite>
  delay(5000); 
   d4250:	f241 3088 	movw	r0, #5000	; 0x1388
   d4254:	f001 f8c0 	bl	d53d8 <delay>
  massaValue = analogRead(pinMassaSensor);
   d4258:	4b08      	ldr	r3, [pc, #32]	; (d427c <_Z23calculateUltraSonicDatav+0x38>)
   d425a:	8818      	ldrh	r0, [r3, #0]
   d425c:	f002 f8ba 	bl	d63d4 <analogRead>
   d4260:	4b07      	ldr	r3, [pc, #28]	; (d4280 <_Z23calculateUltraSonicDatav+0x3c>)
   d4262:	6018      	str	r0, [r3, #0]
  delay(1000);
   d4264:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4268:	f001 f8b6 	bl	d53d8 <delay>
  digitalWrite(pinRelay,LOW); 
   d426c:	8820      	ldrh	r0, [r4, #0]
   d426e:	2100      	movs	r1, #0
}
   d4270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
  digitalWrite(pinRelay,HIGH);
  delay(5000); 
  massaValue = analogRead(pinMassaSensor);
  delay(1000);
  digitalWrite(pinRelay,LOW); 
   d4274:	f002 b895 	b.w	d63a2 <digitalWrite>
   d4278:	2003e2ac 	.word	0x2003e2ac
   d427c:	2003e2a4 	.word	0x2003e2a4
   d4280:	2003e350 	.word	0x2003e350

000d4284 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4284:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4286:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4288:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d428a:	b17c      	cbz	r4, d42ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d428c:	6863      	ldr	r3, [r4, #4]
   d428e:	3b01      	subs	r3, #1
   d4290:	6063      	str	r3, [r4, #4]
   d4292:	b95b      	cbnz	r3, d42ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d4294:	6823      	ldr	r3, [r4, #0]
   d4296:	4620      	mov	r0, r4
   d4298:	689b      	ldr	r3, [r3, #8]
   d429a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d429c:	68a3      	ldr	r3, [r4, #8]
   d429e:	3b01      	subs	r3, #1
   d42a0:	60a3      	str	r3, [r4, #8]
   d42a2:	b91b      	cbnz	r3, d42ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d42a4:	6823      	ldr	r3, [r4, #0]
   d42a6:	4620      	mov	r0, r4
   d42a8:	68db      	ldr	r3, [r3, #12]
   d42aa:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d42ac:	4628      	mov	r0, r5
   d42ae:	bd38      	pop	{r3, r4, r5, pc}

000d42b0 <_Z13statusMessagev>:
  return true;
}

/****  Every version of code should contain a daily status message  ****/
void statusMessage()
{
   d42b0:	b530      	push	{r4, r5, lr}
   d42b2:	b0a5      	sub	sp, #148	; 0x94
  if (initConnection())
   d42b4:	f7ff ff0c 	bl	d40d0 <_Z14initConnectionv>
   d42b8:	2800      	cmp	r0, #0
   d42ba:	f000 80d0 	beq.w	d445e <_Z13statusMessagev+0x1ae>
  {
        Particle.syncTime();
   d42be:	f7ff fef8 	bl	d40b2 <_ZN10CloudClass8syncTimeEv.isra.8>
    delay(2000);
   d42c2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d42c6:	f001 f887 	bl	d53d8 <delay>
    CellularSignal sig = Cellular.RSSI();
   d42ca:	4968      	ldr	r1, [pc, #416]	; (d446c <_Z13statusMessagev+0x1bc>)
   d42cc:	a81a      	add	r0, sp, #104	; 0x68
   d42ce:	f001 fd9b 	bl	d5e08 <_ZN5spark13CellularClass4RSSIEv>
    int rssi = sig.rssi;
   d42d2:	9c1c      	ldr	r4, [sp, #112]	; 0x70
    Serial.println("RSSI: " + (String)rssi);
   d42d4:	f001 fd42 	bl	d5d5c <_Z16_fetch_usbserialv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d42d8:	4965      	ldr	r1, [pc, #404]	; (d4470 <_Z13statusMessagev+0x1c0>)
   d42da:	4605      	mov	r5, r0
   d42dc:	a816      	add	r0, sp, #88	; 0x58
   d42de:	f000 feae 	bl	d503e <_ZN6StringC1EPK19__FlashStringHelper>
   d42e2:	220a      	movs	r2, #10
   d42e4:	4621      	mov	r1, r4
   d42e6:	a812      	add	r0, sp, #72	; 0x48
   d42e8:	f000 ff0c 	bl	d5104 <_ZN6StringC1Eih>
   d42ec:	a912      	add	r1, sp, #72	; 0x48
   d42ee:	a816      	add	r0, sp, #88	; 0x58
   d42f0:	f000 ff58 	bl	d51a4 <_ZplRK15StringSumHelperRK6String>
   d42f4:	6801      	ldr	r1, [r0, #0]
   d42f6:	4628      	mov	r0, r5
   d42f8:	f000 ffc9 	bl	d528e <_ZN5Print7printlnEPKc>
   d42fc:	a812      	add	r0, sp, #72	; 0x48
   d42fe:	f000 fe57 	bl	d4fb0 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4302:	a816      	add	r0, sp, #88	; 0x58
   d4304:	f000 fe54 	bl	d4fb0 <_ZN6StringD1Ev>

    String message =  String(Time.now()) + ",Status,";
   d4308:	f001 f854 	bl	d53b4 <_ZN9TimeClass3nowEv>
   d430c:	220a      	movs	r2, #10
   d430e:	4601      	mov	r1, r0
   d4310:	a812      	add	r0, sp, #72	; 0x48
   d4312:	f000 ff0a 	bl	d512a <_ZN6StringC1Elh>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d4316:	a912      	add	r1, sp, #72	; 0x48
   d4318:	a816      	add	r0, sp, #88	; 0x58
   d431a:	f000 fecf 	bl	d50bc <_ZN6StringC1ERKS_>
   d431e:	4955      	ldr	r1, [pc, #340]	; (d4474 <_Z13statusMessagev+0x1c4>)
   d4320:	a816      	add	r0, sp, #88	; 0x58
   d4322:	f000 ff4b 	bl	d51bc <_ZplRK15StringSumHelperPKc>
   d4326:	4601      	mov	r1, r0
   d4328:	a802      	add	r0, sp, #8
   d432a:	f000 fec7 	bl	d50bc <_ZN6StringC1ERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d432e:	a816      	add	r0, sp, #88	; 0x58
   d4330:	f000 fe3e 	bl	d4fb0 <_ZN6StringD1Ev>
   d4334:	a812      	add	r0, sp, #72	; 0x48
   d4336:	f000 fe3b 	bl	d4fb0 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d433a:	494f      	ldr	r1, [pc, #316]	; (d4478 <_Z13statusMessagev+0x1c8>)
   d433c:	a80a      	add	r0, sp, #40	; 0x28
   d433e:	f000 fe7e 	bl	d503e <_ZN6StringC1EPK19__FlashStringHelper>
    message += "li:" + (String)logInterval + ",si:" + (String)sendInterval + ",sm:" + (String)statusInterval + ",tm:" + (String)transmitMode;
   d4342:	4b4e      	ldr	r3, [pc, #312]	; (d447c <_Z13statusMessagev+0x1cc>)
   d4344:	220a      	movs	r2, #10
   d4346:	6819      	ldr	r1, [r3, #0]
   d4348:	a806      	add	r0, sp, #24
   d434a:	f000 fedb 	bl	d5104 <_ZN6StringC1Eih>
   d434e:	a906      	add	r1, sp, #24
   d4350:	a80a      	add	r0, sp, #40	; 0x28
   d4352:	f000 ff27 	bl	d51a4 <_ZplRK15StringSumHelperRK6String>
   d4356:	494a      	ldr	r1, [pc, #296]	; (d4480 <_Z13statusMessagev+0x1d0>)
   d4358:	f000 ff30 	bl	d51bc <_ZplRK15StringSumHelperPKc>
   d435c:	4b49      	ldr	r3, [pc, #292]	; (d4484 <_Z13statusMessagev+0x1d4>)
   d435e:	220a      	movs	r2, #10
   d4360:	6819      	ldr	r1, [r3, #0]
   d4362:	4605      	mov	r5, r0
   d4364:	a80e      	add	r0, sp, #56	; 0x38
   d4366:	f000 fecd 	bl	d5104 <_ZN6StringC1Eih>
   d436a:	a90e      	add	r1, sp, #56	; 0x38
   d436c:	4628      	mov	r0, r5
   d436e:	f000 ff19 	bl	d51a4 <_ZplRK15StringSumHelperRK6String>
   d4372:	4945      	ldr	r1, [pc, #276]	; (d4488 <_Z13statusMessagev+0x1d8>)
   d4374:	f000 ff22 	bl	d51bc <_ZplRK15StringSumHelperPKc>
   d4378:	4b44      	ldr	r3, [pc, #272]	; (d448c <_Z13statusMessagev+0x1dc>)
   d437a:	220a      	movs	r2, #10
   d437c:	6819      	ldr	r1, [r3, #0]
   d437e:	4605      	mov	r5, r0
   d4380:	a812      	add	r0, sp, #72	; 0x48
   d4382:	f000 febf 	bl	d5104 <_ZN6StringC1Eih>
   d4386:	a912      	add	r1, sp, #72	; 0x48
   d4388:	4628      	mov	r0, r5
   d438a:	f000 ff0b 	bl	d51a4 <_ZplRK15StringSumHelperRK6String>
   d438e:	4940      	ldr	r1, [pc, #256]	; (d4490 <_Z13statusMessagev+0x1e0>)
   d4390:	f000 ff14 	bl	d51bc <_ZplRK15StringSumHelperPKc>
   d4394:	4b3f      	ldr	r3, [pc, #252]	; (d4494 <_Z13statusMessagev+0x1e4>)
   d4396:	220a      	movs	r2, #10
   d4398:	6819      	ldr	r1, [r3, #0]
   d439a:	4605      	mov	r5, r0
   d439c:	a816      	add	r0, sp, #88	; 0x58
   d439e:	f000 feb1 	bl	d5104 <_ZN6StringC1Eih>
   d43a2:	a916      	add	r1, sp, #88	; 0x58
   d43a4:	4628      	mov	r0, r5
   d43a6:	f000 fefd 	bl	d51a4 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d43aa:	4601      	mov	r1, r0
   d43ac:	a802      	add	r0, sp, #8
   d43ae:	f000 fee6 	bl	d517e <_ZN6String6concatERKS_>
   d43b2:	a816      	add	r0, sp, #88	; 0x58
   d43b4:	f000 fdfc 	bl	d4fb0 <_ZN6StringD1Ev>
   d43b8:	a812      	add	r0, sp, #72	; 0x48
   d43ba:	f000 fdf9 	bl	d4fb0 <_ZN6StringD1Ev>
   d43be:	a80e      	add	r0, sp, #56	; 0x38
   d43c0:	f000 fdf6 	bl	d4fb0 <_ZN6StringD1Ev>
   d43c4:	a806      	add	r0, sp, #24
   d43c6:	f000 fdf3 	bl	d4fb0 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d43ca:	a80a      	add	r0, sp, #40	; 0x28
   d43cc:	f000 fdf0 	bl	d4fb0 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d43d0:	4931      	ldr	r1, [pc, #196]	; (d4498 <_Z13statusMessagev+0x1e8>)
   d43d2:	a816      	add	r0, sp, #88	; 0x58
   d43d4:	f000 fe33 	bl	d503e <_ZN6StringC1EPK19__FlashStringHelper>
    message += ",to:" + (String)timeout + ",ver:" + Version ;
   d43d8:	4b30      	ldr	r3, [pc, #192]	; (d449c <_Z13statusMessagev+0x1ec>)
   d43da:	220a      	movs	r2, #10
   d43dc:	6819      	ldr	r1, [r3, #0]
   d43de:	a812      	add	r0, sp, #72	; 0x48
   d43e0:	f000 fe90 	bl	d5104 <_ZN6StringC1Eih>
   d43e4:	a912      	add	r1, sp, #72	; 0x48
   d43e6:	a816      	add	r0, sp, #88	; 0x58
   d43e8:	f000 fedc 	bl	d51a4 <_ZplRK15StringSumHelperRK6String>
   d43ec:	492c      	ldr	r1, [pc, #176]	; (d44a0 <_Z13statusMessagev+0x1f0>)
   d43ee:	f000 fee5 	bl	d51bc <_ZplRK15StringSumHelperPKc>
   d43f2:	492c      	ldr	r1, [pc, #176]	; (d44a4 <_Z13statusMessagev+0x1f4>)
   d43f4:	f000 fed6 	bl	d51a4 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d43f8:	4601      	mov	r1, r0
   d43fa:	a802      	add	r0, sp, #8
   d43fc:	f000 febf 	bl	d517e <_ZN6String6concatERKS_>
   d4400:	a812      	add	r0, sp, #72	; 0x48
   d4402:	f000 fdd5 	bl	d4fb0 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4406:	a816      	add	r0, sp, #88	; 0x58
   d4408:	f000 fdd2 	bl	d4fb0 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d440c:	4926      	ldr	r1, [pc, #152]	; (d44a8 <_Z13statusMessagev+0x1f8>)
   d440e:	a816      	add	r0, sp, #88	; 0x58
   d4410:	f000 fe15 	bl	d503e <_ZN6StringC1EPK19__FlashStringHelper>
    message +=  ", RSSI: " + (String)rssi;
   d4414:	220a      	movs	r2, #10
   d4416:	4621      	mov	r1, r4
   d4418:	a812      	add	r0, sp, #72	; 0x48
   d441a:	f000 fe73 	bl	d5104 <_ZN6StringC1Eih>
   d441e:	a912      	add	r1, sp, #72	; 0x48
   d4420:	a816      	add	r0, sp, #88	; 0x58
   d4422:	f000 febf 	bl	d51a4 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d4426:	4601      	mov	r1, r0
   d4428:	a802      	add	r0, sp, #8
   d442a:	f000 fea8 	bl	d517e <_ZN6String6concatERKS_>
   d442e:	a812      	add	r0, sp, #72	; 0x48
   d4430:	f000 fdbe 	bl	d4fb0 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4434:	a816      	add	r0, sp, #88	; 0x58
   d4436:	f000 fdbb 	bl	d4fb0 <_ZN6StringD1Ev>
   d443a:	4b1c      	ldr	r3, [pc, #112]	; (d44ac <_Z13statusMessagev+0x1fc>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d443c:	9a02      	ldr	r2, [sp, #8]
   d443e:	781b      	ldrb	r3, [r3, #0]
   d4440:	491b      	ldr	r1, [pc, #108]	; (d44b0 <_Z13statusMessagev+0x200>)
   d4442:	f88d 3000 	strb.w	r3, [sp]
   d4446:	a816      	add	r0, sp, #88	; 0x58
   d4448:	233c      	movs	r3, #60	; 0x3c
   d444a:	f001 fa31 	bl	d58b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d444e:	a817      	add	r0, sp, #92	; 0x5c
   d4450:	f7ff ff18 	bl	d4284 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Particle.publish("Status", message, PRIVATE);

    disconnectConnection();
   d4454:	f7ff fede 	bl	d4214 <_Z20disconnectConnectionv>
    delay(2000);
    CellularSignal sig = Cellular.RSSI();
    int rssi = sig.rssi;
    Serial.println("RSSI: " + (String)rssi);

    String message =  String(Time.now()) + ",Status,";
   d4458:	a802      	add	r0, sp, #8
   d445a:	f000 fda9 	bl	d4fb0 <_ZN6StringD1Ev>
    message +=  ", RSSI: " + (String)rssi;
    Particle.publish("Status", message, PRIVATE);

    disconnectConnection();
  }
  lastStatusMessage = Time.now() + 60;
   d445e:	f000 ffa9 	bl	d53b4 <_ZN9TimeClass3nowEv>
   d4462:	4b14      	ldr	r3, [pc, #80]	; (d44b4 <_Z13statusMessagev+0x204>)
   d4464:	303c      	adds	r0, #60	; 0x3c
   d4466:	6018      	str	r0, [r3, #0]
}
   d4468:	b025      	add	sp, #148	; 0x94
   d446a:	bd30      	pop	{r4, r5, pc}
   d446c:	2003e3e8 	.word	0x2003e3e8
   d4470:	000d695a 	.word	0x000d695a
   d4474:	000d6931 	.word	0x000d6931
   d4478:	000d693a 	.word	0x000d693a
   d447c:	2003e2b8 	.word	0x2003e2b8
   d4480:	000d693e 	.word	0x000d693e
   d4484:	2003e2c4 	.word	0x2003e2c4
   d4488:	000d6943 	.word	0x000d6943
   d448c:	2003e2c8 	.word	0x2003e2c8
   d4490:	000d6948 	.word	0x000d6948
   d4494:	2003e33c 	.word	0x2003e33c
   d4498:	000d694d 	.word	0x000d694d
   d449c:	2003e2a8 	.word	0x2003e2a8
   d44a0:	000d6952 	.word	0x000d6952
   d44a4:	2003e384 	.word	0x2003e384
   d44a8:	000d6958 	.word	0x000d6958
   d44ac:	2003e378 	.word	0x2003e378
   d44b0:	000d6961 	.word	0x000d6961
   d44b4:	2003e358 	.word	0x2003e358

000d44b8 <_Z12debugMessage6String>:
    disconnectConnection();
  }
}

void debugMessage(String message)
{
   d44b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (debug) {
   d44ba:	4b0c      	ldr	r3, [pc, #48]	; (d44ec <_Z12debugMessage6String+0x34>)
   d44bc:	781b      	ldrb	r3, [r3, #0]
    disconnectConnection();
  }
}

void debugMessage(String message)
{
   d44be:	4604      	mov	r4, r0
  if (debug) {
   d44c0:	b18b      	cbz	r3, d44e6 <_Z12debugMessage6String+0x2e>
    if (initConnection())
   d44c2:	f7ff fe05 	bl	d40d0 <_Z14initConnectionv>
   d44c6:	b170      	cbz	r0, d44e6 <_Z12debugMessage6String+0x2e>
   d44c8:	4b09      	ldr	r3, [pc, #36]	; (d44f0 <_Z12debugMessage6String+0x38>)
   d44ca:	6822      	ldr	r2, [r4, #0]
   d44cc:	781b      	ldrb	r3, [r3, #0]
   d44ce:	f88d 3000 	strb.w	r3, [sp]
   d44d2:	4908      	ldr	r1, [pc, #32]	; (d44f4 <_Z12debugMessage6String+0x3c>)
   d44d4:	233c      	movs	r3, #60	; 0x3c
   d44d6:	a802      	add	r0, sp, #8
   d44d8:	f001 f9ea 	bl	d58b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d44dc:	a803      	add	r0, sp, #12
   d44de:	f7ff fed1 	bl	d4284 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    {

      Particle.publish("Counter", message, PRIVATE);
      disconnectConnection();
   d44e2:	f7ff fe97 	bl	d4214 <_Z20disconnectConnectionv>
    }
  }
}
   d44e6:	b004      	add	sp, #16
   d44e8:	bd10      	pop	{r4, pc}
   d44ea:	bf00      	nop
   d44ec:	2003e354 	.word	0x2003e354
   d44f0:	2003e378 	.word	0x2003e378
   d44f4:	000d6970 	.word	0x000d6970

000d44f8 <loop>:

void loop()
{
   d44f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d44fc:	b094      	sub	sp, #80	; 0x50
  currentTime = Time.now();
   d44fe:	f000 ff59 	bl	d53b4 <_ZN9TimeClass3nowEv>
   d4502:	4d8f      	ldr	r5, [pc, #572]	; (d4740 <loop+0x248>)
  String wakeupFrom = "RTC";
   d4504:	498f      	ldr	r1, [pc, #572]	; (d4744 <loop+0x24c>)
  }
}

void loop()
{
  currentTime = Time.now();
   d4506:	6028      	str	r0, [r5, #0]
  String wakeupFrom = "RTC";
   d4508:	a804      	add	r0, sp, #16
   d450a:	f000 fd98 	bl	d503e <_ZN6StringC1EPK19__FlashStringHelper>
        //         // Woken up from standby mode
        //         sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
        //     }
        // });
        static bool f = false;
        if (!f) {
   d450e:	4b8e      	ldr	r3, [pc, #568]	; (d4748 <loop+0x250>)
   d4510:	781c      	ldrb	r4, [r3, #0]
   d4512:	b984      	cbnz	r4, d4536 <loop+0x3e>
            f = true;
   d4514:	2201      	movs	r2, #1
   d4516:	701a      	strb	r2, [r3, #0]
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d4518:	4621      	mov	r1, r4
   d451a:	4622      	mov	r2, r4
   d451c:	a810      	add	r0, sp, #64	; 0x40
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d451e:	9410      	str	r4, [sp, #64]	; 0x40
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d4520:	f000 fa1c 	bl	d495c <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d4524:	9b10      	ldr	r3, [sp, #64]	; 0x40
        //     }
        // });
        static bool f = false;
        if (!f) {
            f = true;
            if (resetReason() == RESET_REASON_POWER_MANAGEMENT) {
   d4526:	2b1e      	cmp	r3, #30
   d4528:	d105      	bne.n	d4536 <loop+0x3e>
                // Woken up from standby mode
                sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
   d452a:	4b88      	ldr	r3, [pc, #544]	; (d474c <loop+0x254>)
   d452c:	2203      	movs	r2, #3
   d452e:	701a      	strb	r2, [r3, #0]
   d4530:	2208      	movs	r2, #8
   d4532:	805c      	strh	r4, [r3, #2]
   d4534:	809a      	strh	r2, [r3, #4]
  SleepResult result = System.sleepResult();
  boolean sendingStatus = false;

  booting = false;
   d4536:	4b86      	ldr	r3, [pc, #536]	; (d4750 <loop+0x258>)

  /******* Check if status message is due  *****/
  if (lastStatusMessage + (60 * statusInterval) < Time.now() )
   d4538:	4a86      	ldr	r2, [pc, #536]	; (d4754 <loop+0x25c>)
  currentTime = Time.now();
  String wakeupFrom = "RTC";
  SleepResult result = System.sleepResult();
  boolean sendingStatus = false;

  booting = false;
   d453a:	2600      	movs	r6, #0
   d453c:	701e      	strb	r6, [r3, #0]

  /******* Check if status message is due  *****/
  if (lastStatusMessage + (60 * statusInterval) < Time.now() )
   d453e:	4b86      	ldr	r3, [pc, #536]	; (d4758 <loop+0x260>)
   d4540:	6812      	ldr	r2, [r2, #0]
   d4542:	681b      	ldr	r3, [r3, #0]
   d4544:	243c      	movs	r4, #60	; 0x3c
   d4546:	fb04 2403 	mla	r4, r4, r3, r2
   d454a:	f000 ff33 	bl	d53b4 <_ZN9TimeClass3nowEv>
   d454e:	4284      	cmp	r4, r0
   d4550:	da02      	bge.n	d4558 <loop+0x60>
  {
    statusMessage();
   d4552:	f7ff fead 	bl	d42b0 <_Z13statusMessagev>
    sendingStatus = true;
   d4556:	2601      	movs	r6, #1
  }

  /*********   Take sample *************/
  if (currentTime - prevTime >= (logInterval * 60)) 
   d4558:	4f80      	ldr	r7, [pc, #512]	; (d475c <loop+0x264>)
   d455a:	4c81      	ldr	r4, [pc, #516]	; (d4760 <loop+0x268>)
   d455c:	682b      	ldr	r3, [r5, #0]
   d455e:	683a      	ldr	r2, [r7, #0]
   d4560:	6821      	ldr	r1, [r4, #0]
   d4562:	1a9a      	subs	r2, r3, r2
   d4564:	233c      	movs	r3, #60	; 0x3c
   d4566:	434b      	muls	r3, r1
   d4568:	429a      	cmp	r2, r3
   d456a:	f2c0 808e 	blt.w	d468a <loop+0x192>
  {
    calculateUltraSonicData();
   d456e:	f7ff fe69 	bl	d4244 <_Z23calculateUltraSonicDatav>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d4572:	497c      	ldr	r1, [pc, #496]	; (d4764 <loop+0x26c>)
    payload += "," + (String)massaValue;
    samplesLogged++;
   d4574:	4d7c      	ldr	r5, [pc, #496]	; (d4768 <loop+0x270>)
   d4576:	a810      	add	r0, sp, #64	; 0x40
   d4578:	f000 fd61 	bl	d503e <_ZN6StringC1EPK19__FlashStringHelper>

  /*********   Take sample *************/
  if (currentTime - prevTime >= (logInterval * 60)) 
  {
    calculateUltraSonicData();
    payload += "," + (String)massaValue;
   d457c:	4b7b      	ldr	r3, [pc, #492]	; (d476c <loop+0x274>)
   d457e:	220a      	movs	r2, #10
   d4580:	6819      	ldr	r1, [r3, #0]
   d4582:	a80c      	add	r0, sp, #48	; 0x30
   d4584:	f000 fdbe 	bl	d5104 <_ZN6StringC1Eih>
   d4588:	a90c      	add	r1, sp, #48	; 0x30
   d458a:	a810      	add	r0, sp, #64	; 0x40
   d458c:	f000 fe0a 	bl	d51a4 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d4590:	4601      	mov	r1, r0
   d4592:	4877      	ldr	r0, [pc, #476]	; (d4770 <loop+0x278>)
   d4594:	f000 fdf3 	bl	d517e <_ZN6String6concatERKS_>
   d4598:	a80c      	add	r0, sp, #48	; 0x30
   d459a:	f000 fd09 	bl	d4fb0 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d459e:	a810      	add	r0, sp, #64	; 0x40
   d45a0:	f000 fd06 	bl	d4fb0 <_ZN6StringD1Ev>
    samplesLogged++;
    prevTime = currentTime;
   d45a4:	4a66      	ldr	r2, [pc, #408]	; (d4740 <loop+0x248>)
  /*********   Take sample *************/
  if (currentTime - prevTime >= (logInterval * 60)) 
  {
    calculateUltraSonicData();
    payload += "," + (String)massaValue;
    samplesLogged++;
   d45a6:	682b      	ldr	r3, [r5, #0]
    prevTime = currentTime;
   d45a8:	6812      	ldr	r2, [r2, #0]
   d45aa:	603a      	str	r2, [r7, #0]

    if (((samplesLogged >= (sendInterval * sendAttempts)) || (transmitMode == 1)) && !sendingStatus)
   d45ac:	4a71      	ldr	r2, [pc, #452]	; (d4774 <loop+0x27c>)
   d45ae:	4f72      	ldr	r7, [pc, #456]	; (d4778 <loop+0x280>)
   d45b0:	6811      	ldr	r1, [r2, #0]
   d45b2:	683a      	ldr	r2, [r7, #0]
  /*********   Take sample *************/
  if (currentTime - prevTime >= (logInterval * 60)) 
  {
    calculateUltraSonicData();
    payload += "," + (String)massaValue;
    samplesLogged++;
   d45b4:	3301      	adds	r3, #1
    prevTime = currentTime;

    if (((samplesLogged >= (sendInterval * sendAttempts)) || (transmitMode == 1)) && !sendingStatus)
   d45b6:	434a      	muls	r2, r1
   d45b8:	4293      	cmp	r3, r2
  /*********   Take sample *************/
  if (currentTime - prevTime >= (logInterval * 60)) 
  {
    calculateUltraSonicData();
    payload += "," + (String)massaValue;
    samplesLogged++;
   d45ba:	602b      	str	r3, [r5, #0]
    prevTime = currentTime;

    if (((samplesLogged >= (sendInterval * sendAttempts)) || (transmitMode == 1)) && !sendingStatus)
   d45bc:	da03      	bge.n	d45c6 <loop+0xce>
   d45be:	4b6f      	ldr	r3, [pc, #444]	; (d477c <loop+0x284>)
   d45c0:	681b      	ldr	r3, [r3, #0]
   d45c2:	2b01      	cmp	r3, #1
   d45c4:	d161      	bne.n	d468a <loop+0x192>
   d45c6:	2e00      	cmp	r6, #0
   d45c8:	d15f      	bne.n	d468a <loop+0x192>
    {
      if (initConnection())
   d45ca:	f7ff fd81 	bl	d40d0 <_Z14initConnectionv>
   d45ce:	2800      	cmp	r0, #0
   d45d0:	d058      	beq.n	d4684 <loop+0x18c>
      {
        totalPayload = String(Time.now()-(60*logInterval*(samplesLogged-1)));
   d45d2:	f000 feef 	bl	d53b4 <_ZN9TimeClass3nowEv>
   d45d6:	682a      	ldr	r2, [r5, #0]
   d45d8:	6821      	ldr	r1, [r4, #0]
   d45da:	f04f 083c 	mov.w	r8, #60	; 0x3c
   d45de:	1e57      	subs	r7, r2, #1
   d45e0:	fb08 f101 	mul.w	r1, r8, r1
   d45e4:	fb07 0111 	mls	r1, r7, r1, r0
   d45e8:	4f65      	ldr	r7, [pc, #404]	; (d4780 <loop+0x288>)
   d45ea:	220a      	movs	r2, #10
   d45ec:	a810      	add	r0, sp, #64	; 0x40
   d45ee:	f000 fd9c 	bl	d512a <_ZN6StringC1Elh>
   d45f2:	a910      	add	r1, sp, #64	; 0x40
   d45f4:	4638      	mov	r0, r7
   d45f6:	f000 fd6c 	bl	d50d2 <_ZN6StringaSEOS_>
   d45fa:	a810      	add	r0, sp, #64	; 0x40
   d45fc:	f000 fcd8 	bl	d4fb0 <_ZN6StringD1Ev>
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   d4600:	4960      	ldr	r1, [pc, #384]	; (d4784 <loop+0x28c>)
   d4602:	4638      	mov	r0, r7
   d4604:	f000 fdbf 	bl	d5186 <_ZN6String6concatEPKc>
        totalPayload += ",1043,";
        totalPayload += String(logInterval);
   d4608:	220a      	movs	r2, #10
   d460a:	6821      	ldr	r1, [r4, #0]
   d460c:	a810      	add	r0, sp, #64	; 0x40
   d460e:	f000 fd79 	bl	d5104 <_ZN6StringC1Eih>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d4612:	a910      	add	r1, sp, #64	; 0x40
   d4614:	4638      	mov	r0, r7
   d4616:	f000 fdb2 	bl	d517e <_ZN6String6concatERKS_>
   d461a:	a810      	add	r0, sp, #64	; 0x40
   d461c:	f000 fcc8 	bl	d4fb0 <_ZN6StringD1Ev>
   d4620:	4953      	ldr	r1, [pc, #332]	; (d4770 <loop+0x278>)
   d4622:	4638      	mov	r0, r7
   d4624:	f000 fdab 	bl	d517e <_ZN6String6concatERKS_>
   d4628:	4b57      	ldr	r3, [pc, #348]	; (d4788 <loop+0x290>)
   d462a:	4958      	ldr	r1, [pc, #352]	; (d478c <loop+0x294>)
   d462c:	781b      	ldrb	r3, [r3, #0]
   d462e:	f88d 3000 	strb.w	r3, [sp]
   d4632:	683a      	ldr	r2, [r7, #0]
   d4634:	4643      	mov	r3, r8
   d4636:	a810      	add	r0, sp, #64	; 0x40
   d4638:	f001 f93a 	bl	d58b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d463c:	a811      	add	r0, sp, #68	; 0x44
   d463e:	f7ff fe21 	bl	d4284 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        totalPayload += payload;
        Particle.publish("Counter", totalPayload, PRIVATE);
        Serial.println("totalPayload: " + (String)totalPayload);
   d4642:	f001 fb8b 	bl	d5d5c <_Z16_fetch_usbserialv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d4646:	4952      	ldr	r1, [pc, #328]	; (d4790 <loop+0x298>)
   d4648:	4680      	mov	r8, r0
   d464a:	a810      	add	r0, sp, #64	; 0x40
   d464c:	f000 fcf7 	bl	d503e <_ZN6StringC1EPK19__FlashStringHelper>
   d4650:	4639      	mov	r1, r7
   d4652:	a80c      	add	r0, sp, #48	; 0x30
   d4654:	f000 fd32 	bl	d50bc <_ZN6StringC1ERKS_>
   d4658:	a90c      	add	r1, sp, #48	; 0x30
   d465a:	a810      	add	r0, sp, #64	; 0x40
   d465c:	f000 fda2 	bl	d51a4 <_ZplRK15StringSumHelperRK6String>
   d4660:	6801      	ldr	r1, [r0, #0]
   d4662:	4640      	mov	r0, r8
   d4664:	f000 fe13 	bl	d528e <_ZN5Print7printlnEPKc>
   d4668:	a80c      	add	r0, sp, #48	; 0x30
   d466a:	f000 fca1 	bl	d4fb0 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d466e:	a810      	add	r0, sp, #64	; 0x40
   d4670:	f000 fc9e 	bl	d4fb0 <_ZN6StringD1Ev>
        payload = "";
   d4674:	4947      	ldr	r1, [pc, #284]	; (d4794 <loop+0x29c>)
   d4676:	483e      	ldr	r0, [pc, #248]	; (d4770 <loop+0x278>)
   d4678:	f000 fd33 	bl	d50e2 <_ZN6StringaSEPKc>
        samplesLogged = 0;
   d467c:	602e      	str	r6, [r5, #0]
        disconnectConnection();
   d467e:	f7ff fdc9 	bl	d4214 <_Z20disconnectConnectionv>
   d4682:	e002      	b.n	d468a <loop+0x192>
      }
      else
      {
        sendAttempts++;
   d4684:	683b      	ldr	r3, [r7, #0]
   d4686:	3301      	adds	r3, #1
   d4688:	603b      	str	r3, [r7, #0]
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d468a:	4943      	ldr	r1, [pc, #268]	; (d4798 <loop+0x2a0>)
   d468c:	4f43      	ldr	r7, [pc, #268]	; (d479c <loop+0x2a4>)
   d468e:	4e44      	ldr	r6, [pc, #272]	; (d47a0 <loop+0x2a8>)
   d4690:	a804      	add	r0, sp, #16
   d4692:	f000 fda5 	bl	d51e0 <_ZNK6String6equalsEPKc>
    }    
  }

  /********  Good night!  ************/
      
     if (wakeupFrom == "PIN")
   d4696:	2800      	cmp	r0, #0
   d4698:	d02f      	beq.n	d46fa <loop+0x202>
     {       // Back to sleep for remainder of normal log interval
      int sleepRemainder = (logInterval * 60) - (Time.now() - sleepTime);
   d469a:	6824      	ldr	r4, [r4, #0]
   d469c:	233c      	movs	r3, #60	; 0x3c
   d469e:	fb03 f504 	mul.w	r5, r3, r4
   d46a2:	f000 fe87 	bl	d53b4 <_ZN9TimeClass3nowEv>
   d46a6:	683c      	ldr	r4, [r7, #0]

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d46a8:	493e      	ldr	r1, [pc, #248]	; (d47a4 <loop+0x2ac>)
   d46aa:	1b00      	subs	r0, r0, r4
   d46ac:	1a2c      	subs	r4, r5, r0
   d46ae:	a80c      	add	r0, sp, #48	; 0x30
   d46b0:	f000 fcc5 	bl	d503e <_ZN6StringC1EPK19__FlashStringHelper>
      debugMessage("Sleep from Pin Wake: " + (String)sleepRemainder);
   d46b4:	220a      	movs	r2, #10
   d46b6:	4621      	mov	r1, r4
   d46b8:	a808      	add	r0, sp, #32
   d46ba:	f000 fd23 	bl	d5104 <_ZN6StringC1Eih>
   d46be:	a908      	add	r1, sp, #32
   d46c0:	a80c      	add	r0, sp, #48	; 0x30
   d46c2:	f000 fd6f 	bl	d51a4 <_ZplRK15StringSumHelperRK6String>
   d46c6:	4601      	mov	r1, r0
   d46c8:	a810      	add	r0, sp, #64	; 0x40
   d46ca:	f000 fcf7 	bl	d50bc <_ZN6StringC1ERKS_>
   d46ce:	a810      	add	r0, sp, #64	; 0x40
   d46d0:	f7ff fef2 	bl	d44b8 <_Z12debugMessage6String>
   d46d4:	a810      	add	r0, sp, #64	; 0x40
   d46d6:	f000 fc6b 	bl	d4fb0 <_ZN6StringD1Ev>
   d46da:	a808      	add	r0, sp, #32
   d46dc:	f000 fc68 	bl	d4fb0 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d46e0:	a80c      	add	r0, sp, #48	; 0x30
   d46e2:	f000 fc65 	bl	d4fb0 <_ZN6StringD1Ev>
   d46e6:	2202      	movs	r2, #2
   d46e8:	6833      	ldr	r3, [r6, #0]
   d46ea:	f88d 2020 	strb.w	r2, [sp, #32]
    /*
     * wakeup pins: pin_t* + size_t
     * trigger mode: single InterruptMode
     */
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, InterruptMode edgeTriggerMode, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) {
        return sleepPinImpl(pins, pinsSize, &edgeTriggerMode, 1, seconds, flag);
   d46ee:	2201      	movs	r2, #1
   d46f0:	9302      	str	r3, [sp, #8]
   d46f2:	9401      	str	r4, [sp, #4]
   d46f4:	9200      	str	r2, [sp, #0]
   d46f6:	ab08      	add	r3, sp, #32
   d46f8:	e018      	b.n	d472c <loop+0x234>
      System.sleep(wakeUpPins,1,FALLING, sleepRemainder);
     }
     
    else
    {
      sleepTime = Time.now();
   d46fa:	f000 fe5b 	bl	d53b4 <_ZN9TimeClass3nowEv>
      debugMessage("Normal sleep");
   d46fe:	492a      	ldr	r1, [pc, #168]	; (d47a8 <loop+0x2b0>)
      System.sleep(wakeUpPins,1,FALLING, sleepRemainder);
     }
     
    else
    {
      sleepTime = Time.now();
   d4700:	6038      	str	r0, [r7, #0]
      debugMessage("Normal sleep");
   d4702:	a810      	add	r0, sp, #64	; 0x40
   d4704:	f000 fc9b 	bl	d503e <_ZN6StringC1EPK19__FlashStringHelper>
   d4708:	a810      	add	r0, sp, #64	; 0x40
   d470a:	f7ff fed5 	bl	d44b8 <_Z12debugMessage6String>
   d470e:	a810      	add	r0, sp, #64	; 0x40
   d4710:	f000 fc4e 	bl	d4fb0 <_ZN6StringD1Ev>
      System.sleep(wakeUpPins,1,FALLING,logInterval * 60);
   d4714:	6822      	ldr	r2, [r4, #0]
   d4716:	233c      	movs	r3, #60	; 0x3c
   d4718:	4353      	muls	r3, r2
   d471a:	6832      	ldr	r2, [r6, #0]
   d471c:	9202      	str	r2, [sp, #8]
   d471e:	2102      	movs	r1, #2
   d4720:	2201      	movs	r2, #1
   d4722:	9301      	str	r3, [sp, #4]
   d4724:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   d4728:	9200      	str	r2, [sp, #0]
   d472a:	ab0c      	add	r3, sp, #48	; 0x30
   d472c:	491f      	ldr	r1, [pc, #124]	; (d47ac <loop+0x2b4>)
   d472e:	a810      	add	r0, sp, #64	; 0x40
   d4730:	f000 fb7e 	bl	d4e30 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
}

void loop()
{
  currentTime = Time.now();
  String wakeupFrom = "RTC";
   d4734:	a804      	add	r0, sp, #16
   d4736:	f000 fc3b 	bl	d4fb0 <_ZN6StringD1Ev>
      sleepTime = Time.now();
      debugMessage("Normal sleep");
      System.sleep(wakeUpPins,1,FALLING,logInterval * 60);
    }
    
}
   d473a:	b014      	add	sp, #80	; 0x50
   d473c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4740:	2003e39c 	.word	0x2003e39c
   d4744:	000d6978 	.word	0x000d6978
   d4748:	2003e338 	.word	0x2003e338
   d474c:	2003e3a8 	.word	0x2003e3a8
   d4750:	2003e2b4 	.word	0x2003e2b4
   d4754:	2003e358 	.word	0x2003e358
   d4758:	2003e2c8 	.word	0x2003e2c8
   d475c:	2003e37c 	.word	0x2003e37c
   d4760:	2003e2b8 	.word	0x2003e2b8
   d4764:	000d6981 	.word	0x000d6981
   d4768:	2003e374 	.word	0x2003e374
   d476c:	2003e350 	.word	0x2003e350
   d4770:	2003e340 	.word	0x2003e340
   d4774:	2003e2c4 	.word	0x2003e2c4
   d4778:	2003e2c0 	.word	0x2003e2c0
   d477c:	2003e33c 	.word	0x2003e33c
   d4780:	2003e364 	.word	0x2003e364
   d4784:	000d697c 	.word	0x000d697c
   d4788:	2003e378 	.word	0x2003e378
   d478c:	000d6970 	.word	0x000d6970
   d4790:	000d6983 	.word	0x000d6983
   d4794:	000d6aab 	.word	0x000d6aab
   d4798:	000d6992 	.word	0x000d6992
   d479c:	2003e394 	.word	0x2003e394
   d47a0:	2003e380 	.word	0x2003e380
   d47a4:	000d6996 	.word	0x000d6996
   d47a8:	000d69ac 	.word	0x000d69ac
   d47ac:	2003e2b6 	.word	0x2003e2b6

000d47b0 <_GLOBAL__sub_I_Version>:
}

int calculateFloatData(){
  floatValue = digitalRead(pinFloatSensor);
  return floatValue;
   d47b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d47b4:	4b23      	ldr	r3, [pc, #140]	; (d4844 <_GLOBAL__sub_I_Version+0x94>)
1.1.1- Change pin type from INPUT_PULLDOWN to INPUT to try and block invalid trips
1.1.2- Added timesync with each status message


*/
String Version = "1.1.2";
   d47b6:	f8df 80a4 	ldr.w	r8, [pc, #164]	; d485c <_GLOBAL__sub_I_Version+0xac>
   d47ba:	4e23      	ldr	r6, [pc, #140]	; (d4848 <_GLOBAL__sub_I_Version+0x98>)
   d47bc:	4d23      	ldr	r5, [pc, #140]	; (d484c <_GLOBAL__sub_I_Version+0x9c>)
long int prevTime;
long int currentTime;
long int sleepTime;
      
int samplesLogged = 0;
String payload;
   d47be:	f8df 90a0 	ldr.w	r9, [pc, #160]	; d4860 <_GLOBAL__sub_I_Version+0xb0>
   d47c2:	2400      	movs	r4, #0
   d47c4:	601c      	str	r4, [r3, #0]
   d47c6:	4b22      	ldr	r3, [pc, #136]	; (d4850 <_GLOBAL__sub_I_Version+0xa0>)
   d47c8:	2701      	movs	r7, #1
   d47ca:	701f      	strb	r7, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d47cc:	f000 f85e 	bl	d488c <HAL_Pin_Map>
1.1.1- Change pin type from INPUT_PULLDOWN to INPUT to try and block invalid trips
1.1.2- Added timesync with each status message


*/
String Version = "1.1.2";
   d47d0:	4920      	ldr	r1, [pc, #128]	; (d4854 <_GLOBAL__sub_I_Version+0xa4>)
   d47d2:	4640      	mov	r0, r8
   d47d4:	f000 fc33 	bl	d503e <_ZN6StringC1EPK19__FlashStringHelper>
   d47d8:	4640      	mov	r0, r8
long int prevTime;
long int currentTime;
long int sleepTime;
      
int samplesLogged = 0;
String payload;
   d47da:	f8df 8088 	ldr.w	r8, [pc, #136]	; d4864 <_GLOBAL__sub_I_Version+0xb4>
1.1.1- Change pin type from INPUT_PULLDOWN to INPUT to try and block invalid trips
1.1.2- Added timesync with each status message


*/
String Version = "1.1.2";
   d47de:	4632      	mov	r2, r6
   d47e0:	4629      	mov	r1, r5
   d47e2:	f001 fe51 	bl	d6488 <__aeabi_atexit>
long int prevTime;
long int currentTime;
long int sleepTime;
      
int samplesLogged = 0;
String payload;
   d47e6:	4649      	mov	r1, r9
   d47e8:	4640      	mov	r0, r8
   d47ea:	f000 fc28 	bl	d503e <_ZN6StringC1EPK19__FlashStringHelper>
   d47ee:	4640      	mov	r0, r8
String totalPayload;
   d47f0:	f8df 8074 	ldr.w	r8, [pc, #116]	; d4868 <_GLOBAL__sub_I_Version+0xb8>
long int prevTime;
long int currentTime;
long int sleepTime;
      
int samplesLogged = 0;
String payload;
   d47f4:	4632      	mov	r2, r6
   d47f6:	4629      	mov	r1, r5
   d47f8:	f001 fe46 	bl	d6488 <__aeabi_atexit>
String totalPayload;
   d47fc:	4649      	mov	r1, r9
   d47fe:	4640      	mov	r0, r8
   d4800:	f000 fc1d 	bl	d503e <_ZN6StringC1EPK19__FlashStringHelper>
   d4804:	4632      	mov	r2, r6
   d4806:	4629      	mov	r1, r5
   d4808:	4640      	mov	r0, r8
   d480a:	f001 fe3d 	bl	d6488 <__aeabi_atexit>
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d480e:	f001 fd7b 	bl	d6308 <spark_protocol_instance>
   d4812:	4623      	mov	r3, r4
   d4814:	4622      	mov	r2, r4
   d4816:	f642 117a 	movw	r1, #10618	; 0x297a
   d481a:	f001 fd7d 	bl	d6318 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d481e:	f001 fd73 	bl	d6308 <spark_protocol_instance>
   d4822:	4623      	mov	r3, r4
   d4824:	4622      	mov	r2, r4
   d4826:	4639      	mov	r1, r7
   d4828:	f001 fd7e 	bl	d6328 <spark_protocol_set_product_firmware_version>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d482c:	4b0a      	ldr	r3, [pc, #40]	; (d4858 <_GLOBAL__sub_I_Version+0xa8>)
   d482e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4832:	701c      	strb	r4, [r3, #0]
   d4834:	805c      	strh	r4, [r3, #2]
   d4836:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4838:	2003      	movs	r0, #3
}

int calculateFloatData(){
  floatValue = digitalRead(pinFloatSensor);
  return floatValue;
   d483a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d483e:	f000 b985 	b.w	d4b4c <set_system_mode>
   d4842:	bf00      	nop
   d4844:	2003e380 	.word	0x2003e380
   d4848:	2003e334 	.word	0x2003e334
   d484c:	000d4fb1 	.word	0x000d4fb1
   d4850:	2003e378 	.word	0x2003e378
   d4854:	000d69b9 	.word	0x000d69b9
   d4858:	2003e35c 	.word	0x2003e35c
   d485c:	2003e384 	.word	0x2003e384
   d4860:	000d6aab 	.word	0x000d6aab
   d4864:	2003e340 	.word	0x2003e340
   d4868:	2003e364 	.word	0x2003e364

000d486c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d486c:	b508      	push	{r3, lr}
   d486e:	4b02      	ldr	r3, [pc, #8]	; (d4878 <netdb_freeaddrinfo+0xc>)
   d4870:	681b      	ldr	r3, [r3, #0]
   d4872:	689b      	ldr	r3, [r3, #8]
   d4874:	9301      	str	r3, [sp, #4]
   d4876:	bd08      	pop	{r3, pc}
   d4878:	00030268 	.word	0x00030268

000d487c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d487c:	b508      	push	{r3, lr}
   d487e:	4b02      	ldr	r3, [pc, #8]	; (d4888 <netdb_getaddrinfo+0xc>)
   d4880:	681b      	ldr	r3, [r3, #0]
   d4882:	68db      	ldr	r3, [r3, #12]
   d4884:	9301      	str	r3, [sp, #4]
   d4886:	bd08      	pop	{r3, pc}
   d4888:	00030268 	.word	0x00030268

000d488c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d488c:	b508      	push	{r3, lr}
   d488e:	4b02      	ldr	r3, [pc, #8]	; (d4898 <HAL_Pin_Map+0xc>)
   d4890:	681b      	ldr	r3, [r3, #0]
   d4892:	681b      	ldr	r3, [r3, #0]
   d4894:	9301      	str	r3, [sp, #4]
   d4896:	bd08      	pop	{r3, pc}
   d4898:	0003022c 	.word	0x0003022c

000d489c <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d489c:	b508      	push	{r3, lr}
   d489e:	4b02      	ldr	r3, [pc, #8]	; (d48a8 <HAL_Validate_Pin_Function+0xc>)
   d48a0:	681b      	ldr	r3, [r3, #0]
   d48a2:	685b      	ldr	r3, [r3, #4]
   d48a4:	9301      	str	r3, [sp, #4]
   d48a6:	bd08      	pop	{r3, pc}
   d48a8:	0003022c 	.word	0x0003022c

000d48ac <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d48ac:	b508      	push	{r3, lr}
   d48ae:	4b02      	ldr	r3, [pc, #8]	; (d48b8 <HAL_Pin_Mode+0xc>)
   d48b0:	681b      	ldr	r3, [r3, #0]
   d48b2:	689b      	ldr	r3, [r3, #8]
   d48b4:	9301      	str	r3, [sp, #4]
   d48b6:	bd08      	pop	{r3, pc}
   d48b8:	0003022c 	.word	0x0003022c

000d48bc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d48bc:	b508      	push	{r3, lr}
   d48be:	4b02      	ldr	r3, [pc, #8]	; (d48c8 <HAL_Get_Pin_Mode+0xc>)
   d48c0:	681b      	ldr	r3, [r3, #0]
   d48c2:	68db      	ldr	r3, [r3, #12]
   d48c4:	9301      	str	r3, [sp, #4]
   d48c6:	bd08      	pop	{r3, pc}
   d48c8:	0003022c 	.word	0x0003022c

000d48cc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d48cc:	b508      	push	{r3, lr}
   d48ce:	4b02      	ldr	r3, [pc, #8]	; (d48d8 <HAL_GPIO_Write+0xc>)
   d48d0:	681b      	ldr	r3, [r3, #0]
   d48d2:	691b      	ldr	r3, [r3, #16]
   d48d4:	9301      	str	r3, [sp, #4]
   d48d6:	bd08      	pop	{r3, pc}
   d48d8:	0003022c 	.word	0x0003022c

000d48dc <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d48dc:	b508      	push	{r3, lr}
   d48de:	4b02      	ldr	r3, [pc, #8]	; (d48e8 <HAL_ADC_Read+0xc>)
   d48e0:	681b      	ldr	r3, [r3, #0]
   d48e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d48e4:	9301      	str	r3, [sp, #4]
   d48e6:	bd08      	pop	{r3, pc}
   d48e8:	0003022c 	.word	0x0003022c

000d48ec <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d48ec:	b508      	push	{r3, lr}
   d48ee:	4b02      	ldr	r3, [pc, #8]	; (d48f8 <HAL_SPI_Init+0xc>)
   d48f0:	681b      	ldr	r3, [r3, #0]
   d48f2:	69db      	ldr	r3, [r3, #28]
   d48f4:	9301      	str	r3, [sp, #4]
   d48f6:	bd08      	pop	{r3, pc}
   d48f8:	00030230 	.word	0x00030230

000d48fc <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d48fc:	b508      	push	{r3, lr}
   d48fe:	4b02      	ldr	r3, [pc, #8]	; (d4908 <HAL_SPI_Is_Enabled+0xc>)
   d4900:	681b      	ldr	r3, [r3, #0]
   d4902:	6a1b      	ldr	r3, [r3, #32]
   d4904:	9301      	str	r3, [sp, #4]
   d4906:	bd08      	pop	{r3, pc}
   d4908:	00030230 	.word	0x00030230

000d490c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d490c:	b508      	push	{r3, lr}
   d490e:	4b02      	ldr	r3, [pc, #8]	; (d4918 <HAL_RNG_GetRandomNumber+0xc>)
   d4910:	681b      	ldr	r3, [r3, #0]
   d4912:	685b      	ldr	r3, [r3, #4]
   d4914:	9301      	str	r3, [sp, #4]
   d4916:	bd08      	pop	{r3, pc}
   d4918:	00030218 	.word	0x00030218

000d491c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d491c:	b508      	push	{r3, lr}
   d491e:	4b02      	ldr	r3, [pc, #8]	; (d4928 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4920:	681b      	ldr	r3, [r3, #0]
   d4922:	695b      	ldr	r3, [r3, #20]
   d4924:	9301      	str	r3, [sp, #4]
   d4926:	bd08      	pop	{r3, pc}
   d4928:	00030218 	.word	0x00030218

000d492c <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d492c:	b508      	push	{r3, lr}
   d492e:	4b02      	ldr	r3, [pc, #8]	; (d4938 <HAL_RTC_Get_UnixTime+0xc>)
   d4930:	681b      	ldr	r3, [r3, #0]
   d4932:	69db      	ldr	r3, [r3, #28]
   d4934:	9301      	str	r3, [sp, #4]
   d4936:	bd08      	pop	{r3, pc}
   d4938:	00030218 	.word	0x00030218

000d493c <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d493c:	b508      	push	{r3, lr}
   d493e:	4b02      	ldr	r3, [pc, #8]	; (d4948 <HAL_RTC_Time_Is_Valid+0xc>)
   d4940:	681b      	ldr	r3, [r3, #0]
   d4942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4944:	9301      	str	r3, [sp, #4]
   d4946:	bd08      	pop	{r3, pc}
   d4948:	00030218 	.word	0x00030218

000d494c <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d494c:	b508      	push	{r3, lr}
   d494e:	4b02      	ldr	r3, [pc, #8]	; (d4958 <hal_timer_millis+0xc>)
   d4950:	681b      	ldr	r3, [r3, #0]
   d4952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d4954:	9301      	str	r3, [sp, #4]
   d4956:	bd08      	pop	{r3, pc}
   d4958:	00030218 	.word	0x00030218

000d495c <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   d495c:	b508      	push	{r3, lr}
   d495e:	4b02      	ldr	r3, [pc, #8]	; (d4968 <HAL_Core_Get_Last_Reset_Info+0xc>)
   d4960:	681b      	ldr	r3, [r3, #0]
   d4962:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d4964:	9301      	str	r3, [sp, #4]
   d4966:	bd08      	pop	{r3, pc}
   d4968:	00030234 	.word	0x00030234

000d496c <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d496c:	b508      	push	{r3, lr}
   d496e:	4b02      	ldr	r3, [pc, #8]	; (d4978 <os_thread_is_current+0xc>)
   d4970:	681b      	ldr	r3, [r3, #0]
   d4972:	689b      	ldr	r3, [r3, #8]
   d4974:	9301      	str	r3, [sp, #4]
   d4976:	bd08      	pop	{r3, pc}
   d4978:	00030248 	.word	0x00030248

000d497c <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d497c:	b508      	push	{r3, lr}
   d497e:	4b02      	ldr	r3, [pc, #8]	; (d4988 <os_thread_join+0xc>)
   d4980:	681b      	ldr	r3, [r3, #0]
   d4982:	691b      	ldr	r3, [r3, #16]
   d4984:	9301      	str	r3, [sp, #4]
   d4986:	bd08      	pop	{r3, pc}
   d4988:	00030248 	.word	0x00030248

000d498c <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d498c:	b508      	push	{r3, lr}
   d498e:	4b02      	ldr	r3, [pc, #8]	; (d4998 <os_thread_cleanup+0xc>)
   d4990:	681b      	ldr	r3, [r3, #0]
   d4992:	695b      	ldr	r3, [r3, #20]
   d4994:	9301      	str	r3, [sp, #4]
   d4996:	bd08      	pop	{r3, pc}
   d4998:	00030248 	.word	0x00030248

000d499c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d499c:	b508      	push	{r3, lr}
   d499e:	4b02      	ldr	r3, [pc, #8]	; (d49a8 <os_mutex_create+0xc>)
   d49a0:	681b      	ldr	r3, [r3, #0]
   d49a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d49a4:	9301      	str	r3, [sp, #4]
   d49a6:	bd08      	pop	{r3, pc}
   d49a8:	00030248 	.word	0x00030248

000d49ac <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d49ac:	b508      	push	{r3, lr}
   d49ae:	4b02      	ldr	r3, [pc, #8]	; (d49b8 <os_mutex_recursive_create+0xc>)
   d49b0:	681b      	ldr	r3, [r3, #0]
   d49b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d49b4:	9301      	str	r3, [sp, #4]
   d49b6:	bd08      	pop	{r3, pc}
   d49b8:	00030248 	.word	0x00030248

000d49bc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d49bc:	b508      	push	{r3, lr}
   d49be:	4b02      	ldr	r3, [pc, #8]	; (d49c8 <inet_inet_ntop+0xc>)
   d49c0:	681b      	ldr	r3, [r3, #0]
   d49c2:	695b      	ldr	r3, [r3, #20]
   d49c4:	9301      	str	r3, [sp, #4]
   d49c6:	bd08      	pop	{r3, pc}
   d49c8:	00030264 	.word	0x00030264

000d49cc <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d49cc:	b508      	push	{r3, lr}
   d49ce:	4b02      	ldr	r3, [pc, #8]	; (d49d8 <HAL_USART_Init+0xc>)
   d49d0:	681b      	ldr	r3, [r3, #0]
   d49d2:	681b      	ldr	r3, [r3, #0]
   d49d4:	9301      	str	r3, [sp, #4]
   d49d6:	bd08      	pop	{r3, pc}
   d49d8:	0003023c 	.word	0x0003023c

000d49dc <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d49dc:	b508      	push	{r3, lr}
   d49de:	4b02      	ldr	r3, [pc, #8]	; (d49e8 <HAL_USART_Write_Data+0xc>)
   d49e0:	681b      	ldr	r3, [r3, #0]
   d49e2:	68db      	ldr	r3, [r3, #12]
   d49e4:	9301      	str	r3, [sp, #4]
   d49e6:	bd08      	pop	{r3, pc}
   d49e8:	0003023c 	.word	0x0003023c

000d49ec <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d49ec:	b508      	push	{r3, lr}
   d49ee:	4b02      	ldr	r3, [pc, #8]	; (d49f8 <HAL_USART_Available_Data+0xc>)
   d49f0:	681b      	ldr	r3, [r3, #0]
   d49f2:	691b      	ldr	r3, [r3, #16]
   d49f4:	9301      	str	r3, [sp, #4]
   d49f6:	bd08      	pop	{r3, pc}
   d49f8:	0003023c 	.word	0x0003023c

000d49fc <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d49fc:	b508      	push	{r3, lr}
   d49fe:	4b02      	ldr	r3, [pc, #8]	; (d4a08 <HAL_USART_Read_Data+0xc>)
   d4a00:	681b      	ldr	r3, [r3, #0]
   d4a02:	695b      	ldr	r3, [r3, #20]
   d4a04:	9301      	str	r3, [sp, #4]
   d4a06:	bd08      	pop	{r3, pc}
   d4a08:	0003023c 	.word	0x0003023c

000d4a0c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4a0c:	b508      	push	{r3, lr}
   d4a0e:	4b02      	ldr	r3, [pc, #8]	; (d4a18 <HAL_USART_Peek_Data+0xc>)
   d4a10:	681b      	ldr	r3, [r3, #0]
   d4a12:	699b      	ldr	r3, [r3, #24]
   d4a14:	9301      	str	r3, [sp, #4]
   d4a16:	bd08      	pop	{r3, pc}
   d4a18:	0003023c 	.word	0x0003023c

000d4a1c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4a1c:	b508      	push	{r3, lr}
   d4a1e:	4b02      	ldr	r3, [pc, #8]	; (d4a28 <HAL_USART_Flush_Data+0xc>)
   d4a20:	681b      	ldr	r3, [r3, #0]
   d4a22:	69db      	ldr	r3, [r3, #28]
   d4a24:	9301      	str	r3, [sp, #4]
   d4a26:	bd08      	pop	{r3, pc}
   d4a28:	0003023c 	.word	0x0003023c

000d4a2c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4a2c:	b508      	push	{r3, lr}
   d4a2e:	4b02      	ldr	r3, [pc, #8]	; (d4a38 <HAL_USART_Is_Enabled+0xc>)
   d4a30:	681b      	ldr	r3, [r3, #0]
   d4a32:	6a1b      	ldr	r3, [r3, #32]
   d4a34:	9301      	str	r3, [sp, #4]
   d4a36:	bd08      	pop	{r3, pc}
   d4a38:	0003023c 	.word	0x0003023c

000d4a3c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4a3c:	b508      	push	{r3, lr}
   d4a3e:	4b02      	ldr	r3, [pc, #8]	; (d4a48 <HAL_USART_Available_Data_For_Write+0xc>)
   d4a40:	681b      	ldr	r3, [r3, #0]
   d4a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4a44:	9301      	str	r3, [sp, #4]
   d4a46:	bd08      	pop	{r3, pc}
   d4a48:	0003023c 	.word	0x0003023c

000d4a4c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4a4c:	b508      	push	{r3, lr}
   d4a4e:	4b02      	ldr	r3, [pc, #8]	; (d4a58 <HAL_I2C_Write_Data+0xc>)
   d4a50:	681b      	ldr	r3, [r3, #0]
   d4a52:	6a1b      	ldr	r3, [r3, #32]
   d4a54:	9301      	str	r3, [sp, #4]
   d4a56:	bd08      	pop	{r3, pc}
   d4a58:	00030228 	.word	0x00030228

000d4a5c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4a5c:	b508      	push	{r3, lr}
   d4a5e:	4b02      	ldr	r3, [pc, #8]	; (d4a68 <HAL_I2C_Available_Data+0xc>)
   d4a60:	681b      	ldr	r3, [r3, #0]
   d4a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4a64:	9301      	str	r3, [sp, #4]
   d4a66:	bd08      	pop	{r3, pc}
   d4a68:	00030228 	.word	0x00030228

000d4a6c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4a6c:	b508      	push	{r3, lr}
   d4a6e:	4b02      	ldr	r3, [pc, #8]	; (d4a78 <HAL_I2C_Read_Data+0xc>)
   d4a70:	681b      	ldr	r3, [r3, #0]
   d4a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4a74:	9301      	str	r3, [sp, #4]
   d4a76:	bd08      	pop	{r3, pc}
   d4a78:	00030228 	.word	0x00030228

000d4a7c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4a7c:	b508      	push	{r3, lr}
   d4a7e:	4b02      	ldr	r3, [pc, #8]	; (d4a88 <HAL_I2C_Peek_Data+0xc>)
   d4a80:	681b      	ldr	r3, [r3, #0]
   d4a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4a84:	9301      	str	r3, [sp, #4]
   d4a86:	bd08      	pop	{r3, pc}
   d4a88:	00030228 	.word	0x00030228

000d4a8c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4a8c:	b508      	push	{r3, lr}
   d4a8e:	4b02      	ldr	r3, [pc, #8]	; (d4a98 <HAL_I2C_Flush_Data+0xc>)
   d4a90:	681b      	ldr	r3, [r3, #0]
   d4a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4a94:	9301      	str	r3, [sp, #4]
   d4a96:	bd08      	pop	{r3, pc}
   d4a98:	00030228 	.word	0x00030228

000d4a9c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4a9c:	b508      	push	{r3, lr}
   d4a9e:	4b02      	ldr	r3, [pc, #8]	; (d4aa8 <HAL_I2C_Is_Enabled+0xc>)
   d4aa0:	681b      	ldr	r3, [r3, #0]
   d4aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4aa4:	9301      	str	r3, [sp, #4]
   d4aa6:	bd08      	pop	{r3, pc}
   d4aa8:	00030228 	.word	0x00030228

000d4aac <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d4aac:	b508      	push	{r3, lr}
   d4aae:	4b02      	ldr	r3, [pc, #8]	; (d4ab8 <HAL_I2C_Init+0xc>)
   d4ab0:	681b      	ldr	r3, [r3, #0]
   d4ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4ab4:	9301      	str	r3, [sp, #4]
   d4ab6:	bd08      	pop	{r3, pc}
   d4ab8:	00030228 	.word	0x00030228

000d4abc <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d4abc:	b508      	push	{r3, lr}
   d4abe:	4b02      	ldr	r3, [pc, #8]	; (d4ac8 <cellular_signal+0xc>)
   d4ac0:	681b      	ldr	r3, [r3, #0]
   d4ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4ac4:	9301      	str	r3, [sp, #4]
   d4ac6:	bd08      	pop	{r3, pc}
   d4ac8:	00030274 	.word	0x00030274

000d4acc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4acc:	b508      	push	{r3, lr}
   d4ace:	4b02      	ldr	r3, [pc, #8]	; (d4ad8 <HAL_USB_USART_Init+0xc>)
   d4ad0:	681b      	ldr	r3, [r3, #0]
   d4ad2:	681b      	ldr	r3, [r3, #0]
   d4ad4:	9301      	str	r3, [sp, #4]
   d4ad6:	bd08      	pop	{r3, pc}
   d4ad8:	0003024c 	.word	0x0003024c

000d4adc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4adc:	b508      	push	{r3, lr}
   d4ade:	4b02      	ldr	r3, [pc, #8]	; (d4ae8 <HAL_USB_USART_Begin+0xc>)
   d4ae0:	681b      	ldr	r3, [r3, #0]
   d4ae2:	685b      	ldr	r3, [r3, #4]
   d4ae4:	9301      	str	r3, [sp, #4]
   d4ae6:	bd08      	pop	{r3, pc}
   d4ae8:	0003024c 	.word	0x0003024c

000d4aec <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4aec:	b508      	push	{r3, lr}
   d4aee:	4b02      	ldr	r3, [pc, #8]	; (d4af8 <HAL_USB_USART_Available_Data+0xc>)
   d4af0:	681b      	ldr	r3, [r3, #0]
   d4af2:	691b      	ldr	r3, [r3, #16]
   d4af4:	9301      	str	r3, [sp, #4]
   d4af6:	bd08      	pop	{r3, pc}
   d4af8:	0003024c 	.word	0x0003024c

000d4afc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4afc:	b508      	push	{r3, lr}
   d4afe:	4b02      	ldr	r3, [pc, #8]	; (d4b08 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4b00:	681b      	ldr	r3, [r3, #0]
   d4b02:	695b      	ldr	r3, [r3, #20]
   d4b04:	9301      	str	r3, [sp, #4]
   d4b06:	bd08      	pop	{r3, pc}
   d4b08:	0003024c 	.word	0x0003024c

000d4b0c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4b0c:	b508      	push	{r3, lr}
   d4b0e:	4b02      	ldr	r3, [pc, #8]	; (d4b18 <HAL_USB_USART_Receive_Data+0xc>)
   d4b10:	681b      	ldr	r3, [r3, #0]
   d4b12:	699b      	ldr	r3, [r3, #24]
   d4b14:	9301      	str	r3, [sp, #4]
   d4b16:	bd08      	pop	{r3, pc}
   d4b18:	0003024c 	.word	0x0003024c

000d4b1c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4b1c:	b508      	push	{r3, lr}
   d4b1e:	4b02      	ldr	r3, [pc, #8]	; (d4b28 <HAL_USB_USART_Send_Data+0xc>)
   d4b20:	681b      	ldr	r3, [r3, #0]
   d4b22:	69db      	ldr	r3, [r3, #28]
   d4b24:	9301      	str	r3, [sp, #4]
   d4b26:	bd08      	pop	{r3, pc}
   d4b28:	0003024c 	.word	0x0003024c

000d4b2c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4b2c:	b508      	push	{r3, lr}
   d4b2e:	4b02      	ldr	r3, [pc, #8]	; (d4b38 <HAL_USB_USART_Flush_Data+0xc>)
   d4b30:	681b      	ldr	r3, [r3, #0]
   d4b32:	6a1b      	ldr	r3, [r3, #32]
   d4b34:	9301      	str	r3, [sp, #4]
   d4b36:	bd08      	pop	{r3, pc}
   d4b38:	0003024c 	.word	0x0003024c

000d4b3c <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d4b3c:	b508      	push	{r3, lr}
   d4b3e:	4b02      	ldr	r3, [pc, #8]	; (d4b48 <system_mode+0xc>)
   d4b40:	681b      	ldr	r3, [r3, #0]
   d4b42:	681b      	ldr	r3, [r3, #0]
   d4b44:	9301      	str	r3, [sp, #4]
   d4b46:	bd08      	pop	{r3, pc}
   d4b48:	00030220 	.word	0x00030220

000d4b4c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4b4c:	b508      	push	{r3, lr}
   d4b4e:	4b02      	ldr	r3, [pc, #8]	; (d4b58 <set_system_mode+0xc>)
   d4b50:	681b      	ldr	r3, [r3, #0]
   d4b52:	685b      	ldr	r3, [r3, #4]
   d4b54:	9301      	str	r3, [sp, #4]
   d4b56:	bd08      	pop	{r3, pc}
   d4b58:	00030220 	.word	0x00030220

000d4b5c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4b5c:	b508      	push	{r3, lr}
   d4b5e:	4b02      	ldr	r3, [pc, #8]	; (d4b68 <system_delay_ms+0xc>)
   d4b60:	681b      	ldr	r3, [r3, #0]
   d4b62:	695b      	ldr	r3, [r3, #20]
   d4b64:	9301      	str	r3, [sp, #4]
   d4b66:	bd08      	pop	{r3, pc}
   d4b68:	00030220 	.word	0x00030220

000d4b6c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4b6c:	b508      	push	{r3, lr}
   d4b6e:	4b02      	ldr	r3, [pc, #8]	; (d4b78 <application_thread_current+0xc>)
   d4b70:	681b      	ldr	r3, [r3, #0]
   d4b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4b74:	9301      	str	r3, [sp, #4]
   d4b76:	bd08      	pop	{r3, pc}
   d4b78:	00030220 	.word	0x00030220

000d4b7c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4b7c:	b508      	push	{r3, lr}
   d4b7e:	4b02      	ldr	r3, [pc, #8]	; (d4b88 <application_thread_invoke+0xc>)
   d4b80:	681b      	ldr	r3, [r3, #0]
   d4b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4b84:	9301      	str	r3, [sp, #4]
   d4b86:	bd08      	pop	{r3, pc}
   d4b88:	00030220 	.word	0x00030220

000d4b8c <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d4b8c:	b508      	push	{r3, lr}
   d4b8e:	4b02      	ldr	r3, [pc, #8]	; (d4b98 <system_thread_get_state+0xc>)
   d4b90:	681b      	ldr	r3, [r3, #0]
   d4b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4b94:	9301      	str	r3, [sp, #4]
   d4b96:	bd08      	pop	{r3, pc}
   d4b98:	00030220 	.word	0x00030220

000d4b9c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4b9c:	b508      	push	{r3, lr}
   d4b9e:	4b03      	ldr	r3, [pc, #12]	; (d4bac <system_ctrl_set_app_request_handler+0x10>)
   d4ba0:	681b      	ldr	r3, [r3, #0]
   d4ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4ba6:	9301      	str	r3, [sp, #4]
   d4ba8:	bd08      	pop	{r3, pc}
   d4baa:	0000      	.short	0x0000
   d4bac:	00030220 	.word	0x00030220

000d4bb0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4bb0:	b508      	push	{r3, lr}
   d4bb2:	4b03      	ldr	r3, [pc, #12]	; (d4bc0 <system_ctrl_set_result+0x10>)
   d4bb4:	681b      	ldr	r3, [r3, #0]
   d4bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4bba:	9301      	str	r3, [sp, #4]
   d4bbc:	bd08      	pop	{r3, pc}
   d4bbe:	0000      	.short	0x0000
   d4bc0:	00030220 	.word	0x00030220

000d4bc4 <system_sleep_pins>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
   d4bc4:	b508      	push	{r3, lr}
   d4bc6:	4b03      	ldr	r3, [pc, #12]	; (d4bd4 <system_sleep_pins+0x10>)
   d4bc8:	681b      	ldr	r3, [r3, #0]
   d4bca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   d4bce:	9301      	str	r3, [sp, #4]
   d4bd0:	bd08      	pop	{r3, pc}
   d4bd2:	0000      	.short	0x0000
   d4bd4:	00030220 	.word	0x00030220

000d4bd8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4bd8:	b508      	push	{r3, lr}
   d4bda:	4b02      	ldr	r3, [pc, #8]	; (d4be4 <network_connect+0xc>)
   d4bdc:	681b      	ldr	r3, [r3, #0]
   d4bde:	685b      	ldr	r3, [r3, #4]
   d4be0:	9301      	str	r3, [sp, #4]
   d4be2:	bd08      	pop	{r3, pc}
   d4be4:	00030240 	.word	0x00030240

000d4be8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4be8:	b508      	push	{r3, lr}
   d4bea:	4b02      	ldr	r3, [pc, #8]	; (d4bf4 <network_connecting+0xc>)
   d4bec:	681b      	ldr	r3, [r3, #0]
   d4bee:	689b      	ldr	r3, [r3, #8]
   d4bf0:	9301      	str	r3, [sp, #4]
   d4bf2:	bd08      	pop	{r3, pc}
   d4bf4:	00030240 	.word	0x00030240

000d4bf8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4bf8:	b508      	push	{r3, lr}
   d4bfa:	4b02      	ldr	r3, [pc, #8]	; (d4c04 <network_disconnect+0xc>)
   d4bfc:	681b      	ldr	r3, [r3, #0]
   d4bfe:	68db      	ldr	r3, [r3, #12]
   d4c00:	9301      	str	r3, [sp, #4]
   d4c02:	bd08      	pop	{r3, pc}
   d4c04:	00030240 	.word	0x00030240

000d4c08 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4c08:	b508      	push	{r3, lr}
   d4c0a:	4b02      	ldr	r3, [pc, #8]	; (d4c14 <network_ready+0xc>)
   d4c0c:	681b      	ldr	r3, [r3, #0]
   d4c0e:	691b      	ldr	r3, [r3, #16]
   d4c10:	9301      	str	r3, [sp, #4]
   d4c12:	bd08      	pop	{r3, pc}
   d4c14:	00030240 	.word	0x00030240

000d4c18 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4c18:	b508      	push	{r3, lr}
   d4c1a:	4b02      	ldr	r3, [pc, #8]	; (d4c24 <network_on+0xc>)
   d4c1c:	681b      	ldr	r3, [r3, #0]
   d4c1e:	695b      	ldr	r3, [r3, #20]
   d4c20:	9301      	str	r3, [sp, #4]
   d4c22:	bd08      	pop	{r3, pc}
   d4c24:	00030240 	.word	0x00030240

000d4c28 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4c28:	b508      	push	{r3, lr}
   d4c2a:	4b02      	ldr	r3, [pc, #8]	; (d4c34 <network_off+0xc>)
   d4c2c:	681b      	ldr	r3, [r3, #0]
   d4c2e:	699b      	ldr	r3, [r3, #24]
   d4c30:	9301      	str	r3, [sp, #4]
   d4c32:	bd08      	pop	{r3, pc}
   d4c34:	00030240 	.word	0x00030240

000d4c38 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4c38:	b508      	push	{r3, lr}
   d4c3a:	4b02      	ldr	r3, [pc, #8]	; (d4c44 <network_listen+0xc>)
   d4c3c:	681b      	ldr	r3, [r3, #0]
   d4c3e:	69db      	ldr	r3, [r3, #28]
   d4c40:	9301      	str	r3, [sp, #4]
   d4c42:	bd08      	pop	{r3, pc}
   d4c44:	00030240 	.word	0x00030240

000d4c48 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4c48:	b508      	push	{r3, lr}
   d4c4a:	4b02      	ldr	r3, [pc, #8]	; (d4c54 <network_listening+0xc>)
   d4c4c:	681b      	ldr	r3, [r3, #0]
   d4c4e:	6a1b      	ldr	r3, [r3, #32]
   d4c50:	9301      	str	r3, [sp, #4]
   d4c52:	bd08      	pop	{r3, pc}
   d4c54:	00030240 	.word	0x00030240

000d4c58 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4c58:	b508      	push	{r3, lr}
   d4c5a:	4b02      	ldr	r3, [pc, #8]	; (d4c64 <network_set_listen_timeout+0xc>)
   d4c5c:	681b      	ldr	r3, [r3, #0]
   d4c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4c60:	9301      	str	r3, [sp, #4]
   d4c62:	bd08      	pop	{r3, pc}
   d4c64:	00030240 	.word	0x00030240

000d4c68 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4c68:	b508      	push	{r3, lr}
   d4c6a:	4b02      	ldr	r3, [pc, #8]	; (d4c74 <network_get_listen_timeout+0xc>)
   d4c6c:	681b      	ldr	r3, [r3, #0]
   d4c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4c70:	9301      	str	r3, [sp, #4]
   d4c72:	bd08      	pop	{r3, pc}
   d4c74:	00030240 	.word	0x00030240

000d4c78 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d4c78:	b508      	push	{r3, lr}
   d4c7a:	4b02      	ldr	r3, [pc, #8]	; (d4c84 <spark_process+0xc>)
   d4c7c:	681b      	ldr	r3, [r3, #0]
   d4c7e:	689b      	ldr	r3, [r3, #8]
   d4c80:	9301      	str	r3, [sp, #4]
   d4c82:	bd08      	pop	{r3, pc}
   d4c84:	00030244 	.word	0x00030244

000d4c88 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d4c88:	b508      	push	{r3, lr}
   d4c8a:	4b02      	ldr	r3, [pc, #8]	; (d4c94 <spark_cloud_flag_connect+0xc>)
   d4c8c:	681b      	ldr	r3, [r3, #0]
   d4c8e:	68db      	ldr	r3, [r3, #12]
   d4c90:	9301      	str	r3, [sp, #4]
   d4c92:	bd08      	pop	{r3, pc}
   d4c94:	00030244 	.word	0x00030244

000d4c98 <spark_cloud_flag_disconnect>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
   d4c98:	b508      	push	{r3, lr}
   d4c9a:	4b02      	ldr	r3, [pc, #8]	; (d4ca4 <spark_cloud_flag_disconnect+0xc>)
   d4c9c:	681b      	ldr	r3, [r3, #0]
   d4c9e:	691b      	ldr	r3, [r3, #16]
   d4ca0:	9301      	str	r3, [sp, #4]
   d4ca2:	bd08      	pop	{r3, pc}
   d4ca4:	00030244 	.word	0x00030244

000d4ca8 <spark_cloud_flag_connected>:
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4ca8:	b508      	push	{r3, lr}
   d4caa:	4b02      	ldr	r3, [pc, #8]	; (d4cb4 <spark_cloud_flag_connected+0xc>)
   d4cac:	681b      	ldr	r3, [r3, #0]
   d4cae:	695b      	ldr	r3, [r3, #20]
   d4cb0:	9301      	str	r3, [sp, #4]
   d4cb2:	bd08      	pop	{r3, pc}
   d4cb4:	00030244 	.word	0x00030244

000d4cb8 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4cb8:	b508      	push	{r3, lr}
   d4cba:	4b02      	ldr	r3, [pc, #8]	; (d4cc4 <spark_send_event+0xc>)
   d4cbc:	681b      	ldr	r3, [r3, #0]
   d4cbe:	6a1b      	ldr	r3, [r3, #32]
   d4cc0:	9301      	str	r3, [sp, #4]
   d4cc2:	bd08      	pop	{r3, pc}
   d4cc4:	00030244 	.word	0x00030244

000d4cc8 <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d4cc8:	b508      	push	{r3, lr}
   d4cca:	4b02      	ldr	r3, [pc, #8]	; (d4cd4 <spark_sync_time+0xc>)
   d4ccc:	681b      	ldr	r3, [r3, #0]
   d4cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4cd0:	9301      	str	r3, [sp, #4]
   d4cd2:	bd08      	pop	{r3, pc}
   d4cd4:	00030244 	.word	0x00030244

000d4cd8 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d4cd8:	b508      	push	{r3, lr}
   d4cda:	4b02      	ldr	r3, [pc, #8]	; (d4ce4 <spark_sync_time_pending+0xc>)
   d4cdc:	681b      	ldr	r3, [r3, #0]
   d4cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4ce0:	9301      	str	r3, [sp, #4]
   d4ce2:	bd08      	pop	{r3, pc}
   d4ce4:	00030244 	.word	0x00030244

000d4ce8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4ce8:	b508      	push	{r3, lr}
   d4cea:	4b02      	ldr	r3, [pc, #8]	; (d4cf4 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4cec:	681b      	ldr	r3, [r3, #0]
   d4cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4cf0:	9301      	str	r3, [sp, #4]
   d4cf2:	bd08      	pop	{r3, pc}
   d4cf4:	00030244 	.word	0x00030244

000d4cf8 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4cf8:	b508      	push	{r3, lr}
   d4cfa:	4b02      	ldr	r3, [pc, #8]	; (d4d04 <malloc+0xc>)
   d4cfc:	681b      	ldr	r3, [r3, #0]
   d4cfe:	681b      	ldr	r3, [r3, #0]
   d4d00:	9301      	str	r3, [sp, #4]
   d4d02:	bd08      	pop	{r3, pc}
   d4d04:	0003021c 	.word	0x0003021c

000d4d08 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4d08:	b508      	push	{r3, lr}
   d4d0a:	4b02      	ldr	r3, [pc, #8]	; (d4d14 <free+0xc>)
   d4d0c:	681b      	ldr	r3, [r3, #0]
   d4d0e:	685b      	ldr	r3, [r3, #4]
   d4d10:	9301      	str	r3, [sp, #4]
   d4d12:	bd08      	pop	{r3, pc}
   d4d14:	0003021c 	.word	0x0003021c

000d4d18 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4d18:	b508      	push	{r3, lr}
   d4d1a:	4b02      	ldr	r3, [pc, #8]	; (d4d24 <realloc+0xc>)
   d4d1c:	681b      	ldr	r3, [r3, #0]
   d4d1e:	689b      	ldr	r3, [r3, #8]
   d4d20:	9301      	str	r3, [sp, #4]
   d4d22:	bd08      	pop	{r3, pc}
   d4d24:	0003021c 	.word	0x0003021c

000d4d28 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4d28:	b508      	push	{r3, lr}
   d4d2a:	4b02      	ldr	r3, [pc, #8]	; (d4d34 <abort+0xc>)
   d4d2c:	681b      	ldr	r3, [r3, #0]
   d4d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4d30:	9301      	str	r3, [sp, #4]
   d4d32:	bd08      	pop	{r3, pc}
   d4d34:	0003021c 	.word	0x0003021c

000d4d38 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4d38:	b508      	push	{r3, lr}
   d4d3a:	4b02      	ldr	r3, [pc, #8]	; (d4d44 <_malloc_r+0xc>)
   d4d3c:	681b      	ldr	r3, [r3, #0]
   d4d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4d40:	9301      	str	r3, [sp, #4]
   d4d42:	bd08      	pop	{r3, pc}
   d4d44:	0003021c 	.word	0x0003021c

000d4d48 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4d48:	2200      	movs	r2, #0
   d4d4a:	4611      	mov	r1, r2
   d4d4c:	6840      	ldr	r0, [r0, #4]
   d4d4e:	f7ff bf7b 	b.w	d4c48 <network_listening>

000d4d52 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4d52:	2200      	movs	r2, #0
   d4d54:	4611      	mov	r1, r2
   d4d56:	6840      	ldr	r0, [r0, #4]
   d4d58:	f7ff bf86 	b.w	d4c68 <network_get_listen_timeout>

000d4d5c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4d5c:	2200      	movs	r2, #0
   d4d5e:	6840      	ldr	r0, [r0, #4]
   d4d60:	f7ff bf7a 	b.w	d4c58 <network_set_listen_timeout>

000d4d64 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4d64:	2200      	movs	r2, #0
   d4d66:	f081 0101 	eor.w	r1, r1, #1
   d4d6a:	6840      	ldr	r0, [r0, #4]
   d4d6c:	f7ff bf64 	b.w	d4c38 <network_listen>

000d4d70 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4d70:	2300      	movs	r3, #0
   d4d72:	461a      	mov	r2, r3
   d4d74:	4619      	mov	r1, r3
   d4d76:	6840      	ldr	r0, [r0, #4]
   d4d78:	f7ff bf56 	b.w	d4c28 <network_off>

000d4d7c <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4d7c:	2300      	movs	r3, #0
   d4d7e:	461a      	mov	r2, r3
   d4d80:	4619      	mov	r1, r3
   d4d82:	6840      	ldr	r0, [r0, #4]
   d4d84:	f7ff bf48 	b.w	d4c18 <network_on>

000d4d88 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4d88:	2200      	movs	r2, #0
   d4d8a:	4611      	mov	r1, r2
   d4d8c:	6840      	ldr	r0, [r0, #4]
   d4d8e:	f7ff bf3b 	b.w	d4c08 <network_ready>

000d4d92 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4d92:	2200      	movs	r2, #0
   d4d94:	4611      	mov	r1, r2
   d4d96:	6840      	ldr	r0, [r0, #4]
   d4d98:	f7ff bf26 	b.w	d4be8 <network_connecting>

000d4d9c <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4d9c:	2200      	movs	r2, #0
   d4d9e:	2102      	movs	r1, #2
   d4da0:	6840      	ldr	r0, [r0, #4]
   d4da2:	f7ff bf29 	b.w	d4bf8 <network_disconnect>

000d4da6 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4da6:	2300      	movs	r3, #0
   d4da8:	461a      	mov	r2, r3
   d4daa:	6840      	ldr	r0, [r0, #4]
   d4dac:	f7ff bf14 	b.w	d4bd8 <network_connect>

000d4db0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4db0:	4b02      	ldr	r3, [pc, #8]	; (d4dbc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4db2:	2203      	movs	r2, #3
   d4db4:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4db6:	4a02      	ldr	r2, [pc, #8]	; (d4dc0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4db8:	601a      	str	r2, [r3, #0]
   d4dba:	4770      	bx	lr
   d4dbc:	2003e3a0 	.word	0x2003e3a0
   d4dc0:	000d69c8 	.word	0x000d69c8

000d4dc4 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d4dc4:	4770      	bx	lr

000d4dc6 <_ZN8SPIClassD0Ev>:
   d4dc6:	b510      	push	{r4, lr}
   d4dc8:	2110      	movs	r1, #16
   d4dca:	4604      	mov	r4, r0
   d4dcc:	f001 fb61 	bl	d6492 <_ZdlPvj>
   d4dd0:	4620      	mov	r0, r4
   d4dd2:	bd10      	pop	{r4, pc}

000d4dd4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4dd4:	b570      	push	{r4, r5, r6, lr}
   d4dd6:	4b08      	ldr	r3, [pc, #32]	; (d4df8 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d4dd8:	6003      	str	r3, [r0, #0]
   d4dda:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d4ddc:	2500      	movs	r5, #0
   d4dde:	460e      	mov	r6, r1
   d4de0:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d4de4:	f7ff fdda 	bl	d499c <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d4de8:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d4dea:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d4dec:	f7ff fd7e 	bl	d48ec <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d4df0:	60a5      	str	r5, [r4, #8]
}
   d4df2:	4620      	mov	r0, r4
   d4df4:	bd70      	pop	{r4, r5, r6, pc}
   d4df6:	bf00      	nop
   d4df8:	000d69fc 	.word	0x000d69fc

000d4dfc <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d4dfc:	7900      	ldrb	r0, [r0, #4]
   d4dfe:	f7ff bd7d 	b.w	d48fc <HAL_SPI_Is_Enabled>

000d4e02 <_ZN11SleepResultC1EiPKtj>:
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   d4e02:	b510      	push	{r4, lr}
   d4e04:	2400      	movs	r4, #0
   d4e06:	7004      	strb	r4, [r0, #0]
   d4e08:	8044      	strh	r4, [r0, #2]
    if (ret > 0) {
   d4e0a:	2900      	cmp	r1, #0
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   d4e0c:	f64f 74ff 	movw	r4, #65535	; 0xffff
   d4e10:	8084      	strh	r4, [r0, #4]
    if (ret > 0) {
   d4e12:	dd07      	ble.n	d4e24 <_ZN11SleepResultC1EiPKtj+0x22>
        // pin
        --ret;
        if ((size_t)ret < pinsSize) {
   d4e14:	3901      	subs	r1, #1
   d4e16:	4299      	cmp	r1, r3
   d4e18:	d209      	bcs.n	d4e2e <_ZN11SleepResultC1EiPKtj+0x2c>
            pin_ = pins[ret];
   d4e1a:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   d4e1e:	8083      	strh	r3, [r0, #4]
            reason_ = WAKEUP_REASON_PIN;
   d4e20:	2301      	movs	r3, #1
   d4e22:	e001      	b.n	d4e28 <_ZN11SleepResultC1EiPKtj+0x26>
            err_ = SYSTEM_ERROR_NONE;
        }
    } else if (ret == 0) {
   d4e24:	d102      	bne.n	d4e2c <_ZN11SleepResultC1EiPKtj+0x2a>
        reason_ = WAKEUP_REASON_RTC;
   d4e26:	2302      	movs	r3, #2
   d4e28:	7003      	strb	r3, [r0, #0]
   d4e2a:	bd10      	pop	{r4, pc}
        err_ = SYSTEM_ERROR_NONE;
    } else {
        err_ = static_cast<system_error_t>(ret);
   d4e2c:	8041      	strh	r1, [r0, #2]
    }
}
   d4e2e:	bd10      	pop	{r4, pc}

000d4e30 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>:
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d4e30:	b570      	push	{r4, r5, r6, lr}
   d4e32:	b086      	sub	sp, #24
   d4e34:	4616      	mov	r6, r2
   d4e36:	461a      	mov	r2, r3
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d4e38:	2300      	movs	r3, #0
   d4e3a:	9302      	str	r3, [sp, #8]
   d4e3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d4e3e:	9301      	str	r3, [sp, #4]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d4e40:	460d      	mov	r5, r1
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d4e42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d4e44:	9300      	str	r3, [sp, #0]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d4e46:	4604      	mov	r4, r0
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d4e48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d4e4a:	4631      	mov	r1, r6
   d4e4c:	4628      	mov	r0, r5
   d4e4e:	f7ff feb9 	bl	d4bc4 <system_sleep_pins>
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
   d4e52:	4633      	mov	r3, r6
   d4e54:	462a      	mov	r2, r5
   d4e56:	4601      	mov	r1, r0
   d4e58:	a804      	add	r0, sp, #16
   d4e5a:	f7ff ffd2 	bl	d4e02 <_ZN11SleepResultC1EiPKtj>
   d4e5e:	4b06      	ldr	r3, [pc, #24]	; (d4e78 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
   d4e60:	9804      	ldr	r0, [sp, #16]
   d4e62:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   d4e66:	6018      	str	r0, [r3, #0]
   d4e68:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
   d4e6a:	681a      	ldr	r2, [r3, #0]
   d4e6c:	889b      	ldrh	r3, [r3, #4]
   d4e6e:	6022      	str	r2, [r4, #0]
}
   d4e70:	4620      	mov	r0, r4
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
    return System.sleepResult_;
   d4e72:	80a3      	strh	r3, [r4, #4]
}
   d4e74:	b006      	add	sp, #24
   d4e76:	bd70      	pop	{r4, r5, r6, pc}
   d4e78:	2003e3a8 	.word	0x2003e3a8

000d4e7c <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d4e7c:	4b04      	ldr	r3, [pc, #16]	; (d4e90 <_GLOBAL__sub_I_System+0x14>)
   d4e7e:	2000      	movs	r0, #0
   d4e80:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4e84:	7018      	strb	r0, [r3, #0]
   d4e86:	8058      	strh	r0, [r3, #2]
   d4e88:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4e8a:	f7ff be5f 	b.w	d4b4c <set_system_mode>
   d4e8e:	bf00      	nop
   d4e90:	2003e3a8 	.word	0x2003e3a8

000d4e94 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d4e94:	b510      	push	{r4, lr}
   d4e96:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d4e98:	f001 fcd3 	bl	d6842 <strlen>
   d4e9c:	3801      	subs	r0, #1
   d4e9e:	1823      	adds	r3, r4, r0
   d4ea0:	4620      	mov	r0, r4
	while(i<j){
   d4ea2:	4298      	cmp	r0, r3
   d4ea4:	d206      	bcs.n	d4eb4 <_Z11str_reversePc+0x20>
		c = *i;
   d4ea6:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d4ea8:	7819      	ldrb	r1, [r3, #0]
   d4eaa:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d4eae:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d4eb2:	e7f6      	b.n	d4ea2 <_Z11str_reversePc+0xe>
   d4eb4:	bd10      	pop	{r4, pc}

000d4eb6 <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d4eb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   d4eba:	1e93      	subs	r3, r2, #2
            base = 10;                    /* can only use 0-9, A-Z        */
   d4ebc:	2b23      	cmp	r3, #35	; 0x23



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d4ebe:	4615      	mov	r5, r2
   d4ec0:	b08c      	sub	sp, #48	; 0x30
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
   d4ec2:	bf34      	ite	cc
   d4ec4:	4615      	movcc	r5, r2
   d4ec6:	250a      	movcs	r5, #10
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   d4ec8:	2300      	movs	r3, #0

      if (10 == base && N < 0L)
   d4eca:	2d0a      	cmp	r5, #10



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d4ecc:	460c      	mov	r4, r1
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   d4ece:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c

      if (10 == base && N < 0L)
   d4ed2:	d107      	bne.n	d4ee4 <ltoa+0x2e>
   d4ed4:	4298      	cmp	r0, r3
   d4ed6:	da05      	bge.n	d4ee4 <ltoa+0x2e>
      {
            *head++ = '-';
   d4ed8:	232d      	movs	r3, #45	; 0x2d
   d4eda:	f101 0801 	add.w	r8, r1, #1
   d4ede:	700b      	strb	r3, [r1, #0]
            uarg    = -N;
   d4ee0:	4240      	negs	r0, r0
   d4ee2:	e001      	b.n	d4ee8 <ltoa+0x32>
      }
      else  uarg = N;

      if (uarg)
   d4ee4:	b1b0      	cbz	r0, d4f14 <ltoa+0x5e>
   d4ee6:	46a0      	mov	r8, r4
   d4ee8:	f10d 062b 	add.w	r6, sp, #43	; 0x2b
   d4eec:	2701      	movs	r7, #1
      {
            for (i = 1; uarg; ++i)
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   d4eee:	462a      	mov	r2, r5
   d4ef0:	4601      	mov	r1, r0
   d4ef2:	a801      	add	r0, sp, #4
   d4ef4:	f001 fc28 	bl	d6748 <ldiv>
   d4ef8:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   d4efa:	9801      	ldr	r0, [sp, #4]
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
   d4efc:	2b09      	cmp	r3, #9
   d4efe:	bfcc      	ite	gt
   d4f00:	2237      	movgt	r2, #55	; 0x37
   d4f02:	2230      	movle	r2, #48	; 0x30
   d4f04:	fa52 f383 	uxtab	r3, r2, r3
   d4f08:	f806 3901 	strb.w	r3, [r6], #-1
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   d4f0c:	3701      	adds	r7, #1
   d4f0e:	2800      	cmp	r0, #0
   d4f10:	d1ed      	bne.n	d4eee <ltoa+0x38>
   d4f12:	e006      	b.n	d4f22 <ltoa+0x6c>
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';
   d4f14:	2330      	movs	r3, #48	; 0x30
   d4f16:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   d4f1a:	46a0      	mov	r8, r4
   d4f1c:	f10d 062a 	add.w	r6, sp, #42	; 0x2a


//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
      int i = 2;
   d4f20:	2702      	movs	r7, #2
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   d4f22:	463a      	mov	r2, r7
   d4f24:	1c71      	adds	r1, r6, #1
   d4f26:	4640      	mov	r0, r8
   d4f28:	f001 fc22 	bl	d6770 <memcpy>
      return str;
}
   d4f2c:	4620      	mov	r0, r4
   d4f2e:	b00c      	add	sp, #48	; 0x30
   d4f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4f34 <ultoa>:

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d4f34:	b570      	push	{r4, r5, r6, lr}
   d4f36:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d4f38:	1e91      	subs	r1, r2, #2
   d4f3a:	2922      	cmp	r1, #34	; 0x22
   d4f3c:	d820      	bhi.n	d4f80 <ultoa+0x4c>
   d4f3e:	4625      	mov	r5, r4
   d4f40:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d4f42:	b910      	cbnz	r0, d4f4a <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d4f44:	4423      	add	r3, r4
            *ptr++ = '0';
   d4f46:	2230      	movs	r2, #48	; 0x30
   d4f48:	e00e      	b.n	d4f68 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d4f4a:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d4f4e:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d4f52:	b2c1      	uxtb	r1, r0
   d4f54:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d4f58:	2809      	cmp	r0, #9
                *ptr += '0';
   d4f5a:	bf94      	ite	ls
   d4f5c:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d4f5e:	3157      	addhi	r1, #87	; 0x57
   d4f60:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d4f64:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d4f66:	e7eb      	b.n	d4f40 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d4f68:	4299      	cmp	r1, r3
   d4f6a:	d202      	bcs.n	d4f72 <ultoa+0x3e>
            *ptr++ = '0';
   d4f6c:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d4f70:	e7fa      	b.n	d4f68 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d4f72:	2300      	movs	r3, #0
	str_reverse(buffer);
   d4f74:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d4f76:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d4f78:	f7ff ff8c 	bl	d4e94 <_Z11str_reversePc>
	return buffer;
   d4f7c:	4620      	mov	r0, r4
   d4f7e:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d4f80:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d4f82:	bd70      	pop	{r4, r5, r6, pc}

000d4f84 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d4f84:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d4f86:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d4f88:	460c      	mov	r4, r1
   d4f8a:	4615      	mov	r5, r2
	if(a<0){
   d4f8c:	da0b      	bge.n	d4fa6 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d4f8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d4f92:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d4f96:	bf14      	ite	ne
   d4f98:	4258      	negne	r0, r3
   d4f9a:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d4f9c:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d4f9e:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
   d4fa0:	462a      	mov	r2, r5
   d4fa2:	4419      	add	r1, r3
   d4fa4:	e000      	b.n	d4fa8 <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
   d4fa6:	2301      	movs	r3, #1
   d4fa8:	f7ff ffc4 	bl	d4f34 <ultoa>
	}
	return buffer;
}
   d4fac:	4620      	mov	r0, r4
   d4fae:	bd38      	pop	{r3, r4, r5, pc}

000d4fb0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4fb0:	b510      	push	{r4, lr}
   d4fb2:	4604      	mov	r4, r0
{
	free(buffer);
   d4fb4:	6800      	ldr	r0, [r0, #0]
   d4fb6:	f7ff fea7 	bl	d4d08 <free>
}
   d4fba:	4620      	mov	r0, r4
   d4fbc:	bd10      	pop	{r4, pc}

000d4fbe <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4fbe:	b510      	push	{r4, lr}
   d4fc0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4fc2:	6800      	ldr	r0, [r0, #0]
   d4fc4:	b108      	cbz	r0, d4fca <_ZN6String10invalidateEv+0xc>
   d4fc6:	f7ff fe9f 	bl	d4d08 <free>
	buffer = NULL;
   d4fca:	2300      	movs	r3, #0
   d4fcc:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d4fce:	60a3      	str	r3, [r4, #8]
   d4fd0:	6063      	str	r3, [r4, #4]
   d4fd2:	bd10      	pop	{r4, pc}

000d4fd4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4fd4:	b538      	push	{r3, r4, r5, lr}
   d4fd6:	4604      	mov	r4, r0
   d4fd8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4fda:	6800      	ldr	r0, [r0, #0]
   d4fdc:	3101      	adds	r1, #1
   d4fde:	f7ff fe9b 	bl	d4d18 <realloc>
	if (newbuffer) {
   d4fe2:	b110      	cbz	r0, d4fea <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4fe4:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d4fe8:	2001      	movs	r0, #1
	}
	return 0;
}
   d4fea:	bd38      	pop	{r3, r4, r5, pc}

000d4fec <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4fec:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4fee:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4ff0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4ff2:	b113      	cbz	r3, d4ffa <_ZN6String7reserveEj+0xe>
   d4ff4:	6843      	ldr	r3, [r0, #4]
   d4ff6:	428b      	cmp	r3, r1
   d4ff8:	d207      	bcs.n	d500a <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d4ffa:	4620      	mov	r0, r4
   d4ffc:	f7ff ffea 	bl	d4fd4 <_ZN6String12changeBufferEj>
   d5000:	b120      	cbz	r0, d500c <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d5002:	68a3      	ldr	r3, [r4, #8]
   d5004:	b90b      	cbnz	r3, d500a <_ZN6String7reserveEj+0x1e>
   d5006:	6822      	ldr	r2, [r4, #0]
   d5008:	7013      	strb	r3, [r2, #0]
   d500a:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d500c:	bd10      	pop	{r4, pc}

000d500e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d500e:	b570      	push	{r4, r5, r6, lr}
   d5010:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d5012:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5014:	4604      	mov	r4, r0
   d5016:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d5018:	f7ff ffe8 	bl	d4fec <_ZN6String7reserveEj>
   d501c:	b918      	cbnz	r0, d5026 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d501e:	4620      	mov	r0, r4
   d5020:	f7ff ffcd 	bl	d4fbe <_ZN6String10invalidateEv>
		return *this;
   d5024:	e009      	b.n	d503a <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d5026:	462a      	mov	r2, r5
   d5028:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d502a:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d502c:	6820      	ldr	r0, [r4, #0]
   d502e:	f001 fb9f 	bl	d6770 <memcpy>
	buffer[len] = 0;
   d5032:	6822      	ldr	r2, [r4, #0]
   d5034:	68a3      	ldr	r3, [r4, #8]
   d5036:	2100      	movs	r1, #0
   d5038:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d503a:	4620      	mov	r0, r4
   d503c:	bd70      	pop	{r4, r5, r6, pc}

000d503e <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d503e:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5040:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5042:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5044:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5046:	6043      	str	r3, [r0, #4]
	len = 0;
   d5048:	6083      	str	r3, [r0, #8]
	flags = 0;
   d504a:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d504c:	460d      	mov	r5, r1
   d504e:	b139      	cbz	r1, d5060 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d5050:	4608      	mov	r0, r1
   d5052:	f001 fbf6 	bl	d6842 <strlen>
   d5056:	4629      	mov	r1, r5
   d5058:	4602      	mov	r2, r0
   d505a:	4620      	mov	r0, r4
   d505c:	f7ff ffd7 	bl	d500e <_ZN6String4copyEPKcj>
}
   d5060:	4620      	mov	r0, r4
   d5062:	bd38      	pop	{r3, r4, r5, pc}

000d5064 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d5064:	b538      	push	{r3, r4, r5, lr}
   d5066:	4605      	mov	r5, r0
	if (buffer) {
   d5068:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d506a:	460c      	mov	r4, r1
	if (buffer) {
   d506c:	b160      	cbz	r0, d5088 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   d506e:	686a      	ldr	r2, [r5, #4]
   d5070:	688b      	ldr	r3, [r1, #8]
   d5072:	429a      	cmp	r2, r3
   d5074:	d306      	bcc.n	d5084 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   d5076:	6809      	ldr	r1, [r1, #0]
   d5078:	f001 fbc0 	bl	d67fc <strcpy>
			len = rhs.len;
   d507c:	68a3      	ldr	r3, [r4, #8]
   d507e:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d5080:	2300      	movs	r3, #0
   d5082:	e00a      	b.n	d509a <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   d5084:	f7ff fe40 	bl	d4d08 <free>
		}
	}
	buffer = rhs.buffer;
   d5088:	6823      	ldr	r3, [r4, #0]
   d508a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d508c:	6863      	ldr	r3, [r4, #4]
   d508e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d5090:	68a3      	ldr	r3, [r4, #8]
   d5092:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d5094:	2300      	movs	r3, #0
   d5096:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   d5098:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   d509a:	60a3      	str	r3, [r4, #8]
   d509c:	bd38      	pop	{r3, r4, r5, pc}

000d509e <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d509e:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d50a0:	b510      	push	{r4, lr}
   d50a2:	460b      	mov	r3, r1
   d50a4:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d50a6:	d007      	beq.n	d50b8 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d50a8:	6809      	ldr	r1, [r1, #0]
   d50aa:	b119      	cbz	r1, d50b4 <_ZN6StringaSERKS_+0x16>
   d50ac:	689a      	ldr	r2, [r3, #8]
   d50ae:	f7ff ffae 	bl	d500e <_ZN6String4copyEPKcj>
   d50b2:	e001      	b.n	d50b8 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d50b4:	f7ff ff83 	bl	d4fbe <_ZN6String10invalidateEv>

	return *this;
}
   d50b8:	4620      	mov	r0, r4
   d50ba:	bd10      	pop	{r4, pc}

000d50bc <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d50bc:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d50be:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d50c0:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d50c2:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d50c4:	6043      	str	r3, [r0, #4]
	len = 0;
   d50c6:	6083      	str	r3, [r0, #8]
	flags = 0;
   d50c8:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d50ca:	f7ff ffe8 	bl	d509e <_ZN6StringaSERKS_>
}
   d50ce:	4620      	mov	r0, r4
   d50d0:	bd10      	pop	{r4, pc}

000d50d2 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d50d2:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   d50d4:	b510      	push	{r4, lr}
   d50d6:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d50d8:	d001      	beq.n	d50de <_ZN6StringaSEOS_+0xc>
   d50da:	f7ff ffc3 	bl	d5064 <_ZN6String4moveERS_>
	return *this;
}
   d50de:	4620      	mov	r0, r4
   d50e0:	bd10      	pop	{r4, pc}

000d50e2 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d50e2:	b538      	push	{r3, r4, r5, lr}
   d50e4:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d50e6:	460c      	mov	r4, r1
   d50e8:	b141      	cbz	r1, d50fc <_ZN6StringaSEPKc+0x1a>
   d50ea:	4608      	mov	r0, r1
   d50ec:	f001 fba9 	bl	d6842 <strlen>
   d50f0:	4621      	mov	r1, r4
   d50f2:	4602      	mov	r2, r0
   d50f4:	4628      	mov	r0, r5
   d50f6:	f7ff ff8a 	bl	d500e <_ZN6String4copyEPKcj>
   d50fa:	e001      	b.n	d5100 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d50fc:	f7ff ff5f 	bl	d4fbe <_ZN6String10invalidateEv>

	return *this;
}
   d5100:	4628      	mov	r0, r5
   d5102:	bd38      	pop	{r3, r4, r5, pc}

000d5104 <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d5104:	b510      	push	{r4, lr}
   d5106:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5108:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d510a:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d510c:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d510e:	6063      	str	r3, [r4, #4]
	len = 0;
   d5110:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d5112:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d5114:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
   d5116:	a901      	add	r1, sp, #4
   d5118:	f7ff ff34 	bl	d4f84 <itoa>
	*this = buf;
   d511c:	a901      	add	r1, sp, #4
   d511e:	4620      	mov	r0, r4
   d5120:	f7ff ffdf 	bl	d50e2 <_ZN6StringaSEPKc>
}
   d5124:	4620      	mov	r0, r4
   d5126:	b00a      	add	sp, #40	; 0x28
   d5128:	bd10      	pop	{r4, pc}

000d512a <_ZN6StringC1Elh>:
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
   d512a:	b510      	push	{r4, lr}
   d512c:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d512e:	2300      	movs	r3, #0
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
   d5130:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5132:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d5134:	6063      	str	r3, [r4, #4]
	len = 0;
   d5136:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d5138:	7323      	strb	r3, [r4, #12]
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
   d513a:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	ltoa(value, buf, base);
   d513c:	a901      	add	r1, sp, #4
   d513e:	f7ff feba 	bl	d4eb6 <ltoa>
	*this = buf;
   d5142:	a901      	add	r1, sp, #4
   d5144:	4620      	mov	r0, r4
   d5146:	f7ff ffcc 	bl	d50e2 <_ZN6StringaSEPKc>
}
   d514a:	4620      	mov	r0, r4
   d514c:	b00a      	add	sp, #40	; 0x28
   d514e:	bd10      	pop	{r4, pc}

000d5150 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d5150:	b570      	push	{r4, r5, r6, lr}
   d5152:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d5154:	460e      	mov	r6, r1
   d5156:	b909      	cbnz	r1, d515c <_ZN6String6concatEPKcj+0xc>
   d5158:	2000      	movs	r0, #0
   d515a:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d515c:	b16a      	cbz	r2, d517a <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d515e:	6883      	ldr	r3, [r0, #8]
   d5160:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d5162:	4629      	mov	r1, r5
   d5164:	f7ff ff42 	bl	d4fec <_ZN6String7reserveEj>
   d5168:	2800      	cmp	r0, #0
   d516a:	d0f5      	beq.n	d5158 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d516c:	6820      	ldr	r0, [r4, #0]
   d516e:	68a3      	ldr	r3, [r4, #8]
   d5170:	4631      	mov	r1, r6
   d5172:	4418      	add	r0, r3
   d5174:	f001 fb42 	bl	d67fc <strcpy>
	len = newlen;
   d5178:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d517a:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d517c:	bd70      	pop	{r4, r5, r6, pc}

000d517e <_ZN6String6concatERKS_>:
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
   d517e:	688a      	ldr	r2, [r1, #8]
   d5180:	6809      	ldr	r1, [r1, #0]
   d5182:	f7ff bfe5 	b.w	d5150 <_ZN6String6concatEPKcj>

000d5186 <_ZN6String6concatEPKc>:
	len = newlen;
	return 1;
}

unsigned char String::concat(const char *cstr)
{
   d5186:	b538      	push	{r3, r4, r5, lr}
   d5188:	4605      	mov	r5, r0
	if (!cstr) return 0;
   d518a:	460c      	mov	r4, r1
	return concat(cstr, strlen(cstr));
}
   d518c:	4608      	mov	r0, r1
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
   d518e:	b141      	cbz	r1, d51a2 <_ZN6String6concatEPKc+0x1c>
	return concat(cstr, strlen(cstr));
   d5190:	f001 fb57 	bl	d6842 <strlen>
   d5194:	4621      	mov	r1, r4
   d5196:	4602      	mov	r2, r0
   d5198:	4628      	mov	r0, r5
}
   d519a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
   d519e:	f7ff bfd7 	b.w	d5150 <_ZN6String6concatEPKcj>
}
   d51a2:	bd38      	pop	{r3, r4, r5, pc}

000d51a4 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d51a4:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d51a6:	688a      	ldr	r2, [r1, #8]
   d51a8:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d51aa:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d51ac:	f7ff ffd0 	bl	d5150 <_ZN6String6concatEPKcj>
   d51b0:	b910      	cbnz	r0, d51b8 <_ZplRK15StringSumHelperRK6String+0x14>
   d51b2:	4620      	mov	r0, r4
   d51b4:	f7ff ff03 	bl	d4fbe <_ZN6String10invalidateEv>
	return a;
}
   d51b8:	4620      	mov	r0, r4
   d51ba:	bd10      	pop	{r4, pc}

000d51bc <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d51bc:	b538      	push	{r3, r4, r5, lr}
   d51be:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d51c0:	460d      	mov	r5, r1
   d51c2:	b141      	cbz	r1, d51d6 <_ZplRK15StringSumHelperPKc+0x1a>
   d51c4:	4608      	mov	r0, r1
   d51c6:	f001 fb3c 	bl	d6842 <strlen>
   d51ca:	4629      	mov	r1, r5
   d51cc:	4602      	mov	r2, r0
   d51ce:	4620      	mov	r0, r4
   d51d0:	f7ff ffbe 	bl	d5150 <_ZN6String6concatEPKcj>
   d51d4:	b910      	cbnz	r0, d51dc <_ZplRK15StringSumHelperPKc+0x20>
   d51d6:	4620      	mov	r0, r4
   d51d8:	f7ff fef1 	bl	d4fbe <_ZN6String10invalidateEv>
	return a;
}
   d51dc:	4620      	mov	r0, r4
   d51de:	bd38      	pop	{r3, r4, r5, pc}

000d51e0 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d51e0:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d51e2:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d51e4:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d51e6:	b912      	cbnz	r2, d51ee <_ZNK6String6equalsEPKc+0xe>
   d51e8:	b919      	cbnz	r1, d51f2 <_ZNK6String6equalsEPKc+0x12>
   d51ea:	2001      	movs	r0, #1
   d51ec:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d51ee:	b911      	cbnz	r1, d51f6 <_ZNK6String6equalsEPKc+0x16>
   d51f0:	6803      	ldr	r3, [r0, #0]
   d51f2:	7818      	ldrb	r0, [r3, #0]
   d51f4:	e002      	b.n	d51fc <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d51f6:	6800      	ldr	r0, [r0, #0]
   d51f8:	f001 faf6 	bl	d67e8 <strcmp>
   d51fc:	fab0 f080 	clz	r0, r0
   d5200:	0940      	lsrs	r0, r0, #5
}
   d5202:	bd08      	pop	{r3, pc}

000d5204 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d5204:	680b      	ldr	r3, [r1, #0]
   d5206:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d5208:	b113      	cbz	r3, d5210 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d520a:	685a      	ldr	r2, [r3, #4]
   d520c:	3201      	adds	r2, #1
   d520e:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d5210:	4770      	bx	lr
	...

000d5214 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5214:	4802      	ldr	r0, [pc, #8]	; (d5220 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d5216:	2300      	movs	r3, #0
   d5218:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d521a:	f7ff bbc7 	b.w	d49ac <os_mutex_recursive_create>
   d521e:	bf00      	nop
   d5220:	2003e3b0 	.word	0x2003e3b0

000d5224 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5226:	4606      	mov	r6, r0
   d5228:	460d      	mov	r5, r1
   d522a:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d522c:	2400      	movs	r4, #0
  while (size--) {
   d522e:	42bd      	cmp	r5, r7
   d5230:	d00c      	beq.n	d524c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5232:	6833      	ldr	r3, [r6, #0]
   d5234:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5238:	689b      	ldr	r3, [r3, #8]
   d523a:	4630      	mov	r0, r6
   d523c:	4798      	blx	r3
     if (chunk>=0)
   d523e:	2800      	cmp	r0, #0
   d5240:	db01      	blt.n	d5246 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5242:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5244:	e7f3      	b.n	d522e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5246:	2c00      	cmp	r4, #0
   d5248:	bf08      	it	eq
   d524a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d524c:	4620      	mov	r0, r4
   d524e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5250 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5250:	b570      	push	{r4, r5, r6, lr}
   d5252:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5254:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5256:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5258:	b149      	cbz	r1, d526e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d525a:	f001 faf2 	bl	d6842 <strlen>
   d525e:	682b      	ldr	r3, [r5, #0]
   d5260:	4602      	mov	r2, r0
   d5262:	4621      	mov	r1, r4
   d5264:	4628      	mov	r0, r5
   d5266:	68db      	ldr	r3, [r3, #12]
    }
   d5268:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d526c:	4718      	bx	r3
    }
   d526e:	bd70      	pop	{r4, r5, r6, pc}

000d5270 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5270:	6803      	ldr	r3, [r0, #0]
   d5272:	689b      	ldr	r3, [r3, #8]
   d5274:	4718      	bx	r3

000d5276 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5276:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5278:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d527a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d527c:	f7ff fff8 	bl	d5270 <_ZN5Print5printEc>
  n += print('\n');
   d5280:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d5282:	4604      	mov	r4, r0
  n += print('\n');
   d5284:	4628      	mov	r0, r5
   d5286:	f7ff fff3 	bl	d5270 <_ZN5Print5printEc>
  return n;
}
   d528a:	4420      	add	r0, r4
   d528c:	bd38      	pop	{r3, r4, r5, pc}

000d528e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d528e:	b538      	push	{r3, r4, r5, lr}
   d5290:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5292:	f7ff ffdd 	bl	d5250 <_ZN5Print5writeEPKc>
   d5296:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d5298:	4628      	mov	r0, r5
   d529a:	f7ff ffec 	bl	d5276 <_ZN5Print7printlnEv>
  return n;
}
   d529e:	4420      	add	r0, r4
   d52a0:	bd38      	pop	{r3, r4, r5, pc}

000d52a2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d52a2:	b530      	push	{r4, r5, lr}
   d52a4:	b08b      	sub	sp, #44	; 0x2c
   d52a6:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d52a8:	2100      	movs	r1, #0
   d52aa:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d52ae:	2a01      	cmp	r2, #1
   d52b0:	bf98      	it	ls
   d52b2:	220a      	movls	r2, #10
   d52b4:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d52b8:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d52bc:	fb05 3312 	mls	r3, r5, r2, r3
   d52c0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d52c4:	2b09      	cmp	r3, #9
   d52c6:	bf94      	ite	ls
   d52c8:	3330      	addls	r3, #48	; 0x30
   d52ca:	3337      	addhi	r3, #55	; 0x37
   d52cc:	b2db      	uxtb	r3, r3
   d52ce:	4621      	mov	r1, r4
   d52d0:	f804 3901 	strb.w	r3, [r4], #-1
   d52d4:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d52d6:	2d00      	cmp	r5, #0
   d52d8:	d1ee      	bne.n	d52b8 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d52da:	f7ff ffb9 	bl	d5250 <_ZN5Print5writeEPKc>
}
   d52de:	b00b      	add	sp, #44	; 0x2c
   d52e0:	bd30      	pop	{r4, r5, pc}

000d52e2 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d52e2:	b410      	push	{r4}
  if (base == 0) return write(n);
   d52e4:	b92a      	cbnz	r2, d52f2 <_ZN5Print5printEmi+0x10>
   d52e6:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d52e8:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d52ec:	689b      	ldr	r3, [r3, #8]
   d52ee:	b2c9      	uxtb	r1, r1
   d52f0:	4718      	bx	r3
  else return printNumber(n, base);
   d52f2:	b2d2      	uxtb	r2, r2
}
   d52f4:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d52f8:	f7ff bfd3 	b.w	d52a2 <_ZN5Print11printNumberEmh>

000d52fc <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d52fc:	f7ff bff1 	b.w	d52e2 <_ZN5Print5printEmi>

000d5300 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d5300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5304:	4607      	mov	r7, r0
   d5306:	460e      	mov	r6, r1
  if (base == 0) {
   d5308:	4615      	mov	r5, r2
   d530a:	b92a      	cbnz	r2, d5318 <_ZN5Print5printEli+0x18>
    return write(n);
   d530c:	6803      	ldr	r3, [r0, #0]
   d530e:	b2c9      	uxtb	r1, r1
   d5310:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d5312:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d5316:	4718      	bx	r3
  } else if (base == 10) {
   d5318:	2a0a      	cmp	r2, #10
   d531a:	d102      	bne.n	d5322 <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d531c:	2900      	cmp	r1, #0
   d531e:	da01      	bge.n	d5324 <_ZN5Print5printEli+0x24>
   d5320:	e004      	b.n	d532c <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d5322:	b2d2      	uxtb	r2, r2
  }
}
   d5324:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d5328:	f7ff bfbb 	b.w	d52a2 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d532c:	212d      	movs	r1, #45	; 0x2d
   d532e:	f7ff ff9f 	bl	d5270 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d5332:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d5334:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d5336:	4271      	negs	r1, r6
   d5338:	4638      	mov	r0, r7
   d533a:	f7ff ffb2 	bl	d52a2 <_ZN5Print11printNumberEmh>
   d533e:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d5340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5344 <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d5344:	f7ff bfdc 	b.w	d5300 <_ZN5Print5printEli>

000d5348 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5348:	4b01      	ldr	r3, [pc, #4]	; (d5350 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d534a:	4a02      	ldr	r2, [pc, #8]	; (d5354 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d534c:	601a      	str	r2, [r3, #0]
   d534e:	4770      	bx	lr
   d5350:	2003e3b4 	.word	0x2003e3b4
   d5354:	000d6a77 	.word	0x000d6a77

000d5358 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   d5358:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d535a:	2000      	movs	r0, #0
   d535c:	f7ff fcbc 	bl	d4cd8 <spark_sync_time_pending>
   d5360:	b128      	cbz	r0, d536e <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5362:	f7ff fca1 	bl	d4ca8 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d5366:	f080 0001 	eor.w	r0, r0, #1
   d536a:	b2c0      	uxtb	r0, r0
   d536c:	bd08      	pop	{r3, pc}
   d536e:	2001      	movs	r0, #1
    }
   d5370:	bd08      	pop	{r3, pc}

000d5372 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d5372:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d5374:	2000      	movs	r0, #0
   d5376:	f7ff fae1 	bl	d493c <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d537a:	4604      	mov	r4, r0
   d537c:	b968      	cbnz	r0, d539a <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d537e:	f7ff fbdd 	bl	d4b3c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d5382:	2801      	cmp	r0, #1
   d5384:	d10b      	bne.n	d539e <_ZN9TimeClass7isValidEv+0x2c>
   d5386:	4620      	mov	r0, r4
   d5388:	f7ff fc00 	bl	d4b8c <system_thread_get_state>
   d538c:	b938      	cbnz	r0, d539e <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d538e:	f7ff ffe3 	bl	d5358 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d5392:	b930      	cbnz	r0, d53a2 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d5394:	f7ff fc70 	bl	d4c78 <spark_process>
   d5398:	e7f9      	b.n	d538e <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d539a:	2001      	movs	r0, #1
   d539c:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d539e:	2000      	movs	r0, #0
   d53a0:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d53a2:	f7ff ffd9 	bl	d5358 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d53a6:	2000      	movs	r0, #0
   d53a8:	f7ff fac8 	bl	d493c <HAL_RTC_Time_Is_Valid>
   d53ac:	3000      	adds	r0, #0
   d53ae:	bf18      	it	ne
   d53b0:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d53b2:	bd10      	pop	{r4, pc}

000d53b4 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d53b4:	b508      	push	{r3, lr}
    (void)isValid();
   d53b6:	f7ff ffdc 	bl	d5372 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d53ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d53be:	f7ff bab5 	b.w	d492c <HAL_RTC_Get_UnixTime>
	...

000d53c4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d53c4:	4b02      	ldr	r3, [pc, #8]	; (d53d0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d53c6:	681a      	ldr	r2, [r3, #0]
   d53c8:	4b02      	ldr	r3, [pc, #8]	; (d53d4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d53ca:	601a      	str	r2, [r3, #0]
   d53cc:	4770      	bx	lr
   d53ce:	bf00      	nop
   d53d0:	2003e2cc 	.word	0x2003e2cc
   d53d4:	2003e3b8 	.word	0x2003e3b8

000d53d8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d53d8:	2100      	movs	r1, #0
   d53da:	f7ff bbbf 	b.w	d4b5c <system_delay_ms>

000d53de <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d53de:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d53e0:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d53e2:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d53e4:	b113      	cbz	r3, d53ec <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d53e6:	2203      	movs	r2, #3
   d53e8:	4601      	mov	r1, r0
   d53ea:	4798      	blx	r3
    }
   d53ec:	4620      	mov	r0, r4
   d53ee:	bd10      	pop	{r4, pc}

000d53f0 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d53f0:	b510      	push	{r4, lr}
   d53f2:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d53f4:	f7ff fff3 	bl	d53de <_ZNSt14_Function_baseD1Ev>
   d53f8:	4620      	mov	r0, r4
   d53fa:	bd10      	pop	{r4, pc}

000d53fc <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d53fc:	b513      	push	{r0, r1, r4, lr}
   d53fe:	460b      	mov	r3, r1
   d5400:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5402:	c803      	ldmia	r0, {r0, r1}
   d5404:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5408:	e893 0003 	ldmia.w	r3, {r0, r1}
   d540c:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5410:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d5414:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d5418:	b002      	add	sp, #8
   d541a:	bd10      	pop	{r4, pc}

000d541c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d541c:	4803      	ldr	r0, [pc, #12]	; (d542c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d541e:	4a04      	ldr	r2, [pc, #16]	; (d5430 <_GLOBAL__sub_I_RGB+0x14>)
   d5420:	4904      	ldr	r1, [pc, #16]	; (d5434 <_GLOBAL__sub_I_RGB+0x18>)
   d5422:	2300      	movs	r3, #0
   d5424:	6083      	str	r3, [r0, #8]
   d5426:	f001 b82f 	b.w	d6488 <__aeabi_atexit>
   d542a:	bf00      	nop
   d542c:	2003e3bc 	.word	0x2003e3bc
   d5430:	2003e334 	.word	0x2003e334
   d5434:	000d53f1 	.word	0x000d53f1

000d5438 <_ZN14CellularSignalD1Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d5438:	4770      	bx	lr

000d543a <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d543a:	7d00      	ldrb	r0, [r0, #20]
   d543c:	4770      	bx	lr
	...

000d5440 <_ZNK14CellularSignal16getStrengthValueEv>:
    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d5440:	7d03      	ldrb	r3, [r0, #20]
   d5442:	b11b      	cbz	r3, d544c <_ZNK14CellularSignal16getStrengthValueEv+0xc>
   d5444:	6983      	ldr	r3, [r0, #24]
   d5446:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d544a:	d102      	bne.n	d5452 <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
   d544c:	ed9f 0a05 	vldr	s0, [pc, #20]	; d5464 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d5450:	4770      	bx	lr
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
   d5452:	ee07 3a90 	vmov	s15, r3
   d5456:	ed9f 7a04 	vldr	s14, [pc, #16]	; d5468 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
   d545a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d545e:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d5462:	4770      	bx	lr
   d5464:	00000000 	.word	0x00000000
   d5468:	42c80000 	.word	0x42c80000

000d546c <_ZNK14CellularSignal15getQualityValueEv>:
    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d546c:	7d03      	ldrb	r3, [r0, #20]
   d546e:	b11b      	cbz	r3, d5478 <_ZNK14CellularSignal15getQualityValueEv+0xc>
   d5470:	6a03      	ldr	r3, [r0, #32]
   d5472:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d5476:	d102      	bne.n	d547e <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
   d5478:	ed9f 0a05 	vldr	s0, [pc, #20]	; d5490 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d547c:	4770      	bx	lr
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
   d547e:	ee07 3a90 	vmov	s15, r3
   d5482:	ed9f 7a04 	vldr	s14, [pc, #16]	; d5494 <_ZNK14CellularSignal15getQualityValueEv+0x28>
   d5486:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d548a:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d548e:	4770      	bx	lr
   d5490:	00000000 	.word	0x00000000
   d5494:	42c80000 	.word	0x42c80000

000d5498 <_ZNK14CellularSignal7printToER5Print>:

size_t CellularSignal::printTo(Print& p) const
{
   d5498:	b570      	push	{r4, r5, r6, lr}
   d549a:	460d      	mov	r5, r1
   d549c:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d549e:	220a      	movs	r2, #10
   d54a0:	6881      	ldr	r1, [r0, #8]
   d54a2:	4628      	mov	r0, r5
   d54a4:	f7ff ff4e 	bl	d5344 <_ZN5Print5printEii>
    n += p.print(',');
   d54a8:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d54aa:	4604      	mov	r4, r0
    n += p.print(',');
   d54ac:	4628      	mov	r0, r5
   d54ae:	f7ff fedf 	bl	d5270 <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
   d54b2:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d54b4:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
   d54b6:	68f1      	ldr	r1, [r6, #12]
   d54b8:	4628      	mov	r0, r5
   d54ba:	f7ff ff43 	bl	d5344 <_ZN5Print5printEii>
    return n;
}
   d54be:	4420      	add	r0, r4
   d54c0:	bd70      	pop	{r4, r5, r6, pc}

000d54c2 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d54c2:	f1a0 0004 	sub.w	r0, r0, #4
   d54c6:	f7ff bfe7 	b.w	d5498 <_ZNK14CellularSignal7printToER5Print>

000d54ca <_ZN14CellularSignalD0Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d54ca:	b510      	push	{r4, lr}
   d54cc:	2128      	movs	r1, #40	; 0x28
   d54ce:	4604      	mov	r4, r0
   d54d0:	f000 ffdf 	bl	d6492 <_ZdlPvj>
   d54d4:	4620      	mov	r0, r4
   d54d6:	bd10      	pop	{r4, pc}

000d54d8 <_ZNK14CellularSignal10getQualityEv>:
    return 0.0f;
}

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d54d8:	7d03      	ldrb	r3, [r0, #20]
   d54da:	b17b      	cbz	r3, d54fc <_ZNK14CellularSignal10getQualityEv+0x24>
   d54dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d54de:	2b00      	cmp	r3, #0
   d54e0:	db0c      	blt.n	d54fc <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d54e2:	ee07 3a90 	vmov	s15, r3
   d54e6:	eddf 6a07 	vldr	s13, [pc, #28]	; d5504 <_ZNK14CellularSignal10getQualityEv+0x2c>
   d54ea:	ed9f 0a07 	vldr	s0, [pc, #28]	; d5508 <_ZNK14CellularSignal10getQualityEv+0x30>
   d54ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d54f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d54f6:	ee27 0a80 	vmul.f32	s0, s15, s0
   d54fa:	4770      	bx	lr
    }

    return -1.0f;
   d54fc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d5500:	4770      	bx	lr
   d5502:	bf00      	nop
   d5504:	477fff00 	.word	0x477fff00
   d5508:	42c80000 	.word	0x42c80000

000d550c <_ZNK14CellularSignal11getStrengthEv>:
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d550c:	7d03      	ldrb	r3, [r0, #20]
   d550e:	b17b      	cbz	r3, d5530 <_ZNK14CellularSignal11getStrengthEv+0x24>
   d5510:	69c3      	ldr	r3, [r0, #28]
   d5512:	2b00      	cmp	r3, #0
   d5514:	db0c      	blt.n	d5530 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d5516:	ee07 3a90 	vmov	s15, r3
   d551a:	eddf 6a07 	vldr	s13, [pc, #28]	; d5538 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d551e:	ed9f 0a07 	vldr	s0, [pc, #28]	; d553c <_ZNK14CellularSignal11getStrengthEv+0x30>
   d5522:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d5526:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d552a:	ee27 0a80 	vmul.f32	s0, s15, s0
   d552e:	4770      	bx	lr
    }

    return -1.0f;
   d5530:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d5534:	4770      	bx	lr
   d5536:	bf00      	nop
   d5538:	477fff00 	.word	0x477fff00
   d553c:	42c80000 	.word	0x42c80000

000d5540 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
   d5540:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d5542:	460d      	mov	r5, r1
   d5544:	f100 0410 	add.w	r4, r0, #16
   d5548:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d554a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d554c:	e895 0003 	ldmia.w	r5, {r0, r1}
   d5550:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
   d5554:	2001      	movs	r0, #1
   d5556:	bd30      	pop	{r4, r5, pc}

000d5558 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5558:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d555a:	4b0c      	ldr	r3, [pc, #48]	; (d558c <serialEventRun+0x34>)
   d555c:	b133      	cbz	r3, d556c <serialEventRun+0x14>
   d555e:	f000 fbfd 	bl	d5d5c <_Z16_fetch_usbserialv>
   d5562:	6803      	ldr	r3, [r0, #0]
   d5564:	691b      	ldr	r3, [r3, #16]
   d5566:	4798      	blx	r3
   d5568:	2800      	cmp	r0, #0
   d556a:	dc09      	bgt.n	d5580 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d556c:	4b08      	ldr	r3, [pc, #32]	; (d5590 <serialEventRun+0x38>)
   d556e:	b163      	cbz	r3, d558a <serialEventRun+0x32>
   d5570:	f000 fcf8 	bl	d5f64 <_Z22__fetch_global_Serial1v>
   d5574:	6803      	ldr	r3, [r0, #0]
   d5576:	691b      	ldr	r3, [r3, #16]
   d5578:	4798      	blx	r3
   d557a:	2800      	cmp	r0, #0
   d557c:	dc03      	bgt.n	d5586 <serialEventRun+0x2e>
   d557e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5580:	f3af 8000 	nop.w
   d5584:	e7f2      	b.n	d556c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5586:	f3af 8000 	nop.w
   d558a:	bd08      	pop	{r3, pc}
	...

000d5594 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5594:	b508      	push	{r3, lr}
	serialEventRun();
   d5596:	f7ff ffdf 	bl	d5558 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d559a:	f7ff f9bf 	bl	d491c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d559e:	4b01      	ldr	r3, [pc, #4]	; (d55a4 <_post_loop+0x10>)
   d55a0:	6018      	str	r0, [r3, #0]
   d55a2:	bd08      	pop	{r3, pc}
   d55a4:	2003e734 	.word	0x2003e734

000d55a8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d55a8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d55aa:	2300      	movs	r3, #0
   d55ac:	9300      	str	r3, [sp, #0]
   d55ae:	461a      	mov	r2, r3
   d55b0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d55b4:	f7ff fafc 	bl	d4bb0 <system_ctrl_set_result>
}
   d55b8:	b003      	add	sp, #12
   d55ba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d55c0 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d55c0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d55c2:	8843      	ldrh	r3, [r0, #2]
   d55c4:	2b0a      	cmp	r3, #10
   d55c6:	d008      	beq.n	d55da <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d55c8:	2b50      	cmp	r3, #80	; 0x50
   d55ca:	d109      	bne.n	d55e0 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d55cc:	4b09      	ldr	r3, [pc, #36]	; (d55f4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d55ce:	681b      	ldr	r3, [r3, #0]
   d55d0:	b13b      	cbz	r3, d55e2 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d55d2:	b003      	add	sp, #12
   d55d4:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d55d8:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d55da:	f7ff ffe5 	bl	d55a8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d55de:	e006      	b.n	d55ee <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d55e0:	2300      	movs	r3, #0
   d55e2:	9300      	str	r3, [sp, #0]
   d55e4:	461a      	mov	r2, r3
   d55e6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d55ea:	f7ff fae1 	bl	d4bb0 <system_ctrl_set_result>
        break;
    }
}
   d55ee:	b003      	add	sp, #12
   d55f0:	f85d fb04 	ldr.w	pc, [sp], #4
   d55f4:	2003e3cc 	.word	0x2003e3cc

000d55f8 <module_user_init_hook>:

void module_user_init_hook()
{
   d55f8:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d55fa:	f7ff f987 	bl	d490c <HAL_RNG_GetRandomNumber>
   d55fe:	4604      	mov	r4, r0
    srand(seed);
   d5600:	f001 f8ca 	bl	d6798 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5604:	4b07      	ldr	r3, [pc, #28]	; (d5624 <module_user_init_hook+0x2c>)
   d5606:	b113      	cbz	r3, d560e <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d5608:	4620      	mov	r0, r4
   d560a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d560e:	2100      	movs	r1, #0
   d5610:	4804      	ldr	r0, [pc, #16]	; (d5624 <module_user_init_hook+0x2c>)
   d5612:	f7ff fb69 	bl	d4ce8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5616:	2100      	movs	r1, #0
   d5618:	4803      	ldr	r0, [pc, #12]	; (d5628 <module_user_init_hook+0x30>)
}
   d561a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d561e:	f7ff babd 	b.w	d4b9c <system_ctrl_set_app_request_handler>
   d5622:	bf00      	nop
   d5624:	00000000 	.word	0x00000000
   d5628:	000d55c1 	.word	0x000d55c1

000d562c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d562c:	4770      	bx	lr

000d562e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d562e:	2000      	movs	r0, #0
   d5630:	4770      	bx	lr

000d5632 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5632:	b510      	push	{r4, lr}
   d5634:	2110      	movs	r1, #16
   d5636:	4604      	mov	r4, r0
   d5638:	f000 ff2b 	bl	d6492 <_ZdlPvj>
   d563c:	4620      	mov	r0, r4
   d563e:	bd10      	pop	{r4, pc}

000d5640 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d5640:	b508      	push	{r3, lr}
      { delete this; }
   d5642:	b108      	cbz	r0, d5648 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d5644:	f7ff fff5 	bl	d5632 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d5648:	bd08      	pop	{r3, pc}

000d564a <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d564a:	2200      	movs	r2, #0
   d564c:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d564e:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5650:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d5654:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5656:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d565a:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d565c:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d565e:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5660:	680c      	ldr	r4, [r1, #0]
   d5662:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5664:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d5666:	bd10      	pop	{r4, pc}

000d5668 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d5668:	b510      	push	{r4, lr}
   d566a:	4604      	mov	r4, r0
    free((void*)msg_);
   d566c:	6800      	ldr	r0, [r0, #0]
   d566e:	f7ff fb4b 	bl	d4d08 <free>
}
   d5672:	4620      	mov	r0, r4
   d5674:	bd10      	pop	{r4, pc}

000d5676 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d5676:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d5678:	68c4      	ldr	r4, [r0, #12]
   d567a:	b1f4      	cbz	r4, d56ba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d567c:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d567e:	2b02      	cmp	r3, #2
   d5680:	d103      	bne.n	d568a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d5682:	f104 000c 	add.w	r0, r4, #12
   d5686:	f7ff ffef 	bl	d5668 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d568a:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d568c:	b135      	cbz	r5, d569c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d568e:	4628      	mov	r0, r5
   d5690:	f7ff fea5 	bl	d53de <_ZNSt14_Function_baseD1Ev>
   d5694:	2110      	movs	r1, #16
   d5696:	4628      	mov	r0, r5
   d5698:	f000 fefb 	bl	d6492 <_ZdlPvj>
   d569c:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d569e:	b135      	cbz	r5, d56ae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d56a0:	4628      	mov	r0, r5
   d56a2:	f7ff fe9c 	bl	d53de <_ZNSt14_Function_baseD1Ev>
   d56a6:	2110      	movs	r1, #16
   d56a8:	4628      	mov	r0, r5
   d56aa:	f000 fef2 	bl	d6492 <_ZdlPvj>
   d56ae:	4620      	mov	r0, r4
   d56b0:	2114      	movs	r1, #20
   d56b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d56b6:	f000 beec 	b.w	d6492 <_ZdlPvj>
   d56ba:	bd38      	pop	{r3, r4, r5, pc}

000d56bc <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d56bc:	b513      	push	{r0, r1, r4, lr}
   d56be:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d56c0:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d56c4:	2300      	movs	r3, #0
   d56c6:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d56c8:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d56ca:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d56cc:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d56ce:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d56d0:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d56d2:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d56d4:	f7fe fdd6 	bl	d4284 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d56d8:	4620      	mov	r0, r4
   d56da:	b002      	add	sp, #8
   d56dc:	bd10      	pop	{r4, pc}

000d56de <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d56de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d56e0:	460c      	mov	r4, r1
   d56e2:	ad02      	add	r5, sp, #8
   d56e4:	f854 3b04 	ldr.w	r3, [r4], #4
   d56e8:	f845 3d08 	str.w	r3, [r5, #-8]!
   d56ec:	4606      	mov	r6, r0
   d56ee:	460f      	mov	r7, r1
   d56f0:	a801      	add	r0, sp, #4
   d56f2:	4621      	mov	r1, r4
   d56f4:	f7ff fd86 	bl	d5204 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d56f8:	4629      	mov	r1, r5
   d56fa:	4630      	mov	r0, r6
   d56fc:	f7ff ffde 	bl	d56bc <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5700:	a801      	add	r0, sp, #4
   d5702:	f7fe fdbf 	bl	d4284 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5706:	4620      	mov	r0, r4
   d5708:	f7fe fdbc 	bl	d4284 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d570c:	4638      	mov	r0, r7
   d570e:	2108      	movs	r1, #8
   d5710:	f000 febf 	bl	d6492 <_ZdlPvj>
        return p;
    }
   d5714:	4630      	mov	r0, r6
   d5716:	b003      	add	sp, #12
   d5718:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d571c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d571c:	b538      	push	{r3, r4, r5, lr}
   d571e:	2300      	movs	r3, #0
   d5720:	4604      	mov	r4, r0
   d5722:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5724:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5726:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5728:	f7fe fcb5 	bl	d4096 <_Znwj>
   d572c:	b128      	cbz	r0, d573a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d572e:	2301      	movs	r3, #1
   d5730:	6043      	str	r3, [r0, #4]
   d5732:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d5734:	4b02      	ldr	r3, [pc, #8]	; (d5740 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d5736:	6003      	str	r3, [r0, #0]
   d5738:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d573a:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d573c:	4620      	mov	r0, r4
   d573e:	bd38      	pop	{r3, r4, r5, pc}
   d5740:	000d6b4c 	.word	0x000d6b4c

000d5744 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5744:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5746:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5748:	b90a      	cbnz	r2, d574e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d574a:	f000 fea4 	bl	d6496 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d574e:	68c3      	ldr	r3, [r0, #12]
    }
   d5750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5754:	4718      	bx	r3

000d5756 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5756:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5758:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d575a:	f100 0110 	add.w	r1, r0, #16
   d575e:	f7ff fff1 	bl	d5744 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5762:	bd08      	pop	{r3, pc}

000d5764 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5764:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5766:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5768:	b90a      	cbnz	r2, d576e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d576a:	f000 fe94 	bl	d6496 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d576e:	68c3      	ldr	r3, [r0, #12]
    }
   d5770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5774:	4718      	bx	r3

000d5776 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5776:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5778:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d577a:	f100 0110 	add.w	r1, r0, #16
   d577e:	f7ff fff1 	bl	d5764 <_ZNKSt8functionIFvRKbEEclES1_>
   d5782:	bd08      	pop	{r3, pc}

000d5784 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5784:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5786:	2300      	movs	r3, #0
   d5788:	6083      	str	r3, [r0, #8]
   d578a:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d578c:	4604      	mov	r4, r0
   d578e:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5790:	b12b      	cbz	r3, d579e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5792:	2202      	movs	r2, #2
   d5794:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5796:	68eb      	ldr	r3, [r5, #12]
   d5798:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d579a:	68ab      	ldr	r3, [r5, #8]
   d579c:	60a3      	str	r3, [r4, #8]
	}
    }
   d579e:	4620      	mov	r0, r4
   d57a0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d57a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d57a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d57a6:	b089      	sub	sp, #36	; 0x24
   d57a8:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d57aa:	4668      	mov	r0, sp
   d57ac:	f7ff ff4d 	bl	d564a <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d57b0:	2300      	movs	r3, #0
   d57b2:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d57b6:	f04f 0202 	mov.w	r2, #2
   d57ba:	e8d4 3f4f 	ldrexb	r3, [r4]
   d57be:	2b00      	cmp	r3, #0
   d57c0:	d103      	bne.n	d57ca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d57c2:	e8c4 2f41 	strexb	r1, r2, [r4]
   d57c6:	2900      	cmp	r1, #0
   d57c8:	d1f7      	bne.n	d57ba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d57ca:	d002      	beq.n	d57d2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d57cc:	f88d 3008 	strb.w	r3, [sp, #8]
   d57d0:	e063      	b.n	d589a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d57d2:	f114 050c 	adds.w	r5, r4, #12
   d57d6:	d003      	beq.n	d57e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d57d8:	4669      	mov	r1, sp
   d57da:	4628      	mov	r0, r5
   d57dc:	f7ff ff35 	bl	d564a <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d57e0:	f3bf 8f5f 	dmb	sy
   d57e4:	2301      	movs	r3, #1
   d57e6:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d57e8:	2000      	movs	r0, #0
   d57ea:	f104 0308 	add.w	r3, r4, #8
   d57ee:	f3bf 8f5f 	dmb	sy
   d57f2:	e853 6f00 	ldrex	r6, [r3]
   d57f6:	e843 0200 	strex	r2, r0, [r3]
   d57fa:	2a00      	cmp	r2, #0
   d57fc:	d1f9      	bne.n	d57f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d57fe:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5802:	2e00      	cmp	r6, #0
   d5804:	d049      	beq.n	d589a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5806:	f7ff f9b1 	bl	d4b6c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d580a:	b120      	cbz	r0, d5816 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d580c:	4629      	mov	r1, r5
   d580e:	4630      	mov	r0, r6
   d5810:	f7ff ff98 	bl	d5744 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5814:	e03a      	b.n	d588c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5816:	4631      	mov	r1, r6
   d5818:	a802      	add	r0, sp, #8
   d581a:	f7ff ffb3 	bl	d5784 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d581e:	68e0      	ldr	r0, [r4, #12]
   d5820:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5824:	b108      	cbz	r0, d582a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d5826:	f000 fff1 	bl	d680c <strdup>
   d582a:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d582c:	2010      	movs	r0, #16
   d582e:	f8ad 501c 	strh.w	r5, [sp, #28]
   d5832:	f7fe fc30 	bl	d4096 <_Znwj>
   d5836:	4605      	mov	r5, r0
   d5838:	b1e8      	cbz	r0, d5876 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d583a:	2700      	movs	r7, #0
   d583c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d583e:	2018      	movs	r0, #24
   d5840:	f7fe fc29 	bl	d4096 <_Znwj>
   d5844:	4604      	mov	r4, r0
   d5846:	b188      	cbz	r0, d586c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5848:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d584a:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d584c:	a802      	add	r0, sp, #8
   d584e:	f7ff fdd5 	bl	d53fc <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5852:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5854:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5856:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5858:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d585a:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d585c:	a906      	add	r1, sp, #24
   d585e:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5860:	60e3      	str	r3, [r4, #12]
   d5862:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5866:	9205      	str	r2, [sp, #20]
   d5868:	f7ff feef 	bl	d564a <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d586c:	4b0d      	ldr	r3, [pc, #52]	; (d58a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d586e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5870:	4b0d      	ldr	r3, [pc, #52]	; (d58a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5872:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5874:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d5876:	a806      	add	r0, sp, #24
   d5878:	f7ff fef6 	bl	d5668 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d587c:	a802      	add	r0, sp, #8
   d587e:	f7ff fdae 	bl	d53de <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5882:	2200      	movs	r2, #0
   d5884:	4629      	mov	r1, r5
   d5886:	4809      	ldr	r0, [pc, #36]	; (d58ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d5888:	f7ff f978 	bl	d4b7c <application_thread_invoke>
   d588c:	4630      	mov	r0, r6
   d588e:	f7ff fda6 	bl	d53de <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5892:	2110      	movs	r1, #16
   d5894:	4630      	mov	r0, r6
   d5896:	f000 fdfc 	bl	d6492 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d589a:	4668      	mov	r0, sp
   d589c:	f7ff fee4 	bl	d5668 <_ZN8particle5ErrorD1Ev>
    }
   d58a0:	b009      	add	sp, #36	; 0x24
   d58a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d58a4:	000d5757 	.word	0x000d5757
   d58a8:	000d59cd 	.word	0x000d59cd
   d58ac:	000d5fb1 	.word	0x000d5fb1

000d58b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d58b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d58b4:	b08b      	sub	sp, #44	; 0x2c
   d58b6:	4606      	mov	r6, r0
   d58b8:	460f      	mov	r7, r1
   d58ba:	4690      	mov	r8, r2
   d58bc:	4699      	mov	r9, r3
   d58be:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d58c2:	f7ff f9f1 	bl	d4ca8 <spark_cloud_flag_connected>
   d58c6:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
   d58c8:	4683      	mov	fp, r0
   d58ca:	bb30      	cbnz	r0, d591a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d58cc:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d58d0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d58d2:	a905      	add	r1, sp, #20
   d58d4:	4628      	mov	r0, r5
   d58d6:	f8ad 3018 	strh.w	r3, [sp, #24]
   d58da:	f7ff feb6 	bl	d564a <_ZN8particle5ErrorC1EOS0_>
   d58de:	2014      	movs	r0, #20
   d58e0:	f7fe fbd9 	bl	d4096 <_Znwj>
   d58e4:	4604      	mov	r4, r0
   d58e6:	b158      	cbz	r0, d5900 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d58e8:	2302      	movs	r3, #2
   d58ea:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d58ec:	2301      	movs	r3, #1
   d58ee:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d58f0:	f8c0 b004 	str.w	fp, [r0, #4]
   d58f4:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d58f8:	4629      	mov	r1, r5
   d58fa:	300c      	adds	r0, #12
   d58fc:	f7ff fea5 	bl	d564a <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d5900:	4630      	mov	r0, r6
   d5902:	4621      	mov	r1, r4
   d5904:	f840 4b04 	str.w	r4, [r0], #4
   d5908:	f7ff ff08 	bl	d571c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d590c:	4628      	mov	r0, r5
   d590e:	f7ff feab 	bl	d5668 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d5912:	a805      	add	r0, sp, #20
   d5914:	f7ff fea8 	bl	d5668 <_ZN8particle5ErrorD1Ev>
   d5918:	e052      	b.n	d59c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d591a:	2400      	movs	r4, #0
   d591c:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d591e:	2014      	movs	r0, #20
   d5920:	606c      	str	r4, [r5, #4]
   d5922:	60ac      	str	r4, [r5, #8]
   d5924:	9307      	str	r3, [sp, #28]
   d5926:	f7fe fbb6 	bl	d4096 <_Znwj>
   d592a:	4601      	mov	r1, r0
   d592c:	b118      	cbz	r0, d5936 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d592e:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5930:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5932:	6044      	str	r4, [r0, #4]
   d5934:	6084      	str	r4, [r0, #8]
   d5936:	a804      	add	r0, sp, #16
   d5938:	9103      	str	r1, [sp, #12]
   d593a:	f7ff feef 	bl	d571c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d593e:	4b22      	ldr	r3, [pc, #136]	; (d59c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d5940:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d5942:	2008      	movs	r0, #8
   d5944:	f7fe fba7 	bl	d4096 <_Znwj>
   d5948:	4604      	mov	r4, r0
   d594a:	b128      	cbz	r0, d5958 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d594c:	9b03      	ldr	r3, [sp, #12]
   d594e:	f840 3b04 	str.w	r3, [r0], #4
   d5952:	a904      	add	r1, sp, #16
   d5954:	f7ff fc56 	bl	d5204 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5958:	9500      	str	r5, [sp, #0]
   d595a:	fa5f f38a 	uxtb.w	r3, sl
   d595e:	464a      	mov	r2, r9
   d5960:	4641      	mov	r1, r8
   d5962:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d5964:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5966:	f7ff f9a7 	bl	d4cb8 <spark_send_event>
   d596a:	b920      	cbnz	r0, d5976 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d596c:	9b03      	ldr	r3, [sp, #12]
   d596e:	785b      	ldrb	r3, [r3, #1]
   d5970:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5974:	b183      	cbz	r3, d5998 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d5976:	9b03      	ldr	r3, [sp, #12]
   d5978:	9305      	str	r3, [sp, #20]
   d597a:	a904      	add	r1, sp, #16
   d597c:	a806      	add	r0, sp, #24
   d597e:	f7ff fc41 	bl	d5204 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d5982:	a905      	add	r1, sp, #20
   d5984:	4630      	mov	r0, r6
   d5986:	f7ff fe99 	bl	d56bc <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d598a:	a806      	add	r0, sp, #24
   d598c:	f7fe fc7a 	bl	d4284 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5990:	a804      	add	r0, sp, #16
   d5992:	f7fe fc77 	bl	d4284 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5996:	e013      	b.n	d59c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d5998:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d599c:	a905      	add	r1, sp, #20
   d599e:	a803      	add	r0, sp, #12
   d59a0:	9205      	str	r2, [sp, #20]
   d59a2:	f8ad 3018 	strh.w	r3, [sp, #24]
   d59a6:	f7ff fefd 	bl	d57a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d59aa:	a805      	add	r0, sp, #20
   d59ac:	f7ff fe5c 	bl	d5668 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d59b0:	a805      	add	r0, sp, #20
   d59b2:	9909      	ldr	r1, [sp, #36]	; 0x24
   d59b4:	f7ff fe93 	bl	d56de <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d59b8:	a806      	add	r0, sp, #24
   d59ba:	f7fe fc63 	bl	d4284 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d59be:	e7da      	b.n	d5976 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d59c0:	4630      	mov	r0, r6
   d59c2:	b00b      	add	sp, #44	; 0x2c
   d59c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d59c8:	000d5b3d 	.word	0x000d5b3d

000d59cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d59cc:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d59ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d59d0:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d59d2:	d006      	beq.n	d59e2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d59d4:	2a03      	cmp	r2, #3
   d59d6:	d017      	beq.n	d5a08 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d59d8:	2a01      	cmp	r2, #1
   d59da:	d122      	bne.n	d5a22 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d59dc:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d59de:	6003      	str	r3, [r0, #0]
	      break;
   d59e0:	e01f      	b.n	d5a22 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d59e2:	2018      	movs	r0, #24
   d59e4:	680e      	ldr	r6, [r1, #0]
   d59e6:	f7fe fb56 	bl	d4096 <_Znwj>
   d59ea:	4605      	mov	r5, r0
   d59ec:	b150      	cbz	r0, d5a04 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d59ee:	4631      	mov	r1, r6
   d59f0:	f7ff fec8 	bl	d5784 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d59f4:	6930      	ldr	r0, [r6, #16]
   d59f6:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d59fa:	b108      	cbz	r0, d5a00 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d59fc:	f000 ff06 	bl	d680c <strdup>
   d5a00:	6128      	str	r0, [r5, #16]
   d5a02:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5a04:	6025      	str	r5, [r4, #0]
   d5a06:	e00c      	b.n	d5a22 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5a08:	6804      	ldr	r4, [r0, #0]
   d5a0a:	b154      	cbz	r4, d5a22 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d5a0c:	f104 0010 	add.w	r0, r4, #16
   d5a10:	f7ff fe2a 	bl	d5668 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5a14:	4620      	mov	r0, r4
   d5a16:	f7ff fce2 	bl	d53de <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5a1a:	2118      	movs	r1, #24
   d5a1c:	4620      	mov	r0, r4
   d5a1e:	f000 fd38 	bl	d6492 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5a22:	2000      	movs	r0, #0
   d5a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5a26 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5a26:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5a28:	2300      	movs	r3, #0
   d5a2a:	6083      	str	r3, [r0, #8]
   d5a2c:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5a2e:	4604      	mov	r4, r0
   d5a30:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5a32:	b12b      	cbz	r3, d5a40 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5a34:	2202      	movs	r2, #2
   d5a36:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5a38:	68eb      	ldr	r3, [r5, #12]
   d5a3a:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5a3c:	68ab      	ldr	r3, [r5, #8]
   d5a3e:	60a3      	str	r3, [r4, #8]
	}
    }
   d5a40:	4620      	mov	r0, r4
   d5a42:	bd38      	pop	{r3, r4, r5, pc}

000d5a44 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5a44:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5a46:	b570      	push	{r4, r5, r6, lr}
   d5a48:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5a4a:	d006      	beq.n	d5a5a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d5a4c:	2a03      	cmp	r2, #3
   d5a4e:	d011      	beq.n	d5a74 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d5a50:	2a01      	cmp	r2, #1
   d5a52:	d118      	bne.n	d5a86 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5a54:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5a56:	6003      	str	r3, [r0, #0]
	      break;
   d5a58:	e015      	b.n	d5a86 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5a5a:	2014      	movs	r0, #20
   d5a5c:	680e      	ldr	r6, [r1, #0]
   d5a5e:	f7fe fb1a 	bl	d4096 <_Znwj>
   d5a62:	4605      	mov	r5, r0
   d5a64:	b120      	cbz	r0, d5a70 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5a66:	4631      	mov	r1, r6
   d5a68:	f7ff ffdd 	bl	d5a26 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d5a6c:	7c33      	ldrb	r3, [r6, #16]
   d5a6e:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5a70:	6025      	str	r5, [r4, #0]
   d5a72:	e008      	b.n	d5a86 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5a74:	6804      	ldr	r4, [r0, #0]
   d5a76:	b134      	cbz	r4, d5a86 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5a78:	4620      	mov	r0, r4
   d5a7a:	f7ff fcb0 	bl	d53de <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5a7e:	2114      	movs	r1, #20
   d5a80:	4620      	mov	r0, r4
   d5a82:	f000 fd06 	bl	d6492 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5a86:	2000      	movs	r0, #0
   d5a88:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5a8c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d5a8c:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5a8e:	2300      	movs	r3, #0
   d5a90:	b087      	sub	sp, #28
   d5a92:	460c      	mov	r4, r1
   d5a94:	f3bf 8f5f 	dmb	sy
   d5a98:	e850 6f00 	ldrex	r6, [r0]
   d5a9c:	e840 3200 	strex	r2, r3, [r0]
   d5aa0:	2a00      	cmp	r2, #0
   d5aa2:	d1f9      	bne.n	d5a98 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d5aa4:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5aa8:	2e00      	cmp	r6, #0
   d5aaa:	d03f      	beq.n	d5b2c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5aac:	4618      	mov	r0, r3
   d5aae:	f7ff f85d 	bl	d4b6c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5ab2:	4607      	mov	r7, r0
   d5ab4:	b120      	cbz	r0, d5ac0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5ab6:	4621      	mov	r1, r4
   d5ab8:	4630      	mov	r0, r6
   d5aba:	f7ff fe53 	bl	d5764 <_ZNKSt8functionIFvRKbEEclES1_>
   d5abe:	e02e      	b.n	d5b1e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5ac0:	4631      	mov	r1, r6
   d5ac2:	a801      	add	r0, sp, #4
   d5ac4:	f7ff ffaf 	bl	d5a26 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5ac8:	7823      	ldrb	r3, [r4, #0]
   d5aca:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5ace:	2010      	movs	r0, #16
   d5ad0:	f7fe fae1 	bl	d4096 <_Znwj>
   d5ad4:	4605      	mov	r5, r0
   d5ad6:	b1d0      	cbz	r0, d5b0e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5ad8:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5ada:	2014      	movs	r0, #20
   d5adc:	f7fe fadb 	bl	d4096 <_Znwj>
   d5ae0:	4604      	mov	r4, r0
   d5ae2:	b178      	cbz	r0, d5b04 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5ae4:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5ae6:	4601      	mov	r1, r0
   d5ae8:	a801      	add	r0, sp, #4
   d5aea:	f7ff fc87 	bl	d53fc <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5aee:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5af0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5af2:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5af4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5af6:	9203      	str	r2, [sp, #12]
   d5af8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5afa:	60e3      	str	r3, [r4, #12]
   d5afc:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5b00:	9204      	str	r2, [sp, #16]
   d5b02:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5b04:	4b0a      	ldr	r3, [pc, #40]	; (d5b30 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d5b06:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5b08:	4b0a      	ldr	r3, [pc, #40]	; (d5b34 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5b0a:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5b0c:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5b0e:	a801      	add	r0, sp, #4
   d5b10:	f7ff fc65 	bl	d53de <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5b14:	2200      	movs	r2, #0
   d5b16:	4629      	mov	r1, r5
   d5b18:	4807      	ldr	r0, [pc, #28]	; (d5b38 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d5b1a:	f7ff f82f 	bl	d4b7c <application_thread_invoke>
   d5b1e:	4630      	mov	r0, r6
   d5b20:	f7ff fc5d 	bl	d53de <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5b24:	2110      	movs	r1, #16
   d5b26:	4630      	mov	r0, r6
   d5b28:	f000 fcb3 	bl	d6492 <_ZdlPvj>
        }
    }
   d5b2c:	b007      	add	sp, #28
   d5b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5b30:	000d5777 	.word	0x000d5777
   d5b34:	000d5a45 	.word	0x000d5a45
   d5b38:	000d5fb1 	.word	0x000d5fb1

000d5b3c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5b3c:	b530      	push	{r4, r5, lr}
   d5b3e:	b085      	sub	sp, #20
   d5b40:	4604      	mov	r4, r0
   d5b42:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5b44:	4668      	mov	r0, sp
   d5b46:	4611      	mov	r1, r2
   d5b48:	f7ff fdc9 	bl	d56de <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5b4c:	b17c      	cbz	r4, d5b6e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d5b4e:	b224      	sxth	r4, r4
   d5b50:	4628      	mov	r0, r5
   d5b52:	b10d      	cbz	r5, d5b58 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d5b54:	f000 fe5a 	bl	d680c <strdup>
   d5b58:	9002      	str	r0, [sp, #8]
   d5b5a:	a902      	add	r1, sp, #8
   d5b5c:	4668      	mov	r0, sp
   d5b5e:	f8ad 400c 	strh.w	r4, [sp, #12]
   d5b62:	f7ff fe1f 	bl	d57a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5b66:	a802      	add	r0, sp, #8
   d5b68:	f7ff fd7e 	bl	d5668 <_ZN8particle5ErrorD1Ev>
   d5b6c:	e01d      	b.n	d5baa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d5b6e:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5b70:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5b74:	f04f 0201 	mov.w	r2, #1
   d5b78:	e8d0 3f4f 	ldrexb	r3, [r0]
   d5b7c:	42a3      	cmp	r3, r4
   d5b7e:	d103      	bne.n	d5b88 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d5b80:	e8c0 2f41 	strexb	r1, r2, [r0]
   d5b84:	2900      	cmp	r1, #0
   d5b86:	d1f7      	bne.n	d5b78 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d5b88:	d002      	beq.n	d5b90 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d5b8a:	f88d 3008 	strb.w	r3, [sp, #8]
   d5b8e:	e00c      	b.n	d5baa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d5b90:	f110 010c 	adds.w	r1, r0, #12
   d5b94:	f04f 0301 	mov.w	r3, #1
   d5b98:	bf18      	it	ne
   d5b9a:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5b9c:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d5ba0:	3004      	adds	r0, #4
   d5ba2:	f800 3c03 	strb.w	r3, [r0, #-3]
   d5ba6:	f7ff ff71 	bl	d5a8c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d5baa:	a801      	add	r0, sp, #4
   d5bac:	f7fe fb6a 	bl	d4284 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d5bb0:	b005      	add	sp, #20
   d5bb2:	bd30      	pop	{r4, r5, pc}

000d5bb4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5bb4:	4770      	bx	lr

000d5bb6 <_ZN9IPAddressD0Ev>:
   d5bb6:	b510      	push	{r4, lr}
   d5bb8:	2118      	movs	r1, #24
   d5bba:	4604      	mov	r4, r0
   d5bbc:	f000 fc69 	bl	d6492 <_ZdlPvj>
   d5bc0:	4620      	mov	r0, r4
   d5bc2:	bd10      	pop	{r4, pc}

000d5bc4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5bc6:	7d03      	ldrb	r3, [r0, #20]
   d5bc8:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5bca:	b08d      	sub	sp, #52	; 0x34
   d5bcc:	460e      	mov	r6, r1
   d5bce:	f100 0704 	add.w	r7, r0, #4
   d5bd2:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5bd6:	d002      	beq.n	d5bde <_ZNK9IPAddress7printToER5Print+0x1a>
   d5bd8:	f100 0508 	add.w	r5, r0, #8
   d5bdc:	e018      	b.n	d5c10 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5bde:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5be0:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5be2:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5be6:	232f      	movs	r3, #47	; 0x2f
   d5be8:	462a      	mov	r2, r5
   d5bea:	200a      	movs	r0, #10
   d5bec:	f7fe fee6 	bl	d49bc <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5bf0:	4628      	mov	r0, r5
   d5bf2:	f000 fe26 	bl	d6842 <strlen>
   d5bf6:	6833      	ldr	r3, [r6, #0]
   d5bf8:	4602      	mov	r2, r0
   d5bfa:	68db      	ldr	r3, [r3, #12]
   d5bfc:	4629      	mov	r1, r5
   d5bfe:	4630      	mov	r0, r6
   d5c00:	4798      	blx	r3
   d5c02:	e00f      	b.n	d5c24 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5c04:	b124      	cbz	r4, d5c10 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5c06:	212e      	movs	r1, #46	; 0x2e
   d5c08:	4630      	mov	r0, r6
   d5c0a:	f7ff fb31 	bl	d5270 <_ZN5Print5printEc>
   d5c0e:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d5c10:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5c14:	220a      	movs	r2, #10
   d5c16:	4630      	mov	r0, r6
   d5c18:	f7ff fb70 	bl	d52fc <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5c1c:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5c1e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5c20:	d1f0      	bne.n	d5c04 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5c22:	4620      	mov	r0, r4
    }
    return n;
}
   d5c24:	b00d      	add	sp, #52	; 0x34
   d5c26:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5c28 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5c28:	b510      	push	{r4, lr}
   d5c2a:	4b05      	ldr	r3, [pc, #20]	; (d5c40 <_ZN9IPAddressC1Ev+0x18>)
   d5c2c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5c2e:	2211      	movs	r2, #17
   d5c30:	f840 3b04 	str.w	r3, [r0], #4
   d5c34:	2100      	movs	r1, #0
   d5c36:	f000 fda6 	bl	d6786 <memset>
{
    clear();
}
   d5c3a:	4620      	mov	r0, r4
   d5c3c:	bd10      	pop	{r4, pc}
   d5c3e:	bf00      	nop
   d5c40:	000d6b68 	.word	0x000d6b68

000d5c44 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5c44:	4603      	mov	r3, r0
   d5c46:	4a07      	ldr	r2, [pc, #28]	; (d5c64 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5c48:	b510      	push	{r4, lr}
   d5c4a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5c4e:	f101 0210 	add.w	r2, r1, #16
   d5c52:	f851 4b04 	ldr.w	r4, [r1], #4
   d5c56:	f843 4b04 	str.w	r4, [r3], #4
   d5c5a:	4291      	cmp	r1, r2
   d5c5c:	d1f9      	bne.n	d5c52 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5c5e:	780a      	ldrb	r2, [r1, #0]
   d5c60:	701a      	strb	r2, [r3, #0]
}
   d5c62:	bd10      	pop	{r4, pc}
   d5c64:	000d6b68 	.word	0x000d6b68

000d5c68 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5c68:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5c6a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5c6e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5c72:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5c76:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5c7a:	2304      	movs	r3, #4
   d5c7c:	6041      	str	r1, [r0, #4]
   d5c7e:	7503      	strb	r3, [r0, #20]
   d5c80:	bd10      	pop	{r4, pc}

000d5c82 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5c82:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5c84:	780d      	ldrb	r5, [r1, #0]
   d5c86:	788b      	ldrb	r3, [r1, #2]
   d5c88:	784a      	ldrb	r2, [r1, #1]
   d5c8a:	78c9      	ldrb	r1, [r1, #3]
   d5c8c:	9100      	str	r1, [sp, #0]
   d5c8e:	4629      	mov	r1, r5
   d5c90:	f7ff ffea 	bl	d5c68 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5c94:	b003      	add	sp, #12
   d5c96:	bd30      	pop	{r4, r5, pc}

000d5c98 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5c98:	7441      	strb	r1, [r0, #17]
   d5c9a:	4770      	bx	lr

000d5c9c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5c9c:	4770      	bx	lr

000d5c9e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d5c9e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5ca0:	2100      	movs	r1, #0
   d5ca2:	7c00      	ldrb	r0, [r0, #16]
   d5ca4:	f7fe ff32 	bl	d4b0c <HAL_USB_USART_Receive_Data>
}
   d5ca8:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5cac:	bf28      	it	cs
   d5cae:	f04f 30ff 	movcs.w	r0, #4294967295
   d5cb2:	bd08      	pop	{r3, pc}

000d5cb4 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5cb4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5cb6:	2101      	movs	r1, #1
   d5cb8:	7c00      	ldrb	r0, [r0, #16]
   d5cba:	f7fe ff27 	bl	d4b0c <HAL_USB_USART_Receive_Data>
}
   d5cbe:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5cc2:	bf28      	it	cs
   d5cc4:	f04f 30ff 	movcs.w	r0, #4294967295
   d5cc8:	bd08      	pop	{r3, pc}

000d5cca <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5cca:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5ccc:	7c00      	ldrb	r0, [r0, #16]
   d5cce:	f7fe ff15 	bl	d4afc <HAL_USB_USART_Available_Data_For_Write>
}
   d5cd2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5cd6:	bd08      	pop	{r3, pc}

000d5cd8 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5cd8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5cda:	7c00      	ldrb	r0, [r0, #16]
   d5cdc:	f7fe ff06 	bl	d4aec <HAL_USB_USART_Available_Data>
}
   d5ce0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5ce4:	bd08      	pop	{r3, pc}

000d5ce6 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5ce6:	7c00      	ldrb	r0, [r0, #16]
   d5ce8:	f7fe bf20 	b.w	d4b2c <HAL_USB_USART_Flush_Data>

000d5cec <_ZN9USBSerialD0Ev>:
   d5cec:	b510      	push	{r4, lr}
   d5cee:	2114      	movs	r1, #20
   d5cf0:	4604      	mov	r4, r0
   d5cf2:	f000 fbce 	bl	d6492 <_ZdlPvj>
   d5cf6:	4620      	mov	r0, r4
   d5cf8:	bd10      	pop	{r4, pc}

000d5cfa <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5cfa:	b538      	push	{r3, r4, r5, lr}
   d5cfc:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5cfe:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5d00:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5d02:	f7fe fefb 	bl	d4afc <HAL_USB_USART_Available_Data_For_Write>
   d5d06:	2800      	cmp	r0, #0
   d5d08:	dc01      	bgt.n	d5d0e <_ZN9USBSerial5writeEh+0x14>
   d5d0a:	7c60      	ldrb	r0, [r4, #17]
   d5d0c:	b128      	cbz	r0, d5d1a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5d0e:	4629      	mov	r1, r5
   d5d10:	7c20      	ldrb	r0, [r4, #16]
   d5d12:	f7fe ff03 	bl	d4b1c <HAL_USB_USART_Send_Data>
   d5d16:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5d1a:	bd38      	pop	{r3, r4, r5, pc}

000d5d1c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5d1c:	b510      	push	{r4, lr}
   d5d1e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5d20:	2300      	movs	r3, #0
   d5d22:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5d24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5d28:	60a3      	str	r3, [r4, #8]
   d5d2a:	4b05      	ldr	r3, [pc, #20]	; (d5d40 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5d2c:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5d2e:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5d30:	4608      	mov	r0, r1
{
  _serial = serial;
   d5d32:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5d34:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5d36:	4611      	mov	r1, r2
   d5d38:	f7fe fec8 	bl	d4acc <HAL_USB_USART_Init>
}
   d5d3c:	4620      	mov	r0, r4
   d5d3e:	bd10      	pop	{r4, pc}
   d5d40:	000d6b7c 	.word	0x000d6b7c

000d5d44 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5d44:	2200      	movs	r2, #0
   d5d46:	7c00      	ldrb	r0, [r0, #16]
   d5d48:	f7fe bec8 	b.w	d4adc <HAL_USB_USART_Begin>

000d5d4c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5d4c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5d4e:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5d50:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5d52:	2100      	movs	r1, #0
   d5d54:	f000 fd17 	bl	d6786 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5d58:	4620      	mov	r0, r4
   d5d5a:	bd10      	pop	{r4, pc}

000d5d5c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5d5c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5d5e:	4d0e      	ldr	r5, [pc, #56]	; (d5d98 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5d60:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5d62:	a801      	add	r0, sp, #4
   d5d64:	f7ff fff2 	bl	d5d4c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5d68:	6829      	ldr	r1, [r5, #0]
   d5d6a:	f011 0401 	ands.w	r4, r1, #1
   d5d6e:	d110      	bne.n	d5d92 <_Z16_fetch_usbserialv+0x36>
   d5d70:	4628      	mov	r0, r5
   d5d72:	f7fe f996 	bl	d40a2 <__cxa_guard_acquire>
   d5d76:	b160      	cbz	r0, d5d92 <_Z16_fetch_usbserialv+0x36>
   d5d78:	aa01      	add	r2, sp, #4
   d5d7a:	4621      	mov	r1, r4
   d5d7c:	4807      	ldr	r0, [pc, #28]	; (d5d9c <_Z16_fetch_usbserialv+0x40>)
   d5d7e:	f7ff ffcd 	bl	d5d1c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5d82:	4628      	mov	r0, r5
   d5d84:	f7fe f992 	bl	d40ac <__cxa_guard_release>
   d5d88:	4a05      	ldr	r2, [pc, #20]	; (d5da0 <_Z16_fetch_usbserialv+0x44>)
   d5d8a:	4906      	ldr	r1, [pc, #24]	; (d5da4 <_Z16_fetch_usbserialv+0x48>)
   d5d8c:	4803      	ldr	r0, [pc, #12]	; (d5d9c <_Z16_fetch_usbserialv+0x40>)
   d5d8e:	f000 fb7b 	bl	d6488 <__aeabi_atexit>
	return _usbserial;
}
   d5d92:	4802      	ldr	r0, [pc, #8]	; (d5d9c <_Z16_fetch_usbserialv+0x40>)
   d5d94:	b007      	add	sp, #28
   d5d96:	bd30      	pop	{r4, r5, pc}
   d5d98:	2003e3d0 	.word	0x2003e3d0
   d5d9c:	2003e3d4 	.word	0x2003e3d4
   d5da0:	2003e334 	.word	0x2003e334
   d5da4:	000d5c9d 	.word	0x000d5c9d

000d5da8 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5da8:	2200      	movs	r2, #0
   d5daa:	4611      	mov	r1, r2
   d5dac:	6840      	ldr	r0, [r0, #4]
   d5dae:	f7fe bf4b 	b.w	d4c48 <network_listening>

000d5db2 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5db2:	2200      	movs	r2, #0
   d5db4:	4611      	mov	r1, r2
   d5db6:	6840      	ldr	r0, [r0, #4]
   d5db8:	f7fe bf56 	b.w	d4c68 <network_get_listen_timeout>

000d5dbc <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5dbc:	2200      	movs	r2, #0
   d5dbe:	6840      	ldr	r0, [r0, #4]
   d5dc0:	f7fe bf4a 	b.w	d4c58 <network_set_listen_timeout>

000d5dc4 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5dc4:	2200      	movs	r2, #0
   d5dc6:	f081 0101 	eor.w	r1, r1, #1
   d5dca:	6840      	ldr	r0, [r0, #4]
   d5dcc:	f7fe bf34 	b.w	d4c38 <network_listen>

000d5dd0 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d5dd0:	2300      	movs	r3, #0
   d5dd2:	461a      	mov	r2, r3
   d5dd4:	4619      	mov	r1, r3
   d5dd6:	6840      	ldr	r0, [r0, #4]
   d5dd8:	f7fe bf26 	b.w	d4c28 <network_off>

000d5ddc <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d5ddc:	2300      	movs	r3, #0
   d5dde:	461a      	mov	r2, r3
   d5de0:	4619      	mov	r1, r3
   d5de2:	6840      	ldr	r0, [r0, #4]
   d5de4:	f7fe bf18 	b.w	d4c18 <network_on>

000d5de8 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5de8:	2200      	movs	r2, #0
   d5dea:	4611      	mov	r1, r2
   d5dec:	6840      	ldr	r0, [r0, #4]
   d5dee:	f7fe befb 	b.w	d4be8 <network_connecting>

000d5df2 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5df2:	2200      	movs	r2, #0
   d5df4:	2102      	movs	r1, #2
   d5df6:	6840      	ldr	r0, [r0, #4]
   d5df8:	f7fe befe 	b.w	d4bf8 <network_disconnect>

000d5dfc <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5dfc:	2300      	movs	r3, #0
   d5dfe:	461a      	mov	r2, r3
   d5e00:	6840      	ldr	r0, [r0, #4]
   d5e02:	f7fe bee9 	b.w	d4bd8 <network_connect>
	...

000d5e08 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d5e08:	b5f0      	push	{r4, r5, r6, r7, lr}
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
   d5e0a:	4b1b      	ldr	r3, [pc, #108]	; (d5e78 <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d5e0c:	6003      	str	r3, [r0, #0]
   d5e0e:	2500      	movs	r5, #0
   d5e10:	460f      	mov	r7, r1
   d5e12:	3328      	adds	r3, #40	; 0x28
   d5e14:	2618      	movs	r6, #24
   d5e16:	b089      	sub	sp, #36	; 0x24
   d5e18:	6043      	str	r3, [r0, #4]
   d5e1a:	6085      	str	r5, [r0, #8]
   d5e1c:	60c5      	str	r5, [r0, #12]
   d5e1e:	4632      	mov	r2, r6
   d5e20:	4629      	mov	r1, r5
   d5e22:	4604      	mov	r4, r0
   d5e24:	3010      	adds	r0, #16
   d5e26:	f000 fcae 	bl	d6786 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d5e2a:	462a      	mov	r2, r5
   d5e2c:	4629      	mov	r1, r5
   d5e2e:	6878      	ldr	r0, [r7, #4]
   d5e30:	f7fe feea 	bl	d4c08 <network_ready>
   d5e34:	b908      	cbnz	r0, d5e3a <_ZN5spark13CellularClass4RSSIEv+0x32>
            sig.rssi = 0;
   d5e36:	60a0      	str	r0, [r4, #8]
            return sig;
   d5e38:	e01b      	b.n	d5e72 <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
   d5e3a:	4629      	mov	r1, r5
   d5e3c:	4632      	mov	r2, r6
   d5e3e:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
   d5e40:	9500      	str	r5, [sp, #0]
   d5e42:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
   d5e44:	f000 fc9f 	bl	d6786 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d5e48:	a902      	add	r1, sp, #8
   d5e4a:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
   d5e4c:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d5e50:	f7fe fe34 	bl	d4abc <cellular_signal>
   d5e54:	b110      	cbz	r0, d5e5c <_ZN5spark13CellularClass4RSSIEv+0x54>
            sig.rssi = 1;
   d5e56:	2301      	movs	r3, #1
   d5e58:	60a3      	str	r3, [r4, #8]
            return sig;
   d5e5a:	e00a      	b.n	d5e72 <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }
        sig.rssi = sig_hal.rssi;
   d5e5c:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d5e5e:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
   d5e60:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d5e62:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d5e64:	b90b      	cbnz	r3, d5e6a <_ZN5spark13CellularClass4RSSIEv+0x62>
            sig.rssi = 2;
   d5e66:	2302      	movs	r3, #2
   d5e68:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
   d5e6a:	a902      	add	r1, sp, #8
   d5e6c:	4620      	mov	r0, r4
   d5e6e:	f7ff fb67 	bl	d5540 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   d5e72:	4620      	mov	r0, r4
   d5e74:	b009      	add	sp, #36	; 0x24
   d5e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5e78:	000d6b18 	.word	0x000d6b18

000d5e7c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d5e7c:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d5e7e:	4c08      	ldr	r4, [pc, #32]	; (d5ea0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d5e80:	2528      	movs	r5, #40	; 0x28
   d5e82:	462a      	mov	r2, r5
   d5e84:	2100      	movs	r1, #0
   d5e86:	4620      	mov	r0, r4
   d5e88:	f000 fc7d 	bl	d6786 <memset>
        cid = -1;
   d5e8c:	f04f 33ff 	mov.w	r3, #4294967295
   d5e90:	6063      	str	r3, [r4, #4]
   d5e92:	4b04      	ldr	r3, [pc, #16]	; (d5ea4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d5e94:	8025      	strh	r5, [r4, #0]
   d5e96:	2204      	movs	r2, #4
   d5e98:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d5e9a:	4a03      	ldr	r2, [pc, #12]	; (d5ea8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d5e9c:	601a      	str	r2, [r3, #0]
   d5e9e:	bd38      	pop	{r3, r4, r5, pc}
   d5ea0:	2003e3f0 	.word	0x2003e3f0
   d5ea4:	2003e3e8 	.word	0x2003e3e8
   d5ea8:	000d6bac 	.word	0x000d6bac

000d5eac <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5eac:	4770      	bx	lr

000d5eae <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5eae:	7441      	strb	r1, [r0, #17]
   d5eb0:	4770      	bx	lr

000d5eb2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5eb2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5eb4:	7c00      	ldrb	r0, [r0, #16]
   d5eb6:	f7fe fdc1 	bl	d4a3c <HAL_USART_Available_Data_For_Write>
}
   d5eba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5ebe:	bd08      	pop	{r3, pc}

000d5ec0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5ec0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5ec2:	7c00      	ldrb	r0, [r0, #16]
   d5ec4:	f7fe fd92 	bl	d49ec <HAL_USART_Available_Data>
}
   d5ec8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5ecc:	bd08      	pop	{r3, pc}

000d5ece <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5ece:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5ed0:	7c00      	ldrb	r0, [r0, #16]
   d5ed2:	f7fe fd9b 	bl	d4a0c <HAL_USART_Peek_Data>
}
   d5ed6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5eda:	bf28      	it	cs
   d5edc:	f04f 30ff 	movcs.w	r0, #4294967295
   d5ee0:	bd08      	pop	{r3, pc}

000d5ee2 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5ee2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5ee4:	7c00      	ldrb	r0, [r0, #16]
   d5ee6:	f7fe fd89 	bl	d49fc <HAL_USART_Read_Data>
}
   d5eea:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5eee:	bf28      	it	cs
   d5ef0:	f04f 30ff 	movcs.w	r0, #4294967295
   d5ef4:	bd08      	pop	{r3, pc}

000d5ef6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5ef6:	7c00      	ldrb	r0, [r0, #16]
   d5ef8:	f7fe bd90 	b.w	d4a1c <HAL_USART_Flush_Data>

000d5efc <_ZN11USARTSerialD0Ev>:
   d5efc:	b510      	push	{r4, lr}
   d5efe:	2114      	movs	r1, #20
   d5f00:	4604      	mov	r4, r0
   d5f02:	f000 fac6 	bl	d6492 <_ZdlPvj>
   d5f06:	4620      	mov	r0, r4
   d5f08:	bd10      	pop	{r4, pc}

000d5f0a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5f0a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5f0c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5f0e:	4604      	mov	r4, r0
   d5f10:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5f12:	b925      	cbnz	r5, d5f1e <_ZN11USARTSerial5writeEh+0x14>
   d5f14:	7c00      	ldrb	r0, [r0, #16]
   d5f16:	f7fe fd91 	bl	d4a3c <HAL_USART_Available_Data_For_Write>
   d5f1a:	2800      	cmp	r0, #0
   d5f1c:	dd05      	ble.n	d5f2a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5f1e:	4631      	mov	r1, r6
   d5f20:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5f22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5f26:	f7fe bd59 	b.w	d49dc <HAL_USART_Write_Data>
  }
  return 0;
}
   d5f2a:	4628      	mov	r0, r5
   d5f2c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5f30 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5f30:	b510      	push	{r4, lr}
   d5f32:	4604      	mov	r4, r0
   d5f34:	4608      	mov	r0, r1
   d5f36:	4611      	mov	r1, r2
   d5f38:	2200      	movs	r2, #0
   d5f3a:	6062      	str	r2, [r4, #4]
   d5f3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5f40:	60a2      	str	r2, [r4, #8]
   d5f42:	4a05      	ldr	r2, [pc, #20]	; (d5f58 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5f44:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5f46:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5f48:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5f4a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5f4c:	461a      	mov	r2, r3
   d5f4e:	f7fe fd3d 	bl	d49cc <HAL_USART_Init>
}
   d5f52:	4620      	mov	r0, r4
   d5f54:	bd10      	pop	{r4, pc}
   d5f56:	bf00      	nop
   d5f58:	000d6be0 	.word	0x000d6be0

000d5f5c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5f5c:	7c00      	ldrb	r0, [r0, #16]
   d5f5e:	f7fe bd65 	b.w	d4a2c <HAL_USART_Is_Enabled>
	...

000d5f64 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5f64:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5f66:	4d0c      	ldr	r5, [pc, #48]	; (d5f98 <_Z22__fetch_global_Serial1v+0x34>)
   d5f68:	6829      	ldr	r1, [r5, #0]
   d5f6a:	f011 0401 	ands.w	r4, r1, #1
   d5f6e:	d111      	bne.n	d5f94 <_Z22__fetch_global_Serial1v+0x30>
   d5f70:	4628      	mov	r0, r5
   d5f72:	f7fe f896 	bl	d40a2 <__cxa_guard_acquire>
   d5f76:	b168      	cbz	r0, d5f94 <_Z22__fetch_global_Serial1v+0x30>
   d5f78:	4a08      	ldr	r2, [pc, #32]	; (d5f9c <_Z22__fetch_global_Serial1v+0x38>)
   d5f7a:	4b09      	ldr	r3, [pc, #36]	; (d5fa0 <_Z22__fetch_global_Serial1v+0x3c>)
   d5f7c:	4809      	ldr	r0, [pc, #36]	; (d5fa4 <_Z22__fetch_global_Serial1v+0x40>)
   d5f7e:	4621      	mov	r1, r4
   d5f80:	f7ff ffd6 	bl	d5f30 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5f84:	4628      	mov	r0, r5
   d5f86:	f7fe f891 	bl	d40ac <__cxa_guard_release>
   d5f8a:	4a07      	ldr	r2, [pc, #28]	; (d5fa8 <_Z22__fetch_global_Serial1v+0x44>)
   d5f8c:	4907      	ldr	r1, [pc, #28]	; (d5fac <_Z22__fetch_global_Serial1v+0x48>)
   d5f8e:	4805      	ldr	r0, [pc, #20]	; (d5fa4 <_Z22__fetch_global_Serial1v+0x40>)
   d5f90:	f000 fa7a 	bl	d6488 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5f94:	4803      	ldr	r0, [pc, #12]	; (d5fa4 <_Z22__fetch_global_Serial1v+0x40>)
   d5f96:	bd38      	pop	{r3, r4, r5, pc}
   d5f98:	2003e4b0 	.word	0x2003e4b0
   d5f9c:	2003e4b4 	.word	0x2003e4b4
   d5fa0:	2003e42c 	.word	0x2003e42c
   d5fa4:	2003e418 	.word	0x2003e418
   d5fa8:	2003e334 	.word	0x2003e334
   d5fac:	000d5ead 	.word	0x000d5ead

000d5fb0 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5fb0:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5fb2:	6883      	ldr	r3, [r0, #8]
   d5fb4:	4604      	mov	r4, r0
   d5fb6:	b90b      	cbnz	r3, d5fbc <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d5fb8:	f000 fa6d 	bl	d6496 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5fbc:	68c3      	ldr	r3, [r0, #12]
   d5fbe:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5fc0:	68a3      	ldr	r3, [r4, #8]
   d5fc2:	b11b      	cbz	r3, d5fcc <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5fc4:	2203      	movs	r2, #3
   d5fc6:	4621      	mov	r1, r4
   d5fc8:	4620      	mov	r0, r4
   d5fca:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5fcc:	4620      	mov	r0, r4
   d5fce:	2110      	movs	r1, #16
}
   d5fd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5fd4:	f000 ba5d 	b.w	d6492 <_ZdlPvj>

000d5fd8 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d5fd8:	4770      	bx	lr

000d5fda <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5fda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5fdc:	4606      	mov	r6, r0
   d5fde:	4615      	mov	r5, r2
   d5fe0:	460c      	mov	r4, r1
   d5fe2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5fe4:	42bc      	cmp	r4, r7
   d5fe6:	d006      	beq.n	d5ff6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5fe8:	6833      	ldr	r3, [r6, #0]
   d5fea:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5fee:	689b      	ldr	r3, [r3, #8]
   d5ff0:	4630      	mov	r0, r6
   d5ff2:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5ff4:	e7f6      	b.n	d5fe4 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5ff6:	4628      	mov	r0, r5
   d5ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5ffa <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5ffa:	2200      	movs	r2, #0
   d5ffc:	7c00      	ldrb	r0, [r0, #16]
   d5ffe:	f7fe bd25 	b.w	d4a4c <HAL_I2C_Write_Data>

000d6002 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d6002:	2100      	movs	r1, #0
   d6004:	7c00      	ldrb	r0, [r0, #16]
   d6006:	f7fe bd29 	b.w	d4a5c <HAL_I2C_Available_Data>

000d600a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d600a:	2100      	movs	r1, #0
   d600c:	7c00      	ldrb	r0, [r0, #16]
   d600e:	f7fe bd2d 	b.w	d4a6c <HAL_I2C_Read_Data>

000d6012 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d6012:	2100      	movs	r1, #0
   d6014:	7c00      	ldrb	r0, [r0, #16]
   d6016:	f7fe bd31 	b.w	d4a7c <HAL_I2C_Peek_Data>

000d601a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d601a:	2100      	movs	r1, #0
   d601c:	7c00      	ldrb	r0, [r0, #16]
   d601e:	f7fe bd35 	b.w	d4a8c <HAL_I2C_Flush_Data>

000d6022 <_ZN7TwoWireD0Ev>:
   d6022:	b510      	push	{r4, lr}
   d6024:	2114      	movs	r1, #20
   d6026:	4604      	mov	r4, r0
   d6028:	f000 fa33 	bl	d6492 <_ZdlPvj>
   d602c:	4620      	mov	r0, r4
   d602e:	bd10      	pop	{r4, pc}

000d6030 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d6030:	b510      	push	{r4, lr}
   d6032:	4604      	mov	r4, r0
   d6034:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6038:	4608      	mov	r0, r1
   d603a:	60a3      	str	r3, [r4, #8]
   d603c:	2100      	movs	r1, #0
   d603e:	4b04      	ldr	r3, [pc, #16]	; (d6050 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d6040:	7420      	strb	r0, [r4, #16]
   d6042:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d6044:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d6046:	f7fe fd31 	bl	d4aac <HAL_I2C_Init>

}
   d604a:	4620      	mov	r0, r4
   d604c:	bd10      	pop	{r4, pc}
   d604e:	bf00      	nop
   d6050:	000d6c10 	.word	0x000d6c10

000d6054 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d6054:	2100      	movs	r1, #0
   d6056:	7c00      	ldrb	r0, [r0, #16]
   d6058:	f7fe bd20 	b.w	d4a9c <HAL_I2C_Is_Enabled>

000d605c <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d605c:	2200      	movs	r2, #0
   d605e:	4611      	mov	r1, r2
   d6060:	6840      	ldr	r0, [r0, #4]
   d6062:	f7fe bdf1 	b.w	d4c48 <network_listening>

000d6066 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6066:	2200      	movs	r2, #0
   d6068:	4611      	mov	r1, r2
   d606a:	6840      	ldr	r0, [r0, #4]
   d606c:	f7fe bdfc 	b.w	d4c68 <network_get_listen_timeout>

000d6070 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6070:	2200      	movs	r2, #0
   d6072:	6840      	ldr	r0, [r0, #4]
   d6074:	f7fe bdf0 	b.w	d4c58 <network_set_listen_timeout>

000d6078 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6078:	2200      	movs	r2, #0
   d607a:	f081 0101 	eor.w	r1, r1, #1
   d607e:	6840      	ldr	r0, [r0, #4]
   d6080:	f7fe bdda 	b.w	d4c38 <network_listen>

000d6084 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d6084:	2300      	movs	r3, #0
   d6086:	461a      	mov	r2, r3
   d6088:	2101      	movs	r1, #1
   d608a:	6840      	ldr	r0, [r0, #4]
   d608c:	f7fe bdcc 	b.w	d4c28 <network_off>

000d6090 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6090:	2300      	movs	r3, #0
   d6092:	461a      	mov	r2, r3
   d6094:	4619      	mov	r1, r3
   d6096:	6840      	ldr	r0, [r0, #4]
   d6098:	f7fe bdbe 	b.w	d4c18 <network_on>

000d609c <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d609c:	2200      	movs	r2, #0
   d609e:	4611      	mov	r1, r2
   d60a0:	6840      	ldr	r0, [r0, #4]
   d60a2:	f7fe bdb1 	b.w	d4c08 <network_ready>

000d60a6 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d60a6:	2200      	movs	r2, #0
   d60a8:	4611      	mov	r1, r2
   d60aa:	6840      	ldr	r0, [r0, #4]
   d60ac:	f7fe bd9c 	b.w	d4be8 <network_connecting>

000d60b0 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d60b0:	2200      	movs	r2, #0
   d60b2:	2102      	movs	r1, #2
   d60b4:	6840      	ldr	r0, [r0, #4]
   d60b6:	f7fe bd9f 	b.w	d4bf8 <network_disconnect>

000d60ba <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d60ba:	2300      	movs	r3, #0
   d60bc:	461a      	mov	r2, r3
   d60be:	6840      	ldr	r0, [r0, #4]
   d60c0:	f7fe bd8a 	b.w	d4bd8 <network_connect>

000d60c4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d60c4:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d60c6:	4605      	mov	r5, r0
   d60c8:	b188      	cbz	r0, d60ee <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d60ca:	6804      	ldr	r4, [r0, #0]
   d60cc:	b14c      	cbz	r4, d60e2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d60ce:	68a3      	ldr	r3, [r4, #8]
   d60d0:	b11b      	cbz	r3, d60da <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d60d2:	2203      	movs	r2, #3
   d60d4:	4621      	mov	r1, r4
   d60d6:	4620      	mov	r0, r4
   d60d8:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d60da:	2110      	movs	r1, #16
   d60dc:	4620      	mov	r0, r4
   d60de:	f000 f9d8 	bl	d6492 <_ZdlPvj>
   d60e2:	4628      	mov	r0, r5
   d60e4:	2114      	movs	r1, #20
      }
   d60e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d60ea:	f000 b9d2 	b.w	d6492 <_ZdlPvj>
   d60ee:	bd38      	pop	{r3, r4, r5, pc}

000d60f0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d60f0:	b110      	cbz	r0, d60f8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d60f2:	6803      	ldr	r3, [r0, #0]
   d60f4:	685b      	ldr	r3, [r3, #4]
   d60f6:	4718      	bx	r3
   d60f8:	4770      	bx	lr

000d60fa <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d60fa:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d60fc:	6803      	ldr	r3, [r0, #0]
   d60fe:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d6100:	b1bb      	cbz	r3, d6132 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d6102:	6858      	ldr	r0, [r3, #4]
   d6104:	f7fe fc32 	bl	d496c <os_thread_is_current>
   d6108:	b978      	cbnz	r0, d612a <_ZN6ThreadD1Ev+0x30>
   d610a:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d610c:	7c5a      	ldrb	r2, [r3, #17]
   d610e:	b912      	cbnz	r2, d6116 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d6110:	6858      	ldr	r0, [r3, #4]
   d6112:	f7fe fc33 	bl	d497c <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d6116:	6823      	ldr	r3, [r4, #0]
   d6118:	6858      	ldr	r0, [r3, #4]
   d611a:	f7fe fc37 	bl	d498c <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d611e:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6120:	2300      	movs	r3, #0
   d6122:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6124:	b128      	cbz	r0, d6132 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d6126:	f7ff ffcd 	bl	d60c4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d612a:	6820      	ldr	r0, [r4, #0]
   d612c:	b108      	cbz	r0, d6132 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d612e:	f7ff ffc9 	bl	d60c4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d6132:	4620      	mov	r0, r4
   d6134:	bd10      	pop	{r4, pc}
	...

000d6138 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d6138:	b538      	push	{r3, r4, r5, lr}
   d613a:	4b0c      	ldr	r3, [pc, #48]	; (d616c <_ZN5spark9MeshClassD1Ev+0x34>)
   d613c:	6003      	str	r3, [r0, #0]
   d613e:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6140:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d6144:	b108      	cbz	r0, d614a <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d6146:	f7fd ffaa 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d614a:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d614e:	b135      	cbz	r5, d615e <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6150:	4628      	mov	r0, r5
   d6152:	f7ff ffd2 	bl	d60fa <_ZN6ThreadD1Ev>
   d6156:	2104      	movs	r1, #4
   d6158:	4628      	mov	r0, r5
   d615a:	f000 f99a 	bl	d6492 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d615e:	68a0      	ldr	r0, [r4, #8]
   d6160:	b108      	cbz	r0, d6166 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d6162:	f7ff ffc5 	bl	d60f0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d6166:	4620      	mov	r0, r4
   d6168:	bd38      	pop	{r3, r4, r5, pc}
   d616a:	bf00      	nop
   d616c:	000d6c38 	.word	0x000d6c38

000d6170 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d6170:	b538      	push	{r3, r4, r5, lr}
   d6172:	4c0e      	ldr	r4, [pc, #56]	; (d61ac <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d6174:	4b0e      	ldr	r3, [pc, #56]	; (d61b0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d6176:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6178:	2500      	movs	r5, #0
   d617a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d617c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d6180:	6063      	str	r3, [r4, #4]
   d6182:	60a5      	str	r5, [r4, #8]
   d6184:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6188:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d618c:	f7fe fc0e 	bl	d49ac <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d6190:	4b08      	ldr	r3, [pc, #32]	; (d61b4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d6192:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6196:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d619a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d619c:	4620      	mov	r0, r4
   d619e:	4a06      	ldr	r2, [pc, #24]	; (d61b8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d61a0:	4906      	ldr	r1, [pc, #24]	; (d61bc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d61a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d61a6:	f000 b96f 	b.w	d6488 <__aeabi_atexit>
   d61aa:	bf00      	nop
   d61ac:	2003e538 	.word	0x2003e538
   d61b0:	000d6c6c 	.word	0x000d6c6c
   d61b4:	000d6c38 	.word	0x000d6c38
   d61b8:	2003e334 	.word	0x2003e334
   d61bc:	000d6139 	.word	0x000d6139

000d61c0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d61c0:	2300      	movs	r3, #0
   d61c2:	461a      	mov	r2, r3
   d61c4:	6840      	ldr	r0, [r0, #4]
   d61c6:	f7fe bd07 	b.w	d4bd8 <network_connect>

000d61ca <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d61ca:	2200      	movs	r2, #0
   d61cc:	2102      	movs	r1, #2
   d61ce:	6840      	ldr	r0, [r0, #4]
   d61d0:	f7fe bd12 	b.w	d4bf8 <network_disconnect>

000d61d4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d61d4:	2200      	movs	r2, #0
   d61d6:	4611      	mov	r1, r2
   d61d8:	6840      	ldr	r0, [r0, #4]
   d61da:	f7fe bd05 	b.w	d4be8 <network_connecting>

000d61de <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d61de:	2200      	movs	r2, #0
   d61e0:	4611      	mov	r1, r2
   d61e2:	6840      	ldr	r0, [r0, #4]
   d61e4:	f7fe bd10 	b.w	d4c08 <network_ready>

000d61e8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d61e8:	2300      	movs	r3, #0
   d61ea:	461a      	mov	r2, r3
   d61ec:	4619      	mov	r1, r3
   d61ee:	6840      	ldr	r0, [r0, #4]
   d61f0:	f7fe bd12 	b.w	d4c18 <network_on>

000d61f4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d61f4:	2300      	movs	r3, #0
   d61f6:	461a      	mov	r2, r3
   d61f8:	4619      	mov	r1, r3
   d61fa:	6840      	ldr	r0, [r0, #4]
   d61fc:	f7fe bd14 	b.w	d4c28 <network_off>

000d6200 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6200:	2200      	movs	r2, #0
   d6202:	f081 0101 	eor.w	r1, r1, #1
   d6206:	6840      	ldr	r0, [r0, #4]
   d6208:	f7fe bd16 	b.w	d4c38 <network_listen>

000d620c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d620c:	2200      	movs	r2, #0
   d620e:	6840      	ldr	r0, [r0, #4]
   d6210:	f7fe bd22 	b.w	d4c58 <network_set_listen_timeout>

000d6214 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6214:	2200      	movs	r2, #0
   d6216:	4611      	mov	r1, r2
   d6218:	6840      	ldr	r0, [r0, #4]
   d621a:	f7fe bd25 	b.w	d4c68 <network_get_listen_timeout>

000d621e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d621e:	2200      	movs	r2, #0
   d6220:	4611      	mov	r1, r2
   d6222:	6840      	ldr	r0, [r0, #4]
   d6224:	f7fe bd10 	b.w	d4c48 <network_listening>

000d6228 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6228:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d622c:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d622e:	b095      	sub	sp, #84	; 0x54
   d6230:	4616      	mov	r6, r2
   d6232:	460d      	mov	r5, r1
   d6234:	4607      	mov	r7, r0
    IPAddress addr;
   d6236:	f7ff fcf7 	bl	d5c28 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d623a:	4621      	mov	r1, r4
   d623c:	2220      	movs	r2, #32
   d623e:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6240:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6242:	f000 faa0 	bl	d6786 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6246:	2340      	movs	r3, #64	; 0x40
   d6248:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d624a:	4621      	mov	r1, r4
   d624c:	466b      	mov	r3, sp
   d624e:	aa0c      	add	r2, sp, #48	; 0x30
   d6250:	4630      	mov	r0, r6
   d6252:	f7fe fb13 	bl	d487c <netdb_getaddrinfo>
    if (!r) {
   d6256:	4604      	mov	r4, r0
   d6258:	2800      	cmp	r0, #0
   d625a:	d144      	bne.n	d62e6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d625c:	4602      	mov	r2, r0
   d625e:	2101      	movs	r1, #1
   d6260:	6868      	ldr	r0, [r5, #4]
   d6262:	f7fe fcd1 	bl	d4c08 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6266:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6268:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d626a:	4622      	mov	r2, r4
   d626c:	6868      	ldr	r0, [r5, #4]
   d626e:	f7fe fccb 	bl	d4c08 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6272:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6274:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d6276:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6278:	2e00      	cmp	r6, #0
   d627a:	d034      	beq.n	d62e6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d627c:	2900      	cmp	r1, #0
   d627e:	d132      	bne.n	d62e6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6280:	6873      	ldr	r3, [r6, #4]
   d6282:	2b02      	cmp	r3, #2
   d6284:	d002      	beq.n	d628c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d6286:	2b0a      	cmp	r3, #10
   d6288:	d009      	beq.n	d629e <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d628a:	e02a      	b.n	d62e2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d628c:	f1b8 0f00 	cmp.w	r8, #0
   d6290:	d027      	beq.n	d62e2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6292:	6971      	ldr	r1, [r6, #20]
   d6294:	4638      	mov	r0, r7
   d6296:	3104      	adds	r1, #4
   d6298:	f7ff fcf3 	bl	d5c82 <_ZN9IPAddressaSEPKh>
   d629c:	e020      	b.n	d62e0 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d629e:	f1b9 0f00 	cmp.w	r9, #0
   d62a2:	d01e      	beq.n	d62e2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d62a4:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d62a6:	2211      	movs	r2, #17
   d62a8:	a801      	add	r0, sp, #4
   d62aa:	f000 fa6c 	bl	d6786 <memset>
                    a.v = 6;
   d62ae:	2306      	movs	r3, #6
   d62b0:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d62b4:	ad01      	add	r5, sp, #4
   d62b6:	f104 0308 	add.w	r3, r4, #8
   d62ba:	3418      	adds	r4, #24
   d62bc:	6818      	ldr	r0, [r3, #0]
   d62be:	6859      	ldr	r1, [r3, #4]
   d62c0:	462a      	mov	r2, r5
   d62c2:	c203      	stmia	r2!, {r0, r1}
   d62c4:	3308      	adds	r3, #8
   d62c6:	42a3      	cmp	r3, r4
   d62c8:	4615      	mov	r5, r2
   d62ca:	d1f7      	bne.n	d62bc <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d62cc:	a901      	add	r1, sp, #4
   d62ce:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d62d0:	ad07      	add	r5, sp, #28
   d62d2:	f7ff fcb7 	bl	d5c44 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d62d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d62d8:	1d3c      	adds	r4, r7, #4
   d62da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d62dc:	682b      	ldr	r3, [r5, #0]
   d62de:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d62e0:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d62e2:	69f6      	ldr	r6, [r6, #28]
   d62e4:	e7c8      	b.n	d6278 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d62e6:	9800      	ldr	r0, [sp, #0]
   d62e8:	f7fe fac0 	bl	d486c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d62ec:	4638      	mov	r0, r7
   d62ee:	b015      	add	sp, #84	; 0x54
   d62f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d62f4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d62f4:	4b02      	ldr	r3, [pc, #8]	; (d6300 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d62f6:	4a03      	ldr	r2, [pc, #12]	; (d6304 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d62f8:	601a      	str	r2, [r3, #0]
   d62fa:	2200      	movs	r2, #0
   d62fc:	605a      	str	r2, [r3, #4]
   d62fe:	4770      	bx	lr
   d6300:	2003e70c 	.word	0x2003e70c
   d6304:	000d6c6c 	.word	0x000d6c6c

000d6308 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   d6308:	b508      	push	{r3, lr}
   d630a:	4b02      	ldr	r3, [pc, #8]	; (d6314 <spark_protocol_instance+0xc>)
   d630c:	681b      	ldr	r3, [r3, #0]
   d630e:	681b      	ldr	r3, [r3, #0]
   d6310:	9301      	str	r3, [sp, #4]
   d6312:	bd08      	pop	{r3, pc}
   d6314:	0003025c 	.word	0x0003025c

000d6318 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   d6318:	b508      	push	{r3, lr}
   d631a:	4b02      	ldr	r3, [pc, #8]	; (d6324 <spark_protocol_set_product_id+0xc>)
   d631c:	681b      	ldr	r3, [r3, #0]
   d631e:	685b      	ldr	r3, [r3, #4]
   d6320:	9301      	str	r3, [sp, #4]
   d6322:	bd08      	pop	{r3, pc}
   d6324:	0003025c 	.word	0x0003025c

000d6328 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   d6328:	b508      	push	{r3, lr}
   d632a:	4b02      	ldr	r3, [pc, #8]	; (d6334 <spark_protocol_set_product_firmware_version+0xc>)
   d632c:	681b      	ldr	r3, [r3, #0]
   d632e:	689b      	ldr	r3, [r3, #8]
   d6330:	9301      	str	r3, [sp, #4]
   d6332:	bd08      	pop	{r3, pc}
   d6334:	0003025c 	.word	0x0003025c

000d6338 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d6338:	b510      	push	{r4, lr}
   d633a:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d633c:	480f      	ldr	r0, [pc, #60]	; (d637c <pinAvailable+0x44>)
   d633e:	f7fe fd5d 	bl	d4dfc <_ZN8SPIClass9isEnabledEv>
   d6342:	b128      	cbz	r0, d6350 <pinAvailable+0x18>
   d6344:	f1a4 030b 	sub.w	r3, r4, #11
   d6348:	2b02      	cmp	r3, #2
   d634a:	d801      	bhi.n	d6350 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d634c:	2000      	movs	r0, #0
   d634e:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d6350:	f000 f87a 	bl	d6448 <_Z19__fetch_global_Wirev>
   d6354:	f7ff fe7e 	bl	d6054 <_ZN7TwoWire9isEnabledEv>
   d6358:	b108      	cbz	r0, d635e <pinAvailable+0x26>
   d635a:	2c01      	cmp	r4, #1
   d635c:	d9f6      	bls.n	d634c <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d635e:	f7ff fe01 	bl	d5f64 <_Z22__fetch_global_Serial1v>
   d6362:	f7ff fdfb 	bl	d5f5c <_ZN11USARTSerial9isEnabledEv>
   d6366:	b118      	cbz	r0, d6370 <pinAvailable+0x38>
   d6368:	f1a4 0309 	sub.w	r3, r4, #9
   d636c:	2b01      	cmp	r3, #1
   d636e:	d9ed      	bls.n	d634c <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d6370:	2c23      	cmp	r4, #35	; 0x23
   d6372:	bf8c      	ite	hi
   d6374:	2000      	movhi	r0, #0
   d6376:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d6378:	bd10      	pop	{r4, pc}
   d637a:	bf00      	nop
   d637c:	2003e714 	.word	0x2003e714

000d6380 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6380:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d6382:	b538      	push	{r3, r4, r5, lr}
   d6384:	4604      	mov	r4, r0
   d6386:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6388:	d80a      	bhi.n	d63a0 <pinMode+0x20>
   d638a:	29ff      	cmp	r1, #255	; 0xff
   d638c:	d008      	beq.n	d63a0 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d638e:	f7ff ffd3 	bl	d6338 <pinAvailable>
   d6392:	b128      	cbz	r0, d63a0 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6394:	4629      	mov	r1, r5
   d6396:	4620      	mov	r0, r4
}
   d6398:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d639c:	f7fe ba86 	b.w	d48ac <HAL_Pin_Mode>
   d63a0:	bd38      	pop	{r3, r4, r5, pc}

000d63a2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d63a2:	b538      	push	{r3, r4, r5, lr}
   d63a4:	4604      	mov	r4, r0
   d63a6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d63a8:	f7fe fa88 	bl	d48bc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d63ac:	28ff      	cmp	r0, #255	; 0xff
   d63ae:	d010      	beq.n	d63d2 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d63b0:	2806      	cmp	r0, #6
   d63b2:	d804      	bhi.n	d63be <digitalWrite+0x1c>
   d63b4:	234d      	movs	r3, #77	; 0x4d
   d63b6:	fa23 f000 	lsr.w	r0, r3, r0
   d63ba:	07c3      	lsls	r3, r0, #31
   d63bc:	d409      	bmi.n	d63d2 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d63be:	4620      	mov	r0, r4
   d63c0:	f7ff ffba 	bl	d6338 <pinAvailable>
   d63c4:	b128      	cbz	r0, d63d2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d63c6:	4629      	mov	r1, r5
   d63c8:	4620      	mov	r0, r4
}
   d63ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d63ce:	f7fe ba7d 	b.w	d48cc <HAL_GPIO_Write>
   d63d2:	bd38      	pop	{r3, r4, r5, pc}

000d63d4 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d63d4:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d63d6:	b510      	push	{r4, lr}
   d63d8:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d63da:	bf9c      	itt	ls
   d63dc:	340e      	addls	r4, #14
   d63de:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d63e0:	4620      	mov	r0, r4
   d63e2:	f7ff ffa9 	bl	d6338 <pinAvailable>
   d63e6:	b150      	cbz	r0, d63fe <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d63e8:	2103      	movs	r1, #3
   d63ea:	4620      	mov	r0, r4
   d63ec:	f7fe fa56 	bl	d489c <HAL_Validate_Pin_Function>
   d63f0:	2803      	cmp	r0, #3
   d63f2:	d104      	bne.n	d63fe <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d63f4:	4620      	mov	r0, r4
}
   d63f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d63fa:	f7fe ba6f 	b.w	d48dc <HAL_ADC_Read>
}
   d63fe:	2000      	movs	r0, #0
   d6400:	bd10      	pop	{r4, pc}
	...

000d6404 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6404:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d6406:	4c0c      	ldr	r4, [pc, #48]	; (d6438 <_GLOBAL__sub_I_SPI+0x34>)
   d6408:	4e0c      	ldr	r6, [pc, #48]	; (d643c <_GLOBAL__sub_I_SPI+0x38>)
   d640a:	4d0d      	ldr	r5, [pc, #52]	; (d6440 <_GLOBAL__sub_I_SPI+0x3c>)
   d640c:	2100      	movs	r1, #0
   d640e:	4620      	mov	r0, r4
   d6410:	f7fe fce0 	bl	d4dd4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6414:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6416:	4c0b      	ldr	r4, [pc, #44]	; (d6444 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d6418:	4632      	mov	r2, r6
   d641a:	4629      	mov	r1, r5
   d641c:	f000 f834 	bl	d6488 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6420:	2101      	movs	r1, #1
   d6422:	4620      	mov	r0, r4
   d6424:	f7fe fcd6 	bl	d4dd4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6428:	4632      	mov	r2, r6
   d642a:	4629      	mov	r1, r5
   d642c:	4620      	mov	r0, r4
   d642e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d6432:	f000 b829 	b.w	d6488 <__aeabi_atexit>
   d6436:	bf00      	nop
   d6438:	2003e714 	.word	0x2003e714
   d643c:	2003e334 	.word	0x2003e334
   d6440:	000d4dc5 	.word	0x000d4dc5
   d6444:	2003e724 	.word	0x2003e724

000d6448 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d6448:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d644a:	4d0b      	ldr	r5, [pc, #44]	; (d6478 <_Z19__fetch_global_Wirev+0x30>)
   d644c:	6829      	ldr	r1, [r5, #0]
   d644e:	f011 0401 	ands.w	r4, r1, #1
   d6452:	d10f      	bne.n	d6474 <_Z19__fetch_global_Wirev+0x2c>
   d6454:	4628      	mov	r0, r5
   d6456:	f7fd fe24 	bl	d40a2 <__cxa_guard_acquire>
   d645a:	b158      	cbz	r0, d6474 <_Z19__fetch_global_Wirev+0x2c>
   d645c:	4621      	mov	r1, r4
   d645e:	4807      	ldr	r0, [pc, #28]	; (d647c <_Z19__fetch_global_Wirev+0x34>)
   d6460:	f7ff fde6 	bl	d6030 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d6464:	4628      	mov	r0, r5
   d6466:	f7fd fe21 	bl	d40ac <__cxa_guard_release>
   d646a:	4a05      	ldr	r2, [pc, #20]	; (d6480 <_Z19__fetch_global_Wirev+0x38>)
   d646c:	4905      	ldr	r1, [pc, #20]	; (d6484 <_Z19__fetch_global_Wirev+0x3c>)
   d646e:	4803      	ldr	r0, [pc, #12]	; (d647c <_Z19__fetch_global_Wirev+0x34>)
   d6470:	f000 f80a 	bl	d6488 <__aeabi_atexit>
	return wire;
}
   d6474:	4801      	ldr	r0, [pc, #4]	; (d647c <_Z19__fetch_global_Wirev+0x34>)
   d6476:	bd38      	pop	{r3, r4, r5, pc}
   d6478:	2003e738 	.word	0x2003e738
   d647c:	2003e73c 	.word	0x2003e73c
   d6480:	2003e334 	.word	0x2003e334
   d6484:	000d5fd9 	.word	0x000d5fd9

000d6488 <__aeabi_atexit>:
   d6488:	460b      	mov	r3, r1
   d648a:	4601      	mov	r1, r0
   d648c:	4618      	mov	r0, r3
   d648e:	f000 b94d 	b.w	d672c <__cxa_atexit>

000d6492 <_ZdlPvj>:
   d6492:	f7fd be02 	b.w	d409a <_ZdlPv>

000d6496 <_ZSt25__throw_bad_function_callv>:
   d6496:	b508      	push	{r3, lr}
   d6498:	f7fe fc46 	bl	d4d28 <abort>

000d649c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d649c:	4b18      	ldr	r3, [pc, #96]	; (d6500 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d649e:	681a      	ldr	r2, [r3, #0]
   d64a0:	07d1      	lsls	r1, r2, #31
   d64a2:	bf5c      	itt	pl
   d64a4:	2201      	movpl	r2, #1
   d64a6:	601a      	strpl	r2, [r3, #0]
   d64a8:	4b16      	ldr	r3, [pc, #88]	; (d6504 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d64aa:	681a      	ldr	r2, [r3, #0]
   d64ac:	07d2      	lsls	r2, r2, #31
   d64ae:	bf5c      	itt	pl
   d64b0:	2201      	movpl	r2, #1
   d64b2:	601a      	strpl	r2, [r3, #0]
   d64b4:	4b14      	ldr	r3, [pc, #80]	; (d6508 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d64b6:	681a      	ldr	r2, [r3, #0]
   d64b8:	07d0      	lsls	r0, r2, #31
   d64ba:	bf5c      	itt	pl
   d64bc:	2201      	movpl	r2, #1
   d64be:	601a      	strpl	r2, [r3, #0]
   d64c0:	4b12      	ldr	r3, [pc, #72]	; (d650c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d64c2:	681a      	ldr	r2, [r3, #0]
   d64c4:	07d1      	lsls	r1, r2, #31
   d64c6:	bf5c      	itt	pl
   d64c8:	2201      	movpl	r2, #1
   d64ca:	601a      	strpl	r2, [r3, #0]
   d64cc:	4b10      	ldr	r3, [pc, #64]	; (d6510 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d64ce:	681a      	ldr	r2, [r3, #0]
   d64d0:	07d2      	lsls	r2, r2, #31
   d64d2:	bf5c      	itt	pl
   d64d4:	2201      	movpl	r2, #1
   d64d6:	601a      	strpl	r2, [r3, #0]
   d64d8:	4b0e      	ldr	r3, [pc, #56]	; (d6514 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d64da:	681a      	ldr	r2, [r3, #0]
   d64dc:	07d0      	lsls	r0, r2, #31
   d64de:	bf5c      	itt	pl
   d64e0:	2201      	movpl	r2, #1
   d64e2:	601a      	strpl	r2, [r3, #0]
   d64e4:	4b0c      	ldr	r3, [pc, #48]	; (d6518 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d64e6:	681a      	ldr	r2, [r3, #0]
   d64e8:	07d1      	lsls	r1, r2, #31
   d64ea:	bf5c      	itt	pl
   d64ec:	2201      	movpl	r2, #1
   d64ee:	601a      	strpl	r2, [r3, #0]
   d64f0:	4b0a      	ldr	r3, [pc, #40]	; (d651c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d64f2:	681a      	ldr	r2, [r3, #0]
   d64f4:	07d2      	lsls	r2, r2, #31
   d64f6:	bf5c      	itt	pl
   d64f8:	2201      	movpl	r2, #1
   d64fa:	601a      	strpl	r2, [r3, #0]
   d64fc:	4770      	bx	lr
   d64fe:	bf00      	nop
   d6500:	2003e76c 	.word	0x2003e76c
   d6504:	2003e768 	.word	0x2003e768
   d6508:	2003e764 	.word	0x2003e764
   d650c:	2003e760 	.word	0x2003e760
   d6510:	2003e75c 	.word	0x2003e75c
   d6514:	2003e758 	.word	0x2003e758
   d6518:	2003e754 	.word	0x2003e754
   d651c:	2003e750 	.word	0x2003e750

000d6520 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6520:	4b24      	ldr	r3, [pc, #144]	; (d65b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d6522:	681a      	ldr	r2, [r3, #0]
   d6524:	07d0      	lsls	r0, r2, #31
   d6526:	bf5c      	itt	pl
   d6528:	2201      	movpl	r2, #1
   d652a:	601a      	strpl	r2, [r3, #0]
   d652c:	4b22      	ldr	r3, [pc, #136]	; (d65b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d652e:	681a      	ldr	r2, [r3, #0]
   d6530:	07d1      	lsls	r1, r2, #31
   d6532:	bf5c      	itt	pl
   d6534:	2201      	movpl	r2, #1
   d6536:	601a      	strpl	r2, [r3, #0]
   d6538:	4b20      	ldr	r3, [pc, #128]	; (d65bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d653a:	681a      	ldr	r2, [r3, #0]
   d653c:	07d2      	lsls	r2, r2, #31
   d653e:	bf5c      	itt	pl
   d6540:	2201      	movpl	r2, #1
   d6542:	601a      	strpl	r2, [r3, #0]
   d6544:	4b1e      	ldr	r3, [pc, #120]	; (d65c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d6546:	681a      	ldr	r2, [r3, #0]
   d6548:	07d0      	lsls	r0, r2, #31
   d654a:	bf5c      	itt	pl
   d654c:	2201      	movpl	r2, #1
   d654e:	601a      	strpl	r2, [r3, #0]
   d6550:	4b1c      	ldr	r3, [pc, #112]	; (d65c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d6552:	681a      	ldr	r2, [r3, #0]
   d6554:	07d1      	lsls	r1, r2, #31
   d6556:	bf5c      	itt	pl
   d6558:	2201      	movpl	r2, #1
   d655a:	601a      	strpl	r2, [r3, #0]
   d655c:	4b1a      	ldr	r3, [pc, #104]	; (d65c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d655e:	681a      	ldr	r2, [r3, #0]
   d6560:	07d2      	lsls	r2, r2, #31
   d6562:	bf5c      	itt	pl
   d6564:	2201      	movpl	r2, #1
   d6566:	601a      	strpl	r2, [r3, #0]
   d6568:	4b18      	ldr	r3, [pc, #96]	; (d65cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d656a:	681a      	ldr	r2, [r3, #0]
   d656c:	07d0      	lsls	r0, r2, #31
   d656e:	bf5c      	itt	pl
   d6570:	2201      	movpl	r2, #1
   d6572:	601a      	strpl	r2, [r3, #0]
   d6574:	4b16      	ldr	r3, [pc, #88]	; (d65d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d6576:	681a      	ldr	r2, [r3, #0]
   d6578:	07d1      	lsls	r1, r2, #31
   d657a:	bf5c      	itt	pl
   d657c:	2201      	movpl	r2, #1
   d657e:	601a      	strpl	r2, [r3, #0]
   d6580:	4b14      	ldr	r3, [pc, #80]	; (d65d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d6582:	681a      	ldr	r2, [r3, #0]
   d6584:	07d2      	lsls	r2, r2, #31
   d6586:	bf5c      	itt	pl
   d6588:	2201      	movpl	r2, #1
   d658a:	601a      	strpl	r2, [r3, #0]
   d658c:	4b12      	ldr	r3, [pc, #72]	; (d65d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d658e:	681a      	ldr	r2, [r3, #0]
   d6590:	07d0      	lsls	r0, r2, #31
   d6592:	bf5c      	itt	pl
   d6594:	2201      	movpl	r2, #1
   d6596:	601a      	strpl	r2, [r3, #0]
   d6598:	4b10      	ldr	r3, [pc, #64]	; (d65dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d659a:	681a      	ldr	r2, [r3, #0]
   d659c:	07d1      	lsls	r1, r2, #31
   d659e:	bf5c      	itt	pl
   d65a0:	2201      	movpl	r2, #1
   d65a2:	601a      	strpl	r2, [r3, #0]
   d65a4:	4b0e      	ldr	r3, [pc, #56]	; (d65e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d65a6:	681a      	ldr	r2, [r3, #0]
   d65a8:	07d2      	lsls	r2, r2, #31
   d65aa:	bf5c      	itt	pl
   d65ac:	2201      	movpl	r2, #1
   d65ae:	601a      	strpl	r2, [r3, #0]
   d65b0:	4770      	bx	lr
   d65b2:	bf00      	nop
   d65b4:	2003e79c 	.word	0x2003e79c
   d65b8:	2003e798 	.word	0x2003e798
   d65bc:	2003e794 	.word	0x2003e794
   d65c0:	2003e790 	.word	0x2003e790
   d65c4:	2003e78c 	.word	0x2003e78c
   d65c8:	2003e788 	.word	0x2003e788
   d65cc:	2003e784 	.word	0x2003e784
   d65d0:	2003e780 	.word	0x2003e780
   d65d4:	2003e77c 	.word	0x2003e77c
   d65d8:	2003e778 	.word	0x2003e778
   d65dc:	2003e774 	.word	0x2003e774
   d65e0:	2003e770 	.word	0x2003e770

000d65e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d65e4:	4b24      	ldr	r3, [pc, #144]	; (d6678 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d65e6:	681a      	ldr	r2, [r3, #0]
   d65e8:	07d0      	lsls	r0, r2, #31
   d65ea:	bf5c      	itt	pl
   d65ec:	2201      	movpl	r2, #1
   d65ee:	601a      	strpl	r2, [r3, #0]
   d65f0:	4b22      	ldr	r3, [pc, #136]	; (d667c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d65f2:	681a      	ldr	r2, [r3, #0]
   d65f4:	07d1      	lsls	r1, r2, #31
   d65f6:	bf5c      	itt	pl
   d65f8:	2201      	movpl	r2, #1
   d65fa:	601a      	strpl	r2, [r3, #0]
   d65fc:	4b20      	ldr	r3, [pc, #128]	; (d6680 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d65fe:	681a      	ldr	r2, [r3, #0]
   d6600:	07d2      	lsls	r2, r2, #31
   d6602:	bf5c      	itt	pl
   d6604:	2201      	movpl	r2, #1
   d6606:	601a      	strpl	r2, [r3, #0]
   d6608:	4b1e      	ldr	r3, [pc, #120]	; (d6684 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d660a:	681a      	ldr	r2, [r3, #0]
   d660c:	07d0      	lsls	r0, r2, #31
   d660e:	bf5c      	itt	pl
   d6610:	2201      	movpl	r2, #1
   d6612:	601a      	strpl	r2, [r3, #0]
   d6614:	4b1c      	ldr	r3, [pc, #112]	; (d6688 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d6616:	681a      	ldr	r2, [r3, #0]
   d6618:	07d1      	lsls	r1, r2, #31
   d661a:	bf5c      	itt	pl
   d661c:	2201      	movpl	r2, #1
   d661e:	601a      	strpl	r2, [r3, #0]
   d6620:	4b1a      	ldr	r3, [pc, #104]	; (d668c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6622:	681a      	ldr	r2, [r3, #0]
   d6624:	07d2      	lsls	r2, r2, #31
   d6626:	bf5c      	itt	pl
   d6628:	2201      	movpl	r2, #1
   d662a:	601a      	strpl	r2, [r3, #0]
   d662c:	4b18      	ldr	r3, [pc, #96]	; (d6690 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d662e:	681a      	ldr	r2, [r3, #0]
   d6630:	07d0      	lsls	r0, r2, #31
   d6632:	bf5c      	itt	pl
   d6634:	2201      	movpl	r2, #1
   d6636:	601a      	strpl	r2, [r3, #0]
   d6638:	4b16      	ldr	r3, [pc, #88]	; (d6694 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d663a:	681a      	ldr	r2, [r3, #0]
   d663c:	07d1      	lsls	r1, r2, #31
   d663e:	bf5c      	itt	pl
   d6640:	2201      	movpl	r2, #1
   d6642:	601a      	strpl	r2, [r3, #0]
   d6644:	4b14      	ldr	r3, [pc, #80]	; (d6698 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6646:	681a      	ldr	r2, [r3, #0]
   d6648:	07d2      	lsls	r2, r2, #31
   d664a:	bf5c      	itt	pl
   d664c:	2201      	movpl	r2, #1
   d664e:	601a      	strpl	r2, [r3, #0]
   d6650:	4b12      	ldr	r3, [pc, #72]	; (d669c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d6652:	681a      	ldr	r2, [r3, #0]
   d6654:	07d0      	lsls	r0, r2, #31
   d6656:	bf5c      	itt	pl
   d6658:	2201      	movpl	r2, #1
   d665a:	601a      	strpl	r2, [r3, #0]
   d665c:	4b10      	ldr	r3, [pc, #64]	; (d66a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d665e:	681a      	ldr	r2, [r3, #0]
   d6660:	07d1      	lsls	r1, r2, #31
   d6662:	bf5c      	itt	pl
   d6664:	2201      	movpl	r2, #1
   d6666:	601a      	strpl	r2, [r3, #0]
   d6668:	4b0e      	ldr	r3, [pc, #56]	; (d66a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d666a:	681a      	ldr	r2, [r3, #0]
   d666c:	07d2      	lsls	r2, r2, #31
   d666e:	bf5c      	itt	pl
   d6670:	2201      	movpl	r2, #1
   d6672:	601a      	strpl	r2, [r3, #0]
   d6674:	4770      	bx	lr
   d6676:	bf00      	nop
   d6678:	2003e7cc 	.word	0x2003e7cc
   d667c:	2003e7c8 	.word	0x2003e7c8
   d6680:	2003e7c4 	.word	0x2003e7c4
   d6684:	2003e7c0 	.word	0x2003e7c0
   d6688:	2003e7bc 	.word	0x2003e7bc
   d668c:	2003e7b8 	.word	0x2003e7b8
   d6690:	2003e7b4 	.word	0x2003e7b4
   d6694:	2003e7b0 	.word	0x2003e7b0
   d6698:	2003e7ac 	.word	0x2003e7ac
   d669c:	2003e7a8 	.word	0x2003e7a8
   d66a0:	2003e7a4 	.word	0x2003e7a4
   d66a4:	2003e7a0 	.word	0x2003e7a0

000d66a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d66a8:	4b18      	ldr	r3, [pc, #96]	; (d670c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d66aa:	681a      	ldr	r2, [r3, #0]
   d66ac:	07d1      	lsls	r1, r2, #31
   d66ae:	bf5c      	itt	pl
   d66b0:	2201      	movpl	r2, #1
   d66b2:	601a      	strpl	r2, [r3, #0]
   d66b4:	4b16      	ldr	r3, [pc, #88]	; (d6710 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d66b6:	681a      	ldr	r2, [r3, #0]
   d66b8:	07d2      	lsls	r2, r2, #31
   d66ba:	bf5c      	itt	pl
   d66bc:	2201      	movpl	r2, #1
   d66be:	601a      	strpl	r2, [r3, #0]
   d66c0:	4b14      	ldr	r3, [pc, #80]	; (d6714 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d66c2:	681a      	ldr	r2, [r3, #0]
   d66c4:	07d0      	lsls	r0, r2, #31
   d66c6:	bf5c      	itt	pl
   d66c8:	2201      	movpl	r2, #1
   d66ca:	601a      	strpl	r2, [r3, #0]
   d66cc:	4b12      	ldr	r3, [pc, #72]	; (d6718 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d66ce:	681a      	ldr	r2, [r3, #0]
   d66d0:	07d1      	lsls	r1, r2, #31
   d66d2:	bf5c      	itt	pl
   d66d4:	2201      	movpl	r2, #1
   d66d6:	601a      	strpl	r2, [r3, #0]
   d66d8:	4b10      	ldr	r3, [pc, #64]	; (d671c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d66da:	681a      	ldr	r2, [r3, #0]
   d66dc:	07d2      	lsls	r2, r2, #31
   d66de:	bf5c      	itt	pl
   d66e0:	2201      	movpl	r2, #1
   d66e2:	601a      	strpl	r2, [r3, #0]
   d66e4:	4b0e      	ldr	r3, [pc, #56]	; (d6720 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d66e6:	681a      	ldr	r2, [r3, #0]
   d66e8:	07d0      	lsls	r0, r2, #31
   d66ea:	bf5c      	itt	pl
   d66ec:	2201      	movpl	r2, #1
   d66ee:	601a      	strpl	r2, [r3, #0]
   d66f0:	4b0c      	ldr	r3, [pc, #48]	; (d6724 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d66f2:	681a      	ldr	r2, [r3, #0]
   d66f4:	07d1      	lsls	r1, r2, #31
   d66f6:	bf5c      	itt	pl
   d66f8:	2201      	movpl	r2, #1
   d66fa:	601a      	strpl	r2, [r3, #0]
   d66fc:	4b0a      	ldr	r3, [pc, #40]	; (d6728 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d66fe:	681a      	ldr	r2, [r3, #0]
   d6700:	07d2      	lsls	r2, r2, #31
   d6702:	bf5c      	itt	pl
   d6704:	2201      	movpl	r2, #1
   d6706:	601a      	strpl	r2, [r3, #0]
   d6708:	4770      	bx	lr
   d670a:	bf00      	nop
   d670c:	2003e7ec 	.word	0x2003e7ec
   d6710:	2003e7e8 	.word	0x2003e7e8
   d6714:	2003e7e4 	.word	0x2003e7e4
   d6718:	2003e7e0 	.word	0x2003e7e0
   d671c:	2003e7dc 	.word	0x2003e7dc
   d6720:	2003e7d8 	.word	0x2003e7d8
   d6724:	2003e7d4 	.word	0x2003e7d4
   d6728:	2003e7d0 	.word	0x2003e7d0

000d672c <__cxa_atexit>:
   d672c:	b510      	push	{r4, lr}
   d672e:	4c05      	ldr	r4, [pc, #20]	; (d6744 <__cxa_atexit+0x18>)
   d6730:	4613      	mov	r3, r2
   d6732:	b12c      	cbz	r4, d6740 <__cxa_atexit+0x14>
   d6734:	460a      	mov	r2, r1
   d6736:	4601      	mov	r1, r0
   d6738:	2002      	movs	r0, #2
   d673a:	f3af 8000 	nop.w
   d673e:	bd10      	pop	{r4, pc}
   d6740:	4620      	mov	r0, r4
   d6742:	bd10      	pop	{r4, pc}
   d6744:	00000000 	.word	0x00000000

000d6748 <ldiv>:
   d6748:	2900      	cmp	r1, #0
   d674a:	b510      	push	{r4, lr}
   d674c:	fb91 f4f2 	sdiv	r4, r1, r2
   d6750:	fb02 1314 	mls	r3, r2, r4, r1
   d6754:	db04      	blt.n	d6760 <ldiv+0x18>
   d6756:	2b00      	cmp	r3, #0
   d6758:	da07      	bge.n	d676a <ldiv+0x22>
   d675a:	3401      	adds	r4, #1
   d675c:	1a9b      	subs	r3, r3, r2
   d675e:	e004      	b.n	d676a <ldiv+0x22>
   d6760:	2b00      	cmp	r3, #0
   d6762:	bfc4      	itt	gt
   d6764:	f104 34ff 	addgt.w	r4, r4, #4294967295
   d6768:	189b      	addgt	r3, r3, r2
   d676a:	6004      	str	r4, [r0, #0]
   d676c:	6043      	str	r3, [r0, #4]
   d676e:	bd10      	pop	{r4, pc}

000d6770 <memcpy>:
   d6770:	b510      	push	{r4, lr}
   d6772:	1e43      	subs	r3, r0, #1
   d6774:	440a      	add	r2, r1
   d6776:	4291      	cmp	r1, r2
   d6778:	d004      	beq.n	d6784 <memcpy+0x14>
   d677a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d677e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6782:	e7f8      	b.n	d6776 <memcpy+0x6>
   d6784:	bd10      	pop	{r4, pc}

000d6786 <memset>:
   d6786:	4402      	add	r2, r0
   d6788:	4603      	mov	r3, r0
   d678a:	4293      	cmp	r3, r2
   d678c:	d002      	beq.n	d6794 <memset+0xe>
   d678e:	f803 1b01 	strb.w	r1, [r3], #1
   d6792:	e7fa      	b.n	d678a <memset+0x4>
   d6794:	4770      	bx	lr
	...

000d6798 <srand>:
   d6798:	b538      	push	{r3, r4, r5, lr}
   d679a:	4b12      	ldr	r3, [pc, #72]	; (d67e4 <srand+0x4c>)
   d679c:	681c      	ldr	r4, [r3, #0]
   d679e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d67a0:	4605      	mov	r5, r0
   d67a2:	b9d3      	cbnz	r3, d67da <srand+0x42>
   d67a4:	2018      	movs	r0, #24
   d67a6:	f7fe faa7 	bl	d4cf8 <malloc>
   d67aa:	f243 330e 	movw	r3, #13070	; 0x330e
   d67ae:	63a0      	str	r0, [r4, #56]	; 0x38
   d67b0:	8003      	strh	r3, [r0, #0]
   d67b2:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d67b6:	8043      	strh	r3, [r0, #2]
   d67b8:	f241 2334 	movw	r3, #4660	; 0x1234
   d67bc:	8083      	strh	r3, [r0, #4]
   d67be:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d67c2:	80c3      	strh	r3, [r0, #6]
   d67c4:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d67c8:	8103      	strh	r3, [r0, #8]
   d67ca:	2305      	movs	r3, #5
   d67cc:	8143      	strh	r3, [r0, #10]
   d67ce:	230b      	movs	r3, #11
   d67d0:	8183      	strh	r3, [r0, #12]
   d67d2:	2201      	movs	r2, #1
   d67d4:	2300      	movs	r3, #0
   d67d6:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d67da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d67dc:	2200      	movs	r2, #0
   d67de:	611d      	str	r5, [r3, #16]
   d67e0:	615a      	str	r2, [r3, #20]
   d67e2:	bd38      	pop	{r3, r4, r5, pc}
   d67e4:	2003e330 	.word	0x2003e330

000d67e8 <strcmp>:
   d67e8:	f810 2b01 	ldrb.w	r2, [r0], #1
   d67ec:	f811 3b01 	ldrb.w	r3, [r1], #1
   d67f0:	2a01      	cmp	r2, #1
   d67f2:	bf28      	it	cs
   d67f4:	429a      	cmpcs	r2, r3
   d67f6:	d0f7      	beq.n	d67e8 <strcmp>
   d67f8:	1ad0      	subs	r0, r2, r3
   d67fa:	4770      	bx	lr

000d67fc <strcpy>:
   d67fc:	4603      	mov	r3, r0
   d67fe:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6802:	f803 2b01 	strb.w	r2, [r3], #1
   d6806:	2a00      	cmp	r2, #0
   d6808:	d1f9      	bne.n	d67fe <strcpy+0x2>
   d680a:	4770      	bx	lr

000d680c <strdup>:
   d680c:	4b02      	ldr	r3, [pc, #8]	; (d6818 <strdup+0xc>)
   d680e:	4601      	mov	r1, r0
   d6810:	6818      	ldr	r0, [r3, #0]
   d6812:	f000 b803 	b.w	d681c <_strdup_r>
   d6816:	bf00      	nop
   d6818:	2003e330 	.word	0x2003e330

000d681c <_strdup_r>:
   d681c:	b570      	push	{r4, r5, r6, lr}
   d681e:	4606      	mov	r6, r0
   d6820:	4608      	mov	r0, r1
   d6822:	460c      	mov	r4, r1
   d6824:	f000 f80d 	bl	d6842 <strlen>
   d6828:	1c45      	adds	r5, r0, #1
   d682a:	4629      	mov	r1, r5
   d682c:	4630      	mov	r0, r6
   d682e:	f7fe fa83 	bl	d4d38 <_malloc_r>
   d6832:	4606      	mov	r6, r0
   d6834:	b118      	cbz	r0, d683e <_strdup_r+0x22>
   d6836:	462a      	mov	r2, r5
   d6838:	4621      	mov	r1, r4
   d683a:	f7ff ff99 	bl	d6770 <memcpy>
   d683e:	4630      	mov	r0, r6
   d6840:	bd70      	pop	{r4, r5, r6, pc}

000d6842 <strlen>:
   d6842:	4603      	mov	r3, r0
   d6844:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6848:	2a00      	cmp	r2, #0
   d684a:	d1fb      	bne.n	d6844 <strlen+0x2>
   d684c:	1a18      	subs	r0, r3, r0
   d684e:	3801      	subs	r0, #1
   d6850:	4770      	bx	lr

000d6852 <link_code_end>:
	...

000d6854 <dynalib_user>:
   d6854:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d6864:	0000 0000 6973 5300 7465 6974 676e 7320     ....si.Setting s
   d6874:	6e65 4964 746e 7265 6176 206c 6f74 203a     endInterval to: 
   d6884:	6c00 0069 6553 7474 6e69 2067 6f6c 4967     .li.Setting logI
   d6894:	746e 7265 6176 206c 6f74 203a 7300 006d     nterval to: .sm.
   d68a4:	6553 7474 6e69 2067 7473 7461 7375 6e49     Setting statusIn
   d68b4:	6574 7672 6c61 7420 3a6f 0020 6d74 5300     terval to: .tm.S
   d68c4:	7465 6974 676e 7420 6172 736e 696d 4d74     etting transmitM
   d68d4:	646f 2065 6f74 203a 7400 006f 6553 7474     ode to: .to.Sett
   d68e4:	6e69 2067 6974 656d 756f 2074 6f74 203a     ing timeout to: 
   d68f4:	6400 0062 6553 7474 6e69 2067 6564 7562     .db.Setting debu
   d6904:	2067 6f74 203a 7400 7572 0065 6e55 6e6b     g to: .true.Unkn
   d6914:	776f 206e 6170 6172 656d 6574 2d72 0020     own parameter- .
   d6924:	0022 002e 7453 7261 6974 676e 2c00 7453     "...Starting.,St
   d6934:	7461 7375 002c 696c 003a 732c 3a69 2c00     atus,.li:.,si:.,
   d6944:	6d73 003a 742c 3a6d 2c00 6f74 003a 762c     sm:.,tm:.,to:.,v
   d6954:	7265 003a 202c 5352 4953 203a 5300 6174     er:., RSSI: .Sta
   d6964:	7574 0073 522c 7065 796c 002c 6f43 6e75     tus.,Reply,.Coun
   d6974:	6574 0072 5452 0043 312c 3430 2c33 7400     ter.RTC.,1043,.t
   d6984:	746f 6c61 6150 6c79 616f 3a64 0020 4950     otalPayload: .PI
   d6994:	004e 6c53 6565 2070 7266 6d6f 5020 6e69     N.Sleep from Pin
   d69a4:	5720 6b61 3a65 0020 6f4e 6d72 6c61 7320      Wake: .Normal s
   d69b4:	656c 7065 3100 312e 322e 0000               leep.1.1.2..

000d69c0 <_ZTVN5spark13EthernetClassE>:
	...
   d69c8:	4da7 000d 4d9d 000d 4d93 000d 4d89 000d     .M...M...M...M..
   d69d8:	4d7d 000d 4d71 000d 4d65 000d 4d5d 000d     }M..qM..eM..]M..
   d69e8:	4d53 000d 4d49 000d 6229 000d               SM..IM..)b..

000d69f4 <_ZTV8SPIClass>:
	...
   d69fc:	4dc5 000d 4dc7 000d 6162 6475 5300 7265     .M...M..baud.Ser
   d6a0c:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   d6a1c:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   d6a2c:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   d6a3c:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   d6a4c:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   d6a5c:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   d6a6c:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   d6a7c:	3130 7530 0020 205d 2500 0064 202c 2800     010u .] .%d., .(
   d6a8c:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   d6a9c:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   d6aac:	0066 6e6c 6600 006e 6f63 6564 6400 7465     f.ln.fn.code.det
   d6abc:	6961 006c 6f6e 656e 7400 6172 6563 6900     ail.none.trace.i
   d6acc:	666e 006f 6177 6e72 6500 7272 726f 7000     nfo.warn.error.p
   d6adc:	6e61 6369 6100 6c6c 5a00 2500 302b 6433     anic.all.Z.%+03d
   d6aec:	253a 3230 0075 5925 252d 2d6d 6425 2554     :%02u.%Y-%m-%dT%
   d6afc:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   d6b0c:	0065 0000                                   e...

000d6b10 <_ZTV14CellularSignal>:
	...
   d6b18:	5439 000d 54cb 000d 543b 000d 550d 000d     9T...T..;T...U..
   d6b28:	5441 000d 54d9 000d 546d 000d 5499 000d     AT...T..mT...T..
   d6b38:	fffc ffff 0000 0000 54c3 000d               .........T..

000d6b44 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d6b4c:	562d 000d 5633 000d 5677 000d 5641 000d     -V..3V..wV..AV..
   d6b5c:	562f 000d                                   /V..

000d6b60 <_ZTV9IPAddress>:
	...
   d6b68:	5bc5 000d 5bb5 000d 5bb7 000d               .[...[...[..

000d6b74 <_ZTV9USBSerial>:
	...
   d6b7c:	5c9d 000d 5ced 000d 5cfb 000d 5225 000d     .\...\...\..%R..
   d6b8c:	5cd9 000d 5c9f 000d 5cb5 000d 5ce7 000d     .\...\...\...\..
   d6b9c:	5ccb 000d 5c99 000d                         .\...\..

000d6ba4 <_ZTVN5spark13CellularClassE>:
	...
   d6bac:	5dfd 000d 5df3 000d 5de9 000d 40c7 000d     .]...]...]...@..
   d6bbc:	5ddd 000d 5dd1 000d 5dc5 000d 5dbd 000d     .]...]...]...]..
   d6bcc:	5db3 000d 5da9 000d 6229 000d               .]...]..)b..

000d6bd8 <_ZTV11USARTSerial>:
	...
   d6be0:	5ead 000d 5efd 000d 5f0b 000d 5225 000d     .^...^..._..%R..
   d6bf0:	5ec1 000d 5ee3 000d 5ecf 000d 5ef7 000d     .^...^...^...^..
   d6c00:	5eaf 000d 5eb3 000d                         .^...^..

000d6c08 <_ZTV7TwoWire>:
	...
   d6c10:	5fd9 000d 6023 000d 5ffb 000d 5fdb 000d     ._..#`..._..._..
   d6c20:	6003 000d 600b 000d 6013 000d 601b 000d     .`...`...`...`..

000d6c30 <_ZTVN5spark9MeshClassE>:
	...
   d6c38:	60bb 000d 60b1 000d 60a7 000d 609d 000d     .`...`...`...`..
   d6c48:	6091 000d 6085 000d 6079 000d 6071 000d     .`...`..y`..q`..
   d6c58:	6067 000d 605d 000d 6229 000d               g`..]`..)b..

000d6c64 <_ZTVN5spark12NetworkClassE>:
	...
   d6c6c:	61c1 000d 61cb 000d 61d5 000d 61df 000d     .a...a...a...a..
   d6c7c:	61e9 000d 61f5 000d 6201 000d 620d 000d     .a...a...b...b..
   d6c8c:	6215 000d 621f 000d 6229 000d               .b...b..)b..

000d6c98 <__sf_fake_stdin>:
	...

000d6cb8 <__sf_fake_stdout>:
	...

000d6cd8 <__sf_fake_stderr>:
	...

000d6cf8 <link_const_variable_data_end>:
   d6cf8:	000d47b1 	.word	0x000d47b1
   d6cfc:	000d4db1 	.word	0x000d4db1
   d6d00:	000d4e7d 	.word	0x000d4e7d
   d6d04:	000d5215 	.word	0x000d5215
   d6d08:	000d5349 	.word	0x000d5349
   d6d0c:	000d53c5 	.word	0x000d53c5
   d6d10:	000d541d 	.word	0x000d541d
   d6d14:	000d5e7d 	.word	0x000d5e7d
   d6d18:	000d6171 	.word	0x000d6171
   d6d1c:	000d62f5 	.word	0x000d62f5
   d6d20:	000d6405 	.word	0x000d6405
   d6d24:	000d649d 	.word	0x000d649d
   d6d28:	000d6521 	.word	0x000d6521
   d6d2c:	000d65e5 	.word	0x000d65e5
   d6d30:	000d66a9 	.word	0x000d66a9

000d6d34 <link_constructors_end>:
	...
